
kernel.bin:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_start>:
# Execution starts here.
.global _start
_start:
	# Any hardware threads (hart) that are not bootstrapping
	# need to wait for an IPI
	csrr	t0, mhartid
    80000000:	f14022f3          	csrr	t0,mhartid
	bnez	t0, 3f
    80000004:	08029463          	bnez	t0,8000008c <kpost_init+0x20>
	# SATP should be zero, but let's make sure
	csrw	satp, zero
    80000008:	18001073          	csrw	satp,zero
	# Disable linker instruction relaxation for the `la` instruction below.
	# This disallows the assembler from assuming that `gp` is already initialized.
	# This causes the value stored in `gp` to be calculated from `pc`.
.option push
.option norelax
	la		gp, _global_pointer
    8000000c:	00004197          	auipc	gp,0x4
    80000010:	b2f18193          	addi	gp,gp,-1233 # 80003b3b <_global_pointer>
.option pop
	# Set all bytes in the BSS section to zero.
	la 		a0, _bss_start
    80000014:	00006517          	auipc	a0,0x6
    80000018:	fec50513          	addi	a0,a0,-20 # 80006000 <KERNEL_MMU_TABLE>
	la		a1, _bss_end
    8000001c:	00006597          	auipc	a1,0x6
    80000020:	fec58593          	addi	a1,a1,-20 # 80006008 <_bss_end>
	bgeu	a0, a1, 2f
    80000024:	00b57863          	bgeu	a0,a1,80000034 <_start+0x34>
1:
	sd		zero, (a0)
    80000028:	00053023          	sd	zero,0(a0)
	addi	a0, a0, 8
    8000002c:	00850513          	addi	a0,a0,8
	bltu	a0, a1, 1b
    80000030:	feb56ce3          	bltu	a0,a1,80000028 <_start+0x28>
	# li		t5, 0xffff;
	# csrw	medeleg, t5
	# csrw	mideleg, t5
	# The stack grows from bottom to top, so we put the stack pointer
	# to the very end of the stack range.
	la		sp, _stack_end
    80000034:	00007117          	auipc	sp,0x7
    80000038:	fcc10113          	addi	sp,sp,-52 # 80007000 <_stack_end>
	# Setting `mstatus` register:
	# 0b11 << 11: Machine's previous protection mode is 3 (MPP=3).
	li		t0, 0b11 << 11
    8000003c:	000022b7          	lui	t0,0x2
    80000040:	8002829b          	addiw	t0,t0,-2048
	csrw	mstatus, t0
    80000044:	30029073          	csrw	mstatus,t0
	# Machine's exception program counter (MEPC) is set to `kinit`.
	la		t1, kinit
    80000048:	00001317          	auipc	t1,0x1
    8000004c:	50c30313          	addi	t1,t1,1292 # 80001554 <kinit>
	csrw	mepc, t1
    80000050:	34131073          	csrw	mepc,t1
    # Machine's trap vector base address is set to `asm_trap_vector`.
    la              t2, m_trap_vector
    80000054:	00000397          	auipc	t2,0x0
    80000058:	04c38393          	addi	t2,t2,76 # 800000a0 <m_trap_vector>
    csrw    mtvec, t2
    8000005c:	30539073          	csrw	mtvec,t2
	# Set the return address to get us into supervisor mode
	la		ra, kpost_init
    80000060:	00000097          	auipc	ra,0x0
    80000064:	00c08093          	addi	ra,ra,12 # 8000006c <kpost_init>
	# We use mret here so that the mstatus register is properly updated.
	mret
    80000068:	30200073          	mret

000000008000006c <kpost_init>:
	# 1 << 8    : Supervisor's previous protection mode is 1 (SPP=1 [Supervisor]).
	# 1 << 5    : Supervisor's previous interrupt-enable bit is 1 (SPIE=1 [Enabled]).
	# 1 << 1    : Supervisor's interrupt-enable bit will be set to 1 after sret.
	# We set the "previous" bits because the sret will write the current bits
	# with the previous bits.
	li		t0, (1 << 8) | (1 << 5)
    8000006c:	12000293          	li	t0,288
	csrw	sstatus, t0
    80000070:	10029073          	csrw	sstatus,t0
	la		t1, kmain
    80000074:	00001317          	auipc	t1,0x1
    80000078:	53630313          	addi	t1,t1,1334 # 800015aa <kmain>
	csrw	sepc, t1
    8000007c:	14131073          	csrw	sepc,t1
	# 1 << 1    : Supervisor software interrupt enable (SSIE=1 [Enabled])
	# 1 << 5    : Supervisor timer interrupt enable (STIE=1 [Enabled])
	# 1 << 9    : Supervisor external interrupt enable (SEIE=1 [Enabled])

	# kinit() is required to return back the SATP value (including MODE) via a0
	csrw	satp, a0
    80000080:	18051073          	csrw	satp,a0
	# Force the CPU to take our SATP register.
	# To be efficient, if the address space identifier (ASID) portion of SATP is already
	# in cache, it will just grab whatever's in cache. However, that means if we've updated
	# it in memory, it will be the old table. So, sfence.vma will ensure that the MMU always
	# grabs a fresh copy of the SATP register and associated tables.
	sfence.vma
    80000084:	12000073          	sfence.vma
	# sret will put us in supervisor mode and re-enable interrupts
	sret
    80000088:	10200073          	sret
	# Which is calculated by: base_address + hart * 4
	# where base address is 0x0200_0000 (MMIO CLINT base address)
	# We only use additional harts to run user-space programs, although this may
	# change.
4:
	wfi
    8000008c:	10500073          	wfi
	j		4b
    80000090:	ffdff06f          	j	8000008c <kpost_init+0x20>
	...

00000000800000a0 <m_trap_vector>:
	#  Trap stack       520
	#  CPU HARTID		528
	# We use t6 as the temporary register because it is the very
	# bottom register (x31)

    csrrw t6, mscratch, t6
    800000a0:	340f9ff3          	csrrw	t6,mscratch,t6
    mv t6, sp
    800000a4:	00010f93          	mv	t6,sp

.set i,0
.rept 31
    intreg_cpy %i
    .set i,i+1
.endr
    800000a8:	000fb023          	sd	zero,0(t6)
    800000ac:	008f8f93          	addi	t6,t6,8
    800000b0:	001fb023          	sd	ra,0(t6)
    800000b4:	008f8f93          	addi	t6,t6,8
    800000b8:	002fb023          	sd	sp,0(t6)
    800000bc:	008f8f93          	addi	t6,t6,8
    800000c0:	003fb023          	sd	gp,0(t6)
    800000c4:	008f8f93          	addi	t6,t6,8
    800000c8:	004fb023          	sd	tp,0(t6)
    800000cc:	008f8f93          	addi	t6,t6,8
    800000d0:	005fb023          	sd	t0,0(t6)
    800000d4:	008f8f93          	addi	t6,t6,8
    800000d8:	006fb023          	sd	t1,0(t6)
    800000dc:	008f8f93          	addi	t6,t6,8
    800000e0:	007fb023          	sd	t2,0(t6)
    800000e4:	008f8f93          	addi	t6,t6,8
    800000e8:	008fb023          	sd	s0,0(t6)
    800000ec:	008f8f93          	addi	t6,t6,8
    800000f0:	009fb023          	sd	s1,0(t6)
    800000f4:	008f8f93          	addi	t6,t6,8
    800000f8:	00afb023          	sd	a0,0(t6)
    800000fc:	008f8f93          	addi	t6,t6,8
    80000100:	00bfb023          	sd	a1,0(t6)
    80000104:	008f8f93          	addi	t6,t6,8
    80000108:	00cfb023          	sd	a2,0(t6)
    8000010c:	008f8f93          	addi	t6,t6,8
    80000110:	00dfb023          	sd	a3,0(t6)
    80000114:	008f8f93          	addi	t6,t6,8
    80000118:	00efb023          	sd	a4,0(t6)
    8000011c:	008f8f93          	addi	t6,t6,8
    80000120:	00ffb023          	sd	a5,0(t6)
    80000124:	008f8f93          	addi	t6,t6,8
    80000128:	010fb023          	sd	a6,0(t6)
    8000012c:	008f8f93          	addi	t6,t6,8
    80000130:	011fb023          	sd	a7,0(t6)
    80000134:	008f8f93          	addi	t6,t6,8
    80000138:	012fb023          	sd	s2,0(t6)
    8000013c:	008f8f93          	addi	t6,t6,8
    80000140:	013fb023          	sd	s3,0(t6)
    80000144:	008f8f93          	addi	t6,t6,8
    80000148:	014fb023          	sd	s4,0(t6)
    8000014c:	008f8f93          	addi	t6,t6,8
    80000150:	015fb023          	sd	s5,0(t6)
    80000154:	008f8f93          	addi	t6,t6,8
    80000158:	016fb023          	sd	s6,0(t6)
    8000015c:	008f8f93          	addi	t6,t6,8
    80000160:	017fb023          	sd	s7,0(t6)
    80000164:	008f8f93          	addi	t6,t6,8
    80000168:	018fb023          	sd	s8,0(t6)
    8000016c:	008f8f93          	addi	t6,t6,8
    80000170:	019fb023          	sd	s9,0(t6)
    80000174:	008f8f93          	addi	t6,t6,8
    80000178:	01afb023          	sd	s10,0(t6)
    8000017c:	008f8f93          	addi	t6,t6,8
    80000180:	01bfb023          	sd	s11,0(t6)
    80000184:	008f8f93          	addi	t6,t6,8
    80000188:	01cfb023          	sd	t3,0(t6)
    8000018c:	008f8f93          	addi	t6,t6,8
    80000190:	01dfb023          	sd	t4,0(t6)
    80000194:	008f8f93          	addi	t6,t6,8
    80000198:	01efb023          	sd	t5,0(t6)
    8000019c:	008f8f93          	addi	t6,t6,8

    csrrw t5, mscratch, t5
    800001a0:	340f1f73          	csrrw	t5,mscratch,t5
    intreg_cpy 30 # t5/x30 stores the real t6/x31 because t6 is our counter
    800001a4:	01efb023          	sd	t5,0(t6)
    800001a8:	008f8f93          	addi	t6,t6,8
#.endr

	# Get ready to go into Rust (trap.rs)
	# We don't want to write into the user's stack or whomever
	# messed with us here.
    csrr	a0, mepc
    800001ac:	34102573          	csrr	a0,mepc
    csrr	a1, mtval
    800001b0:	343025f3          	csrr	a1,mtval
    csrr	a2, mcause
    800001b4:	34202673          	csrr	a2,mcause
    csrr	a3, mhartid
    800001b8:	f14026f3          	csrr	a3,mhartid
    csrr	a4, mstatus
    800001bc:	30002773          	csrr	a4,mstatus
    mv      a5, sp
    800001c0:	00010793          	mv	a5,sp
	call	m_trap
    800001c4:	5ac010ef          	jal	ra,80001770 <m_trap>

	# When we get here, we've returned from m_trap, restore registers
	# and return.
	# m_trap will return the return address via a0.

	csrw	mepc, a0
    800001c8:	34151073          	csrw	mepc,a0
#	.endr

	# Since we ran this loop 31 times starting with i = 1,
	# the last one loaded t6 back to its original value.

	mret
    800001cc:	30200073          	mret

00000000800001d0 <uart_init>:
#define UART_BASE_ADDRESS ((u8*)0x10000000)
 
void uart_init()
{
    800001d0:	1101                	addi	sp,sp,-32
    800001d2:	ec22                	sd	s0,24(sp)
    800001d4:	1000                	addi	s0,sp,32
    *(UART_BASE_ADDRESS + 3) = 0b11;
    800001d6:	100007b7          	lui	a5,0x10000
    800001da:	078d                	addi	a5,a5,3
    800001dc:	470d                	li	a4,3
    800001de:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
    *(UART_BASE_ADDRESS + 2) = 1;
    800001e2:	100007b7          	lui	a5,0x10000
    800001e6:	0789                	addi	a5,a5,2
    800001e8:	4705                	li	a4,1
    800001ea:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
    *(UART_BASE_ADDRESS + 1) = 1;
    800001ee:	100007b7          	lui	a5,0x10000
    800001f2:	0785                	addi	a5,a5,1
    800001f4:	4705                	li	a4,1
    800001f6:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
 
    u16 divisor = 592;
    800001fa:	25000793          	li	a5,592
    800001fe:	fef41723          	sh	a5,-18(s0)
    u8 divisor_least = divisor & 0xff;
    80000202:	fee45783          	lhu	a5,-18(s0)
    80000206:	fef406a3          	sb	a5,-19(s0)
    u8 divisor_most = divisor >> 8;
    8000020a:	fee45783          	lhu	a5,-18(s0)
    8000020e:	0087d79b          	srliw	a5,a5,0x8
    80000212:	17c2                	slli	a5,a5,0x30
    80000214:	93c1                	srli	a5,a5,0x30
    80000216:	fef40623          	sb	a5,-20(s0)
 
    u8 lcr = *(UART_BASE_ADDRESS + 3);
    8000021a:	100007b7          	lui	a5,0x10000
    8000021e:	078d                	addi	a5,a5,3
    80000220:	0007c783          	lbu	a5,0(a5) # 10000000 <_heap_size+0x8087000>
    80000224:	fef405a3          	sb	a5,-21(s0)
    *(UART_BASE_ADDRESS + 3) = lcr | (1 << 7);
    80000228:	100007b7          	lui	a5,0x10000
    8000022c:	078d                	addi	a5,a5,3
    8000022e:	feb44703          	lbu	a4,-21(s0)
    80000232:	f8076713          	ori	a4,a4,-128
    80000236:	0ff77713          	andi	a4,a4,255
    8000023a:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
 
    *(UART_BASE_ADDRESS + 0) = divisor_least;
    8000023e:	100007b7          	lui	a5,0x10000
    80000242:	fed44703          	lbu	a4,-19(s0)
    80000246:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
    *(UART_BASE_ADDRESS + 1) = divisor_most;
    8000024a:	100007b7          	lui	a5,0x10000
    8000024e:	0785                	addi	a5,a5,1
    80000250:	fec44703          	lbu	a4,-20(s0)
    80000254:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
 
    *(UART_BASE_ADDRESS + 3) = lcr;
    80000258:	100007b7          	lui	a5,0x10000
    8000025c:	078d                	addi	a5,a5,3
    8000025e:	feb44703          	lbu	a4,-21(s0)
    80000262:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
}
    80000266:	0001                	nop
    80000268:	6462                	ld	s0,24(sp)
    8000026a:	6105                	addi	sp,sp,32
    8000026c:	8082                	ret

000000008000026e <uart_write>:
 
void uart_write(u8* data, u64 len)
{
    8000026e:	7179                	addi	sp,sp,-48
    80000270:	f422                	sd	s0,40(sp)
    80000272:	1800                	addi	s0,sp,48
    80000274:	fca43c23          	sd	a0,-40(s0)
    80000278:	fcb43823          	sd	a1,-48(s0)
    for(u64 i = 0; i < len; i++)
    8000027c:	fe043423          	sd	zero,-24(s0)
    80000280:	a00d                	j	800002a2 <uart_write+0x34>
    { *UART_BASE_ADDRESS = data[i]; }
    80000282:	fd843703          	ld	a4,-40(s0)
    80000286:	fe843783          	ld	a5,-24(s0)
    8000028a:	973e                	add	a4,a4,a5
    8000028c:	100007b7          	lui	a5,0x10000
    80000290:	00074703          	lbu	a4,0(a4)
    80000294:	00e78023          	sb	a4,0(a5) # 10000000 <_heap_size+0x8087000>
    for(u64 i = 0; i < len; i++)
    80000298:	fe843783          	ld	a5,-24(s0)
    8000029c:	0785                	addi	a5,a5,1
    8000029e:	fef43423          	sd	a5,-24(s0)
    800002a2:	fe843703          	ld	a4,-24(s0)
    800002a6:	fd043783          	ld	a5,-48(s0)
    800002aa:	fcf76ce3          	bltu	a4,a5,80000282 <uart_write+0x14>
}
    800002ae:	0001                	nop
    800002b0:	0001                	nop
    800002b2:	7422                	ld	s0,40(sp)
    800002b4:	6145                	addi	sp,sp,48
    800002b6:	8082                	ret

00000000800002b8 <uart_read>:
 
u64 uart_read(u8* data, u64 len)
{
    800002b8:	7179                	addi	sp,sp,-48
    800002ba:	f422                	sd	s0,40(sp)
    800002bc:	1800                	addi	s0,sp,48
    800002be:	fca43c23          	sd	a0,-40(s0)
    800002c2:	fcb43823          	sd	a1,-48(s0)
    for(u64 i = 0; i < len; i++)
    800002c6:	fe043423          	sd	zero,-24(s0)
    800002ca:	a82d                	j	80000304 <uart_read+0x4c>
    {
        if((*(UART_BASE_ADDRESS + 5) & 1) == 0)
    800002cc:	100007b7          	lui	a5,0x10000
    800002d0:	0795                	addi	a5,a5,5
    800002d2:	0007c783          	lbu	a5,0(a5) # 10000000 <_heap_size+0x8087000>
    800002d6:	2781                	sext.w	a5,a5
    800002d8:	8b85                	andi	a5,a5,1
    800002da:	2781                	sext.w	a5,a5
    800002dc:	e781                	bnez	a5,800002e4 <uart_read+0x2c>
        { return i; }
    800002de:	fe843783          	ld	a5,-24(s0)
    800002e2:	a80d                	j	80000314 <uart_read+0x5c>
        else
        {
            data[i] = *UART_BASE_ADDRESS;
    800002e4:	10000737          	lui	a4,0x10000
    800002e8:	fd843683          	ld	a3,-40(s0)
    800002ec:	fe843783          	ld	a5,-24(s0)
    800002f0:	97b6                	add	a5,a5,a3
    800002f2:	00074703          	lbu	a4,0(a4) # 10000000 <_heap_size+0x8087000>
    800002f6:	00e78023          	sb	a4,0(a5)
    for(u64 i = 0; i < len; i++)
    800002fa:	fe843783          	ld	a5,-24(s0)
    800002fe:	0785                	addi	a5,a5,1
    80000300:	fef43423          	sd	a5,-24(s0)
    80000304:	fe843703          	ld	a4,-24(s0)
    80000308:	fd043783          	ld	a5,-48(s0)
    8000030c:	fcf760e3          	bltu	a4,a5,800002cc <uart_read+0x14>
        }
    }
    return len;
    80000310:	fd043783          	ld	a5,-48(s0)
}
    80000314:	853e                	mv	a0,a5
    80000316:	7422                	ld	s0,40(sp)
    80000318:	6145                	addi	sp,sp,48
    8000031a:	8082                	ret

000000008000031c <_putchar>:
#include "types.h"

#include "uart.h"
#include "printf.h"
void _putchar(char c)
{
    8000031c:	1101                	addi	sp,sp,-32
    8000031e:	ec06                	sd	ra,24(sp)
    80000320:	e822                	sd	s0,16(sp)
    80000322:	1000                	addi	s0,sp,32
    80000324:	87aa                	mv	a5,a0
    80000326:	fef407a3          	sb	a5,-17(s0)
    uart_write(&c, 1);
    8000032a:	fef40793          	addi	a5,s0,-17
    8000032e:	4585                	li	a1,1
    80000330:	853e                	mv	a0,a5
    80000332:	f3dff0ef          	jal	ra,8000026e <uart_write>
}
    80000336:	0001                	nop
    80000338:	60e2                	ld	ra,24(sp)
    8000033a:	6442                	ld	s0,16(sp)
    8000033c:	6105                	addi	sp,sp,32
    8000033e:	8082                	ret

0000000080000340 <mem_table_set_taken>:

#define PAGE_SIZE 4096
#define ALLOCATION_SPLIT_COUNT 3

void mem_table_set_taken(u64 start, u64 count, u8 taken)
{
    80000340:	7135                	addi	sp,sp,-160
    80000342:	ed22                	sd	s0,152(sp)
    80000344:	1100                	addi	s0,sp,160
    80000346:	f6a43c23          	sd	a0,-136(s0)
    8000034a:	f6b43823          	sd	a1,-144(s0)
    8000034e:	87b2                	mv	a5,a2
    80000350:	f6f407a3          	sb	a5,-145(s0)
    if(count == 0) { return; }
    80000354:	f7043783          	ld	a5,-144(s0)
    80000358:	38078163          	beqz	a5,800006da <mem_table_set_taken+0x39a>
    count -= 1;
    8000035c:	f7043783          	ld	a5,-144(s0)
    80000360:	17fd                	addi	a5,a5,-1
    80000362:	f6f43823          	sd	a5,-144(s0)
    for(s64 k = K_TABLE_COUNT - 1; k >= 0; k--)
    80000366:	00004797          	auipc	a5,0x4
    8000036a:	c9a78793          	addi	a5,a5,-870 # 80004000 <HEAP_START>
    8000036e:	639c                	ld	a5,0(a5)
    80000370:	07c1                	addi	a5,a5,16
    80000372:	639c                	ld	a5,0(a5)
    80000374:	17fd                	addi	a5,a5,-1
    80000376:	fef43423          	sd	a5,-24(s0)
    8000037a:	ae99                	j	800006d0 <mem_table_set_taken+0x390>
    {
        struct KmemTable* last_table = K_MEMTABLES[k+1]; // Be careful with this one
    8000037c:	fe843783          	ld	a5,-24(s0)
    80000380:	00379713          	slli	a4,a5,0x3
    80000384:	00004797          	auipc	a5,0x4
    80000388:	c7c78793          	addi	a5,a5,-900 # 80004000 <HEAP_START>
    8000038c:	639c                	ld	a5,0(a5)
    8000038e:	97ba                	add	a5,a5,a4
    80000390:	02078793          	addi	a5,a5,32
    80000394:	639c                	ld	a5,0(a5)
    80000396:	fcf43423          	sd	a5,-56(s0)
        struct KmemTable* table = K_MEMTABLES[k];
    8000039a:	fe843783          	ld	a5,-24(s0)
    8000039e:	00379713          	slli	a4,a5,0x3
    800003a2:	00004797          	auipc	a5,0x4
    800003a6:	c5e78793          	addi	a5,a5,-930 # 80004000 <HEAP_START>
    800003aa:	639c                	ld	a5,0(a5)
    800003ac:	97ba                	add	a5,a5,a4
    800003ae:	07e1                	addi	a5,a5,24
    800003b0:	639c                	ld	a5,0(a5)
    800003b2:	fcf43023          	sd	a5,-64(s0)
        u64 start_byte = start >> 3;
    800003b6:	f7843783          	ld	a5,-136(s0)
    800003ba:	838d                	srli	a5,a5,0x3
    800003bc:	faf43c23          	sd	a5,-72(s0)
        u64 end_byte = (start+count) >> 3;
    800003c0:	f7843703          	ld	a4,-136(s0)
    800003c4:	f7043783          	ld	a5,-144(s0)
    800003c8:	97ba                	add	a5,a5,a4
    800003ca:	838d                	srli	a5,a5,0x3
    800003cc:	faf43823          	sd	a5,-80(s0)
    
        u64 start_bit = start & 0b111;
    800003d0:	f7843783          	ld	a5,-136(s0)
    800003d4:	8b9d                	andi	a5,a5,7
    800003d6:	faf43423          	sd	a5,-88(s0)
        u64 end_bit = (start+count) & 0b111;
    800003da:	f7843703          	ld	a4,-136(s0)
    800003de:	f7043783          	ld	a5,-144(s0)
    800003e2:	97ba                	add	a5,a5,a4
    800003e4:	8b9d                	andi	a5,a5,7
    800003e6:	faf43023          	sd	a5,-96(s0)

        u64 i = start_byte;
    800003ea:	fb843783          	ld	a5,-72(s0)
    800003ee:	fef43023          	sd	a5,-32(s0)
        u64 j = start_bit;
    800003f2:	fa843783          	ld	a5,-88(s0)
    800003f6:	fcf43c23          	sd	a5,-40(s0)
        while(i <= end_byte)
    800003fa:	a479                	j	80000688 <mem_table_set_taken+0x348>
        {
            u64 e_b = 7;
    800003fc:	479d                	li	a5,7
    800003fe:	fcf43823          	sd	a5,-48(s0)
            if(i == end_byte) { e_b = end_bit; }
    80000402:	fe043703          	ld	a4,-32(s0)
    80000406:	fb043783          	ld	a5,-80(s0)
    8000040a:	26f71263          	bne	a4,a5,8000066e <mem_table_set_taken+0x32e>
    8000040e:	fa043783          	ld	a5,-96(s0)
    80000412:	fcf43823          	sd	a5,-48(s0)
            while(j <= e_b)
    80000416:	aca1                	j	8000066e <mem_table_set_taken+0x32e>
            {
                if(k == K_TABLE_COUNT - 1)
    80000418:	00004797          	auipc	a5,0x4
    8000041c:	be878793          	addi	a5,a5,-1048 # 80004000 <HEAP_START>
    80000420:	639c                	ld	a5,0(a5)
    80000422:	07c1                	addi	a5,a5,16
    80000424:	639c                	ld	a5,0(a5)
    80000426:	fff78713          	addi	a4,a5,-1
    8000042a:	fe843783          	ld	a5,-24(s0)
    8000042e:	0af71763          	bne	a4,a5,800004dc <mem_table_set_taken+0x19c>
                {
                    if(taken)
    80000432:	f6f44783          	lbu	a5,-145(s0)
    80000436:	0ff7f793          	andi	a5,a5,255
    8000043a:	c7b1                	beqz	a5,80000486 <mem_table_set_taken+0x146>
                    {
                        table->data[i] |= 1 << j;
    8000043c:	fc043703          	ld	a4,-64(s0)
    80000440:	fe043783          	ld	a5,-32(s0)
    80000444:	97ba                	add	a5,a5,a4
    80000446:	0087c783          	lbu	a5,8(a5)
    8000044a:	0187971b          	slliw	a4,a5,0x18
    8000044e:	4187571b          	sraiw	a4,a4,0x18
    80000452:	fd843783          	ld	a5,-40(s0)
    80000456:	2781                	sext.w	a5,a5
    80000458:	4685                	li	a3,1
    8000045a:	00f697bb          	sllw	a5,a3,a5
    8000045e:	2781                	sext.w	a5,a5
    80000460:	0187979b          	slliw	a5,a5,0x18
    80000464:	4187d79b          	sraiw	a5,a5,0x18
    80000468:	8fd9                	or	a5,a5,a4
    8000046a:	0187979b          	slliw	a5,a5,0x18
    8000046e:	4187d79b          	sraiw	a5,a5,0x18
    80000472:	0ff7f713          	andi	a4,a5,255
    80000476:	fc043683          	ld	a3,-64(s0)
    8000047a:	fe043783          	ld	a5,-32(s0)
    8000047e:	97b6                	add	a5,a5,a3
    80000480:	00e78423          	sb	a4,8(a5)
    80000484:	a2c5                	j	80000664 <mem_table_set_taken+0x324>
                    }
                    else
                    {
                        table->data[i] &= ~(1 << j);
    80000486:	fc043703          	ld	a4,-64(s0)
    8000048a:	fe043783          	ld	a5,-32(s0)
    8000048e:	97ba                	add	a5,a5,a4
    80000490:	0087c783          	lbu	a5,8(a5)
    80000494:	0187971b          	slliw	a4,a5,0x18
    80000498:	4187571b          	sraiw	a4,a4,0x18
    8000049c:	fd843783          	ld	a5,-40(s0)
    800004a0:	2781                	sext.w	a5,a5
    800004a2:	4685                	li	a3,1
    800004a4:	00f697bb          	sllw	a5,a3,a5
    800004a8:	2781                	sext.w	a5,a5
    800004aa:	0187979b          	slliw	a5,a5,0x18
    800004ae:	4187d79b          	sraiw	a5,a5,0x18
    800004b2:	fff7c793          	not	a5,a5
    800004b6:	0187979b          	slliw	a5,a5,0x18
    800004ba:	4187d79b          	sraiw	a5,a5,0x18
    800004be:	8ff9                	and	a5,a5,a4
    800004c0:	0187979b          	slliw	a5,a5,0x18
    800004c4:	4187d79b          	sraiw	a5,a5,0x18
    800004c8:	0ff7f713          	andi	a4,a5,255
    800004cc:	fc043683          	ld	a3,-64(s0)
    800004d0:	fe043783          	ld	a5,-32(s0)
    800004d4:	97b6                	add	a5,a5,a3
    800004d6:	00e78423          	sb	a4,8(a5)
    800004da:	a269                	j	80000664 <mem_table_set_taken+0x324>
                    }
                }
                else
                {
                    table->data[i] &= ~(1 << j);
    800004dc:	fc043703          	ld	a4,-64(s0)
    800004e0:	fe043783          	ld	a5,-32(s0)
    800004e4:	97ba                	add	a5,a5,a4
    800004e6:	0087c783          	lbu	a5,8(a5)
    800004ea:	0187971b          	slliw	a4,a5,0x18
    800004ee:	4187571b          	sraiw	a4,a4,0x18
    800004f2:	fd843783          	ld	a5,-40(s0)
    800004f6:	2781                	sext.w	a5,a5
    800004f8:	4685                	li	a3,1
    800004fa:	00f697bb          	sllw	a5,a3,a5
    800004fe:	2781                	sext.w	a5,a5
    80000500:	0187979b          	slliw	a5,a5,0x18
    80000504:	4187d79b          	sraiw	a5,a5,0x18
    80000508:	fff7c793          	not	a5,a5
    8000050c:	0187979b          	slliw	a5,a5,0x18
    80000510:	4187d79b          	sraiw	a5,a5,0x18
    80000514:	8ff9                	and	a5,a5,a4
    80000516:	0187979b          	slliw	a5,a5,0x18
    8000051a:	4187d79b          	sraiw	a5,a5,0x18
    8000051e:	0ff7f713          	andi	a4,a5,255
    80000522:	fc043683          	ld	a3,-64(s0)
    80000526:	fe043783          	ld	a5,-32(s0)
    8000052a:	97b6                	add	a5,a5,a3
    8000052c:	00e78423          	sb	a4,8(a5)

                    u64 current = (i << 3) | j;
    80000530:	fe043783          	ld	a5,-32(s0)
    80000534:	078e                	slli	a5,a5,0x3
    80000536:	fd843703          	ld	a4,-40(s0)
    8000053a:	8fd9                	or	a5,a5,a4
    8000053c:	f8f43823          	sd	a5,-112(s0)
                    current = current << 1;
    80000540:	f9043783          	ld	a5,-112(s0)
    80000544:	0786                	slli	a5,a5,0x1
    80000546:	f8f43823          	sd	a5,-112(s0)

                    u64 yte = current >> 3;
    8000054a:	f9043783          	ld	a5,-112(s0)
    8000054e:	838d                	srli	a5,a5,0x3
    80000550:	f8f43423          	sd	a5,-120(s0)
                    u64 it = current & 0b111;
    80000554:	f9043783          	ld	a5,-112(s0)
    80000558:	8b9d                	andi	a5,a5,7
    8000055a:	f8f43023          	sd	a5,-128(s0)
                    table->data[i] |= ((last_table->data[yte] & (1 << it)) != 0) << j;
    8000055e:	fc043703          	ld	a4,-64(s0)
    80000562:	fe043783          	ld	a5,-32(s0)
    80000566:	97ba                	add	a5,a5,a4
    80000568:	0087c783          	lbu	a5,8(a5)
    8000056c:	0187971b          	slliw	a4,a5,0x18
    80000570:	4187571b          	sraiw	a4,a4,0x18
    80000574:	fc843683          	ld	a3,-56(s0)
    80000578:	f8843783          	ld	a5,-120(s0)
    8000057c:	97b6                	add	a5,a5,a3
    8000057e:	0087c783          	lbu	a5,8(a5)
    80000582:	0007869b          	sext.w	a3,a5
    80000586:	f8043783          	ld	a5,-128(s0)
    8000058a:	2781                	sext.w	a5,a5
    8000058c:	40f6d7bb          	sraw	a5,a3,a5
    80000590:	2781                	sext.w	a5,a5
    80000592:	8b85                	andi	a5,a5,1
    80000594:	2781                	sext.w	a5,a5
    80000596:	00f037b3          	snez	a5,a5
    8000059a:	0ff7f793          	andi	a5,a5,255
    8000059e:	0007869b          	sext.w	a3,a5
    800005a2:	fd843783          	ld	a5,-40(s0)
    800005a6:	2781                	sext.w	a5,a5
    800005a8:	00f697bb          	sllw	a5,a3,a5
    800005ac:	2781                	sext.w	a5,a5
    800005ae:	0187979b          	slliw	a5,a5,0x18
    800005b2:	4187d79b          	sraiw	a5,a5,0x18
    800005b6:	8fd9                	or	a5,a5,a4
    800005b8:	0187979b          	slliw	a5,a5,0x18
    800005bc:	4187d79b          	sraiw	a5,a5,0x18
    800005c0:	0ff7f713          	andi	a4,a5,255
    800005c4:	fc043683          	ld	a3,-64(s0)
    800005c8:	fe043783          	ld	a5,-32(s0)
    800005cc:	97b6                	add	a5,a5,a3
    800005ce:	00e78423          	sb	a4,8(a5)

                    current++;
    800005d2:	f9043783          	ld	a5,-112(s0)
    800005d6:	0785                	addi	a5,a5,1
    800005d8:	f8f43823          	sd	a5,-112(s0)
                    yte = current >> 3;
    800005dc:	f9043783          	ld	a5,-112(s0)
    800005e0:	838d                	srli	a5,a5,0x3
    800005e2:	f8f43423          	sd	a5,-120(s0)
                    it = current & 0b111;
    800005e6:	f9043783          	ld	a5,-112(s0)
    800005ea:	8b9d                	andi	a5,a5,7
    800005ec:	f8f43023          	sd	a5,-128(s0)
                    table->data[i] |= ((last_table->data[yte] & (1 << it)) != 0) << j;
    800005f0:	fc043703          	ld	a4,-64(s0)
    800005f4:	fe043783          	ld	a5,-32(s0)
    800005f8:	97ba                	add	a5,a5,a4
    800005fa:	0087c783          	lbu	a5,8(a5)
    800005fe:	0187971b          	slliw	a4,a5,0x18
    80000602:	4187571b          	sraiw	a4,a4,0x18
    80000606:	fc843683          	ld	a3,-56(s0)
    8000060a:	f8843783          	ld	a5,-120(s0)
    8000060e:	97b6                	add	a5,a5,a3
    80000610:	0087c783          	lbu	a5,8(a5)
    80000614:	0007869b          	sext.w	a3,a5
    80000618:	f8043783          	ld	a5,-128(s0)
    8000061c:	2781                	sext.w	a5,a5
    8000061e:	40f6d7bb          	sraw	a5,a3,a5
    80000622:	2781                	sext.w	a5,a5
    80000624:	8b85                	andi	a5,a5,1
    80000626:	2781                	sext.w	a5,a5
    80000628:	00f037b3          	snez	a5,a5
    8000062c:	0ff7f793          	andi	a5,a5,255
    80000630:	0007869b          	sext.w	a3,a5
    80000634:	fd843783          	ld	a5,-40(s0)
    80000638:	2781                	sext.w	a5,a5
    8000063a:	00f697bb          	sllw	a5,a3,a5
    8000063e:	2781                	sext.w	a5,a5
    80000640:	0187979b          	slliw	a5,a5,0x18
    80000644:	4187d79b          	sraiw	a5,a5,0x18
    80000648:	8fd9                	or	a5,a5,a4
    8000064a:	0187979b          	slliw	a5,a5,0x18
    8000064e:	4187d79b          	sraiw	a5,a5,0x18
    80000652:	0ff7f713          	andi	a4,a5,255
    80000656:	fc043683          	ld	a3,-64(s0)
    8000065a:	fe043783          	ld	a5,-32(s0)
    8000065e:	97b6                	add	a5,a5,a3
    80000660:	00e78423          	sb	a4,8(a5)
                }
                j++;
    80000664:	fd843783          	ld	a5,-40(s0)
    80000668:	0785                	addi	a5,a5,1
    8000066a:	fcf43c23          	sd	a5,-40(s0)
            while(j <= e_b)
    8000066e:	fd843703          	ld	a4,-40(s0)
    80000672:	fd043783          	ld	a5,-48(s0)
    80000676:	dae7f1e3          	bgeu	a5,a4,80000418 <mem_table_set_taken+0xd8>
            }
            j = 0;
    8000067a:	fc043c23          	sd	zero,-40(s0)
            i++;
    8000067e:	fe043783          	ld	a5,-32(s0)
    80000682:	0785                	addi	a5,a5,1
    80000684:	fef43023          	sd	a5,-32(s0)
        while(i <= end_byte)
    80000688:	fe043703          	ld	a4,-32(s0)
    8000068c:	fb043783          	ld	a5,-80(s0)
    80000690:	d6e7f6e3          	bgeu	a5,a4,800003fc <mem_table_set_taken+0xbc>
        }
        {
            u64 e = start + count;
    80000694:	f7843703          	ld	a4,-136(s0)
    80000698:	f7043783          	ld	a5,-144(s0)
    8000069c:	97ba                	add	a5,a5,a4
    8000069e:	f8f43c23          	sd	a5,-104(s0)
            start = start >> 1;
    800006a2:	f7843783          	ld	a5,-136(s0)
    800006a6:	8385                	srli	a5,a5,0x1
    800006a8:	f6f43c23          	sd	a5,-136(s0)
            e = e >> 1;
    800006ac:	f9843783          	ld	a5,-104(s0)
    800006b0:	8385                	srli	a5,a5,0x1
    800006b2:	f8f43c23          	sd	a5,-104(s0)
            count = e - start;
    800006b6:	f9843703          	ld	a4,-104(s0)
    800006ba:	f7843783          	ld	a5,-136(s0)
    800006be:	40f707b3          	sub	a5,a4,a5
    800006c2:	f6f43823          	sd	a5,-144(s0)
    for(s64 k = K_TABLE_COUNT - 1; k >= 0; k--)
    800006c6:	fe843783          	ld	a5,-24(s0)
    800006ca:	17fd                	addi	a5,a5,-1
    800006cc:	fef43423          	sd	a5,-24(s0)
    800006d0:	fe843783          	ld	a5,-24(s0)
    800006d4:	ca07d4e3          	bgez	a5,8000037c <mem_table_set_taken+0x3c>
    800006d8:	a011                	j	800006dc <mem_table_set_taken+0x39c>
    if(count == 0) { return; }
    800006da:	0001                	nop
        }
    }
}
    800006dc:	646a                	ld	s0,152(sp)
    800006de:	610d                	addi	sp,sp,160
    800006e0:	8082                	ret

00000000800006e2 <kalloc_pages>:
    void* memory;
    u64 page_count; // DO NOT TOUCH
} Kallocation;

Kallocation kalloc_pages(u64 page_count)
{
    800006e2:	7155                	addi	sp,sp,-208
    800006e4:	e586                	sd	ra,200(sp)
    800006e6:	e1a2                	sd	s0,192(sp)
    800006e8:	fd4a                	sd	s2,184(sp)
    800006ea:	f94e                	sd	s3,176(sp)
    800006ec:	0980                	addi	s0,sp,208
    800006ee:	f2a43c23          	sd	a0,-200(s0)
    if(page_count == 0) { Kallocation al = {0}; return al; }
    800006f2:	f3843783          	ld	a5,-200(s0)
    800006f6:	ef91                	bnez	a5,80000712 <kalloc_pages+0x30>
    800006f8:	f4043423          	sd	zero,-184(s0)
    800006fc:	f4043823          	sd	zero,-176(s0)
    80000700:	f4843783          	ld	a5,-184(s0)
    80000704:	f6f43423          	sd	a5,-152(s0)
    80000708:	f5043783          	ld	a5,-176(s0)
    8000070c:	f6f43823          	sd	a5,-144(s0)
    80000710:	ac35                	j	8000094c <kalloc_pages+0x26a>
    u64 a_size = 0;
    80000712:	fc043c23          	sd	zero,-40(s0)
    for(u64 i = 0; i < 64; i++)
    80000716:	fc043823          	sd	zero,-48(s0)
    8000071a:	a085                	j	8000077a <kalloc_pages+0x98>
    {
        u64 temp = (((u64)1) << (63 - i));
    8000071c:	fd043783          	ld	a5,-48(s0)
    80000720:	2781                	sext.w	a5,a5
    80000722:	873e                	mv	a4,a5
    80000724:	57fd                	li	a5,-1
    80000726:	17fe                	slli	a5,a5,0x3f
    80000728:	00e7d7b3          	srl	a5,a5,a4
    8000072c:	f8f43423          	sd	a5,-120(s0)
        if((page_count & temp) != 0)
    80000730:	f3843703          	ld	a4,-200(s0)
    80000734:	f8843783          	ld	a5,-120(s0)
    80000738:	8ff9                	and	a5,a5,a4
    8000073a:	cb9d                	beqz	a5,80000770 <kalloc_pages+0x8e>
        {
            if(temp < page_count) { i--; } // go up to the next power of 2
    8000073c:	f8843703          	ld	a4,-120(s0)
    80000740:	f3843783          	ld	a5,-200(s0)
    80000744:	00f77763          	bgeu	a4,a5,80000752 <kalloc_pages+0x70>
    80000748:	fd043783          	ld	a5,-48(s0)
    8000074c:	17fd                	addi	a5,a5,-1
    8000074e:	fcf43823          	sd	a5,-48(s0)
            a_size = K_TABLE_COUNT -1 - (63 - i);
    80000752:	00004797          	auipc	a5,0x4
    80000756:	8ae78793          	addi	a5,a5,-1874 # 80004000 <HEAP_START>
    8000075a:	639c                	ld	a5,0(a5)
    8000075c:	07c1                	addi	a5,a5,16
    8000075e:	6398                	ld	a4,0(a5)
    80000760:	fd043783          	ld	a5,-48(s0)
    80000764:	97ba                	add	a5,a5,a4
    80000766:	fc078793          	addi	a5,a5,-64
    8000076a:	fcf43c23          	sd	a5,-40(s0)
            break;
    8000076e:	a821                	j	80000786 <kalloc_pages+0xa4>
    for(u64 i = 0; i < 64; i++)
    80000770:	fd043783          	ld	a5,-48(s0)
    80000774:	0785                	addi	a5,a5,1
    80000776:	fcf43823          	sd	a5,-48(s0)
    8000077a:	fd043703          	ld	a4,-48(s0)
    8000077e:	03f00793          	li	a5,63
    80000782:	f8e7fde3          	bgeu	a5,a4,8000071c <kalloc_pages+0x3a>
        }
    }

    u64 allocation_splits = 0;
    80000786:	fc043423          	sd	zero,-56(s0)
    for(u64 i = 0; i < ALLOCATION_SPLIT_COUNT; i++)
    8000078a:	fc043023          	sd	zero,-64(s0)
    8000078e:	a82d                	j	800007c8 <kalloc_pages+0xe6>
    {
        if((K_TABLE_COUNT - a_size) > 1) { a_size += 1; allocation_splits++; }
    80000790:	00004797          	auipc	a5,0x4
    80000794:	87078793          	addi	a5,a5,-1936 # 80004000 <HEAP_START>
    80000798:	639c                	ld	a5,0(a5)
    8000079a:	07c1                	addi	a5,a5,16
    8000079c:	6398                	ld	a4,0(a5)
    8000079e:	fd843783          	ld	a5,-40(s0)
    800007a2:	8f1d                	sub	a4,a4,a5
    800007a4:	4785                	li	a5,1
    800007a6:	00e7fc63          	bgeu	a5,a4,800007be <kalloc_pages+0xdc>
    800007aa:	fd843783          	ld	a5,-40(s0)
    800007ae:	0785                	addi	a5,a5,1
    800007b0:	fcf43c23          	sd	a5,-40(s0)
    800007b4:	fc843783          	ld	a5,-56(s0)
    800007b8:	0785                	addi	a5,a5,1
    800007ba:	fcf43423          	sd	a5,-56(s0)
    for(u64 i = 0; i < ALLOCATION_SPLIT_COUNT; i++)
    800007be:	fc043783          	ld	a5,-64(s0)
    800007c2:	0785                	addi	a5,a5,1
    800007c4:	fcf43023          	sd	a5,-64(s0)
    800007c8:	fc043703          	ld	a4,-64(s0)
    800007cc:	4789                	li	a5,2
    800007ce:	fce7f1e3          	bgeu	a5,a4,80000790 <kalloc_pages+0xae>
    }
    struct KmemTable* table = K_MEMTABLES[a_size];
    800007d2:	fd843783          	ld	a5,-40(s0)
    800007d6:	00379713          	slli	a4,a5,0x3
    800007da:	00004797          	auipc	a5,0x4
    800007de:	82678793          	addi	a5,a5,-2010 # 80004000 <HEAP_START>
    800007e2:	639c                	ld	a5,0(a5)
    800007e4:	97ba                	add	a5,a5,a4
    800007e6:	07e1                	addi	a5,a5,24
    800007e8:	639c                	ld	a5,0(a5)
    800007ea:	f8f43023          	sd	a5,-128(s0)
    u64 local_size_shift = K_TABLE_COUNT -1 - a_size;
    800007ee:	00004797          	auipc	a5,0x4
    800007f2:	81278793          	addi	a5,a5,-2030 # 80004000 <HEAP_START>
    800007f6:	639c                	ld	a5,0(a5)
    800007f8:	07c1                	addi	a5,a5,16
    800007fa:	6398                	ld	a4,0(a5)
    800007fc:	fd843783          	ld	a5,-40(s0)
    80000800:	40f707b3          	sub	a5,a4,a5
    80000804:	17fd                	addi	a5,a5,-1
    80000806:	f6f43c23          	sd	a5,-136(s0)

    u64 page_address = 0;
    8000080a:	fa043c23          	sd	zero,-72(s0)

    u64 last_count = 0;
    8000080e:	fa043823          	sd	zero,-80(s0)
    u64 last_i = 0; u8 last_j = 0;
    80000812:	fa043423          	sd	zero,-88(s0)
    80000816:	fa0403a3          	sb	zero,-89(s0)
    for(u64 i = 0; i < table->table_len; i++)
    8000081a:	f8043c23          	sd	zero,-104(s0)
    8000081e:	a0cd                	j	80000900 <kalloc_pages+0x21e>
    {
        if(page_address != 0) { break; }
    80000820:	fb843783          	ld	a5,-72(s0)
    80000824:	e7f5                	bnez	a5,80000910 <kalloc_pages+0x22e>
        for(u8 j = 0; j < 8; j++)
    80000826:	f8040ba3          	sb	zero,-105(s0)
    8000082a:	a86d                	j	800008e4 <kalloc_pages+0x202>
        {
            if(page_address != 0) { break; }
    8000082c:	fb843783          	ld	a5,-72(s0)
    80000830:	e3f1                	bnez	a5,800008f4 <kalloc_pages+0x212>
            if(allocation_splits == 0)
    80000832:	fc843783          	ld	a5,-56(s0)
    80000836:	eb89                	bnez	a5,80000848 <kalloc_pages+0x166>
            {
                last_i = i; last_j = j;
    80000838:	f9843783          	ld	a5,-104(s0)
    8000083c:	faf43423          	sd	a5,-88(s0)
    80000840:	f9744783          	lbu	a5,-105(s0)
    80000844:	faf403a3          	sb	a5,-89(s0)
            }

            if((table->data[i] & (1 << j)) == 0) // Page free
    80000848:	f8043703          	ld	a4,-128(s0)
    8000084c:	f9843783          	ld	a5,-104(s0)
    80000850:	97ba                	add	a5,a5,a4
    80000852:	0087c783          	lbu	a5,8(a5)
    80000856:	0007871b          	sext.w	a4,a5
    8000085a:	f9744783          	lbu	a5,-105(s0)
    8000085e:	2781                	sext.w	a5,a5
    80000860:	40f757bb          	sraw	a5,a4,a5
    80000864:	2781                	sext.w	a5,a5
    80000866:	8b85                	andi	a5,a5,1
    80000868:	2781                	sext.w	a5,a5
    8000086a:	e7b5                	bnez	a5,800008d6 <kalloc_pages+0x1f4>
            {
                if(((last_count + 1) << local_size_shift) >= page_count) // last is also free
    8000086c:	fb043783          	ld	a5,-80(s0)
    80000870:	0785                	addi	a5,a5,1
    80000872:	f7843703          	ld	a4,-136(s0)
    80000876:	2701                	sext.w	a4,a4
    80000878:	00e797b3          	sll	a5,a5,a4
    8000087c:	f3843703          	ld	a4,-200(s0)
    80000880:	02e7e863          	bltu	a5,a4,800008b0 <kalloc_pages+0x1ce>
                {
                    page_address = (last_i * 8 + last_j) << local_size_shift;
    80000884:	fa843783          	ld	a5,-88(s0)
    80000888:	00379713          	slli	a4,a5,0x3
    8000088c:	fa744783          	lbu	a5,-89(s0)
    80000890:	97ba                	add	a5,a5,a4
    80000892:	f7843703          	ld	a4,-136(s0)
    80000896:	2701                	sext.w	a4,a4
    80000898:	00e797b3          	sll	a5,a5,a4
    8000089c:	faf43c23          	sd	a5,-72(s0)
                    mem_table_set_taken(page_address, page_count, 1);
    800008a0:	4605                	li	a2,1
    800008a2:	f3843583          	ld	a1,-200(s0)
    800008a6:	fb843503          	ld	a0,-72(s0)
    800008aa:	a97ff0ef          	jal	ra,80000340 <mem_table_set_taken>
    800008ae:	a035                	j	800008da <kalloc_pages+0x1f8>
                }
                else
                {
                    last_count++;
    800008b0:	fb043783          	ld	a5,-80(s0)
    800008b4:	0785                	addi	a5,a5,1
    800008b6:	faf43823          	sd	a5,-80(s0)
                    if(last_count == 1)
    800008ba:	fb043703          	ld	a4,-80(s0)
    800008be:	4785                	li	a5,1
    800008c0:	00f71d63          	bne	a4,a5,800008da <kalloc_pages+0x1f8>
                    { last_i = i; last_j = j; }
    800008c4:	f9843783          	ld	a5,-104(s0)
    800008c8:	faf43423          	sd	a5,-88(s0)
    800008cc:	f9744783          	lbu	a5,-105(s0)
    800008d0:	faf403a3          	sb	a5,-89(s0)
    800008d4:	a019                	j	800008da <kalloc_pages+0x1f8>
                }
            }
            else // Page is not free
            {
                last_count = 0;
    800008d6:	fa043823          	sd	zero,-80(s0)
        for(u8 j = 0; j < 8; j++)
    800008da:	f9744783          	lbu	a5,-105(s0)
    800008de:	2785                	addiw	a5,a5,1
    800008e0:	f8f40ba3          	sb	a5,-105(s0)
    800008e4:	f9744783          	lbu	a5,-105(s0)
    800008e8:	0ff7f713          	andi	a4,a5,255
    800008ec:	479d                	li	a5,7
    800008ee:	f2e7ffe3          	bgeu	a5,a4,8000082c <kalloc_pages+0x14a>
    800008f2:	a011                	j	800008f6 <kalloc_pages+0x214>
            if(page_address != 0) { break; }
    800008f4:	0001                	nop
    for(u64 i = 0; i < table->table_len; i++)
    800008f6:	f9843783          	ld	a5,-104(s0)
    800008fa:	0785                	addi	a5,a5,1
    800008fc:	f8f43c23          	sd	a5,-104(s0)
    80000900:	f8043783          	ld	a5,-128(s0)
    80000904:	639c                	ld	a5,0(a5)
    80000906:	f9843703          	ld	a4,-104(s0)
    8000090a:	f0f76be3          	bltu	a4,a5,80000820 <kalloc_pages+0x13e>
    8000090e:	a011                	j	80000912 <kalloc_pages+0x230>
        if(page_address != 0) { break; }
    80000910:	0001                	nop
            }
        }
    }
    Kallocation al = {0};
    80000912:	f4043c23          	sd	zero,-168(s0)
    80000916:	f6043023          	sd	zero,-160(s0)
    // HEAP_START isn't always 4096 aligned so the first page will be smaller in some cases.
    al.memory = (void*)((HEAP_START - (HEAP_START % PAGE_SIZE)) + (page_address * PAGE_SIZE));
    8000091a:	00003797          	auipc	a5,0x3
    8000091e:	6e678793          	addi	a5,a5,1766 # 80004000 <HEAP_START>
    80000922:	6398                	ld	a4,0(a5)
    80000924:	77fd                	lui	a5,0xfffff
    80000926:	8f7d                	and	a4,a4,a5
    80000928:	fb843783          	ld	a5,-72(s0)
    8000092c:	07b2                	slli	a5,a5,0xc
    8000092e:	97ba                	add	a5,a5,a4
    80000930:	f4f43c23          	sd	a5,-168(s0)
    al.page_count = page_count;
    80000934:	f3843783          	ld	a5,-200(s0)
    80000938:	f6f43023          	sd	a5,-160(s0)
    return al;
    8000093c:	f5843783          	ld	a5,-168(s0)
    80000940:	f6f43423          	sd	a5,-152(s0)
    80000944:	f6043783          	ld	a5,-160(s0)
    80000948:	f6f43823          	sd	a5,-144(s0)
}
    8000094c:	f6843703          	ld	a4,-152(s0)
    80000950:	f7043783          	ld	a5,-144(s0)
    80000954:	893a                	mv	s2,a4
    80000956:	89be                	mv	s3,a5
    80000958:	874a                	mv	a4,s2
    8000095a:	87ce                	mv	a5,s3
    8000095c:	853a                	mv	a0,a4
    8000095e:	85be                	mv	a1,a5
    80000960:	60ae                	ld	ra,200(sp)
    80000962:	640e                	ld	s0,192(sp)
    80000964:	796a                	ld	s2,184(sp)
    80000966:	79ca                	ld	s3,176(sp)
    80000968:	6169                	addi	sp,sp,208
    8000096a:	8082                	ret

000000008000096c <kfree_pages>:

void kfree_pages(Kallocation a)
{
    8000096c:	7179                	addi	sp,sp,-48
    8000096e:	f406                	sd	ra,40(sp)
    80000970:	f022                	sd	s0,32(sp)
    80000972:	1800                	addi	s0,sp,48
    80000974:	fca43823          	sd	a0,-48(s0)
    80000978:	fcb43c23          	sd	a1,-40(s0)
    u64 addr = ((u64)a.memory);
    8000097c:	fd043783          	ld	a5,-48(s0)
    80000980:	fef43423          	sd	a5,-24(s0)
    if(addr <= HEAP_START) { return; }
    80000984:	00003797          	auipc	a5,0x3
    80000988:	67c78793          	addi	a5,a5,1660 # 80004000 <HEAP_START>
    8000098c:	639c                	ld	a5,0(a5)
    8000098e:	fe843703          	ld	a4,-24(s0)
    80000992:	04e7f163          	bgeu	a5,a4,800009d4 <kfree_pages+0x68>
    addr -= HEAP_START;
    80000996:	00003797          	auipc	a5,0x3
    8000099a:	66a78793          	addi	a5,a5,1642 # 80004000 <HEAP_START>
    8000099e:	639c                	ld	a5,0(a5)
    800009a0:	fe843703          	ld	a4,-24(s0)
    800009a4:	40f707b3          	sub	a5,a4,a5
    800009a8:	fef43423          	sd	a5,-24(s0)
    if((addr % PAGE_SIZE) != 0) { return; } //TODO: some kind of error maybe
    800009ac:	fe843703          	ld	a4,-24(s0)
    800009b0:	6785                	lui	a5,0x1
    800009b2:	17fd                	addi	a5,a5,-1
    800009b4:	8ff9                	and	a5,a5,a4
    800009b6:	e38d                	bnez	a5,800009d8 <kfree_pages+0x6c>
    addr /= PAGE_SIZE;
    800009b8:	fe843783          	ld	a5,-24(s0)
    800009bc:	83b1                	srli	a5,a5,0xc
    800009be:	fef43423          	sd	a5,-24(s0)

    mem_table_set_taken(addr, a.page_count, 0);
    800009c2:	fd843783          	ld	a5,-40(s0)
    800009c6:	4601                	li	a2,0
    800009c8:	85be                	mv	a1,a5
    800009ca:	fe843503          	ld	a0,-24(s0)
    800009ce:	973ff0ef          	jal	ra,80000340 <mem_table_set_taken>
    800009d2:	a021                	j	800009da <kfree_pages+0x6e>
    if(addr <= HEAP_START) { return; }
    800009d4:	0001                	nop
    800009d6:	a011                	j	800009da <kfree_pages+0x6e>
    if((addr % PAGE_SIZE) != 0) { return; } //TODO: some kind of error maybe
    800009d8:	0001                	nop
}
    800009da:	70a2                	ld	ra,40(sp)
    800009dc:	7402                	ld	s0,32(sp)
    800009de:	6145                	addi	sp,sp,48
    800009e0:	8082                	ret

00000000800009e2 <kalloc_single_page>:

void* kalloc_single_page()
{
    800009e2:	1101                	addi	sp,sp,-32
    800009e4:	ec06                	sd	ra,24(sp)
    800009e6:	e822                	sd	s0,16(sp)
    800009e8:	1000                	addi	s0,sp,32
    Kallocation k = kalloc_pages(1);
    800009ea:	4505                	li	a0,1
    800009ec:	cf7ff0ef          	jal	ra,800006e2 <kalloc_pages>
    800009f0:	872a                	mv	a4,a0
    800009f2:	87ae                	mv	a5,a1
    800009f4:	fee43023          	sd	a4,-32(s0)
    800009f8:	fef43423          	sd	a5,-24(s0)
    return k.memory;
    800009fc:	fe043783          	ld	a5,-32(s0)
}
    80000a00:	853e                	mv	a0,a5
    80000a02:	60e2                	ld	ra,24(sp)
    80000a04:	6442                	ld	s0,16(sp)
    80000a06:	6105                	addi	sp,sp,32
    80000a08:	8082                	ret

0000000080000a0a <kfree_single_page>:
 
void kfree_single_page(void* page)
{
    80000a0a:	7179                	addi	sp,sp,-48
    80000a0c:	f406                	sd	ra,40(sp)
    80000a0e:	f022                	sd	s0,32(sp)
    80000a10:	1800                	addi	s0,sp,48
    80000a12:	fca43c23          	sd	a0,-40(s0)
    Kallocation k = {0};
    80000a16:	fe043023          	sd	zero,-32(s0)
    80000a1a:	fe043423          	sd	zero,-24(s0)
    k.memory = page;
    80000a1e:	fd843783          	ld	a5,-40(s0)
    80000a22:	fef43023          	sd	a5,-32(s0)
    k.page_count = 1;
    80000a26:	4785                	li	a5,1
    80000a28:	fef43423          	sd	a5,-24(s0)
    kfree_pages(k);
    80000a2c:	fe043503          	ld	a0,-32(s0)
    80000a30:	fe843583          	ld	a1,-24(s0)
    80000a34:	f39ff0ef          	jal	ra,8000096c <kfree_pages>
}
    80000a38:	0001                	nop
    80000a3a:	70a2                	ld	ra,40(sp)
    80000a3c:	7402                	ld	s0,32(sp)
    80000a3e:	6145                	addi	sp,sp,48
    80000a40:	8082                	ret

0000000080000a42 <mmu_is_entry_valid>:

u64 mmu_is_entry_valid(u64 entry)
{
    80000a42:	1101                	addi	sp,sp,-32
    80000a44:	ec22                	sd	s0,24(sp)
    80000a46:	1000                	addi	s0,sp,32
    80000a48:	fea43423          	sd	a0,-24(s0)
    return (entry & 1) != 0;
    80000a4c:	fe843783          	ld	a5,-24(s0)
    80000a50:	8b85                	andi	a5,a5,1
    80000a52:	00f037b3          	snez	a5,a5
    80000a56:	0ff7f793          	andi	a5,a5,255
}
    80000a5a:	853e                	mv	a0,a5
    80000a5c:	6462                	ld	s0,24(sp)
    80000a5e:	6105                	addi	sp,sp,32
    80000a60:	8082                	ret

0000000080000a62 <mmu_is_entry_leaf>:
 
u64 mmu_is_entry_leaf(u64 entry)
{
    80000a62:	1101                	addi	sp,sp,-32
    80000a64:	ec22                	sd	s0,24(sp)
    80000a66:	1000                	addi	s0,sp,32
    80000a68:	fea43423          	sd	a0,-24(s0)
    return (entry & 0xe) != 0;
    80000a6c:	fe843783          	ld	a5,-24(s0)
    80000a70:	8bb9                	andi	a5,a5,14
    80000a72:	00f037b3          	snez	a5,a5
    80000a76:	0ff7f793          	andi	a5,a5,255
}
    80000a7a:	853e                	mv	a0,a5
    80000a7c:	6462                	ld	s0,24(sp)
    80000a7e:	6105                	addi	sp,sp,32
    80000a80:	8082                	ret

0000000080000a82 <mmu_map>:
 
void mmu_map(u64* root, u64 vaddr, u64 paddr, u64 bits, s64 level)
{
    80000a82:	7135                	addi	sp,sp,-160
    80000a84:	ed06                	sd	ra,152(sp)
    80000a86:	e922                	sd	s0,144(sp)
    80000a88:	1100                	addi	s0,sp,160
    80000a8a:	f8a43423          	sd	a0,-120(s0)
    80000a8e:	f8b43023          	sd	a1,-128(s0)
    80000a92:	f6c43c23          	sd	a2,-136(s0)
    80000a96:	f6d43823          	sd	a3,-144(s0)
    80000a9a:	f6e43423          	sd	a4,-152(s0)
    assert((bits & 0xe) != 0, "bits are not null");
    80000a9e:	f7043783          	ld	a5,-144(s0)
    80000aa2:	8bb9                	andi	a5,a5,14
    80000aa4:	00f037b3          	snez	a5,a5
    80000aa8:	0ff7f793          	andi	a5,a5,255
    80000aac:	2781                	sext.w	a5,a5
    80000aae:	00003597          	auipc	a1,0x3
    80000ab2:	5b258593          	addi	a1,a1,1458 # 80004060 <KERNEL_STACK_END+0x8>
    80000ab6:	853e                	mv	a0,a5
    80000ab8:	25b000ef          	jal	ra,80001512 <assert>
 
    u64 vpn[3];
    vpn[0] = (vaddr >> 12) & 0x1ff;
    80000abc:	f8043783          	ld	a5,-128(s0)
    80000ac0:	83b1                	srli	a5,a5,0xc
    80000ac2:	1ff7f793          	andi	a5,a5,511
    80000ac6:	faf43823          	sd	a5,-80(s0)
    vpn[1] = (vaddr >> 21) & 0x1ff;
    80000aca:	f8043783          	ld	a5,-128(s0)
    80000ace:	83d5                	srli	a5,a5,0x15
    80000ad0:	1ff7f793          	andi	a5,a5,511
    80000ad4:	faf43c23          	sd	a5,-72(s0)
    vpn[2] = (vaddr >> 30) & 0x1ff;
    80000ad8:	f8043783          	ld	a5,-128(s0)
    80000adc:	83f9                	srli	a5,a5,0x1e
    80000ade:	1ff7f793          	andi	a5,a5,511
    80000ae2:	fcf43023          	sd	a5,-64(s0)
 
    u64 ppn[3];
    ppn[0] = (paddr >> 12) & 0x1ff;
    80000ae6:	f7843783          	ld	a5,-136(s0)
    80000aea:	83b1                	srli	a5,a5,0xc
    80000aec:	1ff7f793          	andi	a5,a5,511
    80000af0:	f8f43c23          	sd	a5,-104(s0)
    ppn[1] = (paddr >> 21) & 0x1ff;
    80000af4:	f7843783          	ld	a5,-136(s0)
    80000af8:	83d5                	srli	a5,a5,0x15
    80000afa:	1ff7f793          	andi	a5,a5,511
    80000afe:	faf43023          	sd	a5,-96(s0)
    ppn[2] = (paddr >> 30) & 0x3ffffff;
    80000b02:	f7843783          	ld	a5,-136(s0)
    80000b06:	01e7d713          	srli	a4,a5,0x1e
    80000b0a:	040007b7          	lui	a5,0x4000
    80000b0e:	17fd                	addi	a5,a5,-1
    80000b10:	8ff9                	and	a5,a5,a4
    80000b12:	faf43423          	sd	a5,-88(s0)
 
    u64* v = root + vpn[2];
    80000b16:	fc043783          	ld	a5,-64(s0)
    80000b1a:	078e                	slli	a5,a5,0x3
    80000b1c:	f8843703          	ld	a4,-120(s0)
    80000b20:	97ba                	add	a5,a5,a4
    80000b22:	fef43423          	sd	a5,-24(s0)
 
    for(s64 i = 1; i >= level; i--)
    80000b26:	4785                	li	a5,1
    80000b28:	fef43023          	sd	a5,-32(s0)
    80000b2c:	a095                	j	80000b90 <mmu_map+0x10e>
    {
        if(!mmu_is_entry_valid(*v))
    80000b2e:	fe843783          	ld	a5,-24(s0)
    80000b32:	639c                	ld	a5,0(a5)
    80000b34:	853e                	mv	a0,a5
    80000b36:	f0dff0ef          	jal	ra,80000a42 <mmu_is_entry_valid>
    80000b3a:	87aa                	mv	a5,a0
    80000b3c:	ef91                	bnez	a5,80000b58 <mmu_map+0xd6>
        {
            u64 page = (u64)kalloc_single_page();
    80000b3e:	ea5ff0ef          	jal	ra,800009e2 <kalloc_single_page>
    80000b42:	87aa                	mv	a5,a0
    80000b44:	fcf43823          	sd	a5,-48(s0)
            *v = (page >> 2) | 1;
    80000b48:	fd043783          	ld	a5,-48(s0)
    80000b4c:	8389                	srli	a5,a5,0x2
    80000b4e:	0017e713          	ori	a4,a5,1
    80000b52:	fe843783          	ld	a5,-24(s0)
    80000b56:	e398                	sd	a4,0(a5)
        }
        u64* entry = (u64*)((*v & (~0x3ff)) << 2);
    80000b58:	fe843783          	ld	a5,-24(s0)
    80000b5c:	639c                	ld	a5,0(a5)
    80000b5e:	00279713          	slli	a4,a5,0x2
    80000b62:	77fd                	lui	a5,0xfffff
    80000b64:	8ff9                	and	a5,a5,a4
    80000b66:	fcf43423          	sd	a5,-56(s0)
        v = entry + vpn[i];
    80000b6a:	fe043783          	ld	a5,-32(s0)
    80000b6e:	078e                	slli	a5,a5,0x3
    80000b70:	ff040713          	addi	a4,s0,-16
    80000b74:	97ba                	add	a5,a5,a4
    80000b76:	fc07b783          	ld	a5,-64(a5) # ffffffffffffefc0 <_memory_end+0xffffffff77ffefc0>
    80000b7a:	078e                	slli	a5,a5,0x3
    80000b7c:	fc843703          	ld	a4,-56(s0)
    80000b80:	97ba                	add	a5,a5,a4
    80000b82:	fef43423          	sd	a5,-24(s0)
    for(s64 i = 1; i >= level; i--)
    80000b86:	fe043783          	ld	a5,-32(s0)
    80000b8a:	17fd                	addi	a5,a5,-1
    80000b8c:	fef43023          	sd	a5,-32(s0)
    80000b90:	fe043703          	ld	a4,-32(s0)
    80000b94:	f6843783          	ld	a5,-152(s0)
    80000b98:	f8f75be3          	bge	a4,a5,80000b2e <mmu_map+0xac>
    }
 
    u64 entry = (ppn[2] << 28) |
    80000b9c:	fa843783          	ld	a5,-88(s0)
    80000ba0:	01c79713          	slli	a4,a5,0x1c
                (ppn[1] << 19) |
    80000ba4:	fa043783          	ld	a5,-96(s0)
    80000ba8:	07ce                	slli	a5,a5,0x13
    u64 entry = (ppn[2] << 28) |
    80000baa:	8f5d                	or	a4,a4,a5
                (ppn[0] << 10) |
    80000bac:	f9843783          	ld	a5,-104(s0)
    80000bb0:	07aa                	slli	a5,a5,0xa
                (ppn[1] << 19) |
    80000bb2:	8f5d                	or	a4,a4,a5
                (ppn[0] << 10) |
    80000bb4:	f7043783          	ld	a5,-144(s0)
    80000bb8:	8fd9                	or	a5,a5,a4
    u64 entry = (ppn[2] << 28) |
    80000bba:	0017e793          	ori	a5,a5,1
    80000bbe:	fcf43c23          	sd	a5,-40(s0)
                bits |
                1;
    *v = entry;
    80000bc2:	fe843783          	ld	a5,-24(s0)
    80000bc6:	fd843703          	ld	a4,-40(s0)
    80000bca:	e398                	sd	a4,0(a5)
}
    80000bcc:	0001                	nop
    80000bce:	60ea                	ld	ra,152(sp)
    80000bd0:	644a                	ld	s0,144(sp)
    80000bd2:	610d                	addi	sp,sp,160
    80000bd4:	8082                	ret

0000000080000bd6 <mmu_kernel_map_range>:

void mmu_kernel_map_range(u64* root, void* start, void* end, u64 bits)
{
    80000bd6:	715d                	addi	sp,sp,-80
    80000bd8:	e486                	sd	ra,72(sp)
    80000bda:	e0a2                	sd	s0,64(sp)
    80000bdc:	0880                	addi	s0,sp,80
    80000bde:	fca43423          	sd	a0,-56(s0)
    80000be2:	fcb43023          	sd	a1,-64(s0)
    80000be6:	fac43c23          	sd	a2,-72(s0)
    80000bea:	fad43823          	sd	a3,-80(s0)
    u64 memaddr = ((u64)start) & ~(PAGE_SIZE - 1);
    80000bee:	fc043703          	ld	a4,-64(s0)
    80000bf2:	77fd                	lui	a5,0xfffff
    80000bf4:	8ff9                	and	a5,a5,a4
    80000bf6:	fef43423          	sd	a5,-24(s0)
    u64 num_kb_pages = (u64)end;
    80000bfa:	fb843783          	ld	a5,-72(s0)
    80000bfe:	fcf43c23          	sd	a5,-40(s0)
    num_kb_pages += PAGE_SIZE - (num_kb_pages % PAGE_SIZE);
    80000c02:	fd843703          	ld	a4,-40(s0)
    80000c06:	77fd                	lui	a5,0xfffff
    80000c08:	8f7d                	and	a4,a4,a5
    80000c0a:	6785                	lui	a5,0x1
    80000c0c:	97ba                	add	a5,a5,a4
    80000c0e:	fcf43c23          	sd	a5,-40(s0)
    num_kb_pages = (num_kb_pages - memaddr) / PAGE_SIZE;
    80000c12:	fd843703          	ld	a4,-40(s0)
    80000c16:	fe843783          	ld	a5,-24(s0)
    80000c1a:	40f707b3          	sub	a5,a4,a5
    80000c1e:	83b1                	srli	a5,a5,0xc
    80000c20:	fcf43c23          	sd	a5,-40(s0)
 
    for(u64 i = 0; i < num_kb_pages; i++)
    80000c24:	fe043023          	sd	zero,-32(s0)
    80000c28:	a03d                	j	80000c56 <mmu_kernel_map_range+0x80>
    {
        mmu_map(root, memaddr, memaddr, bits, 0);
    80000c2a:	4701                	li	a4,0
    80000c2c:	fb043683          	ld	a3,-80(s0)
    80000c30:	fe843603          	ld	a2,-24(s0)
    80000c34:	fe843583          	ld	a1,-24(s0)
    80000c38:	fc843503          	ld	a0,-56(s0)
    80000c3c:	e47ff0ef          	jal	ra,80000a82 <mmu_map>
        memaddr += PAGE_SIZE;
    80000c40:	fe843703          	ld	a4,-24(s0)
    80000c44:	6785                	lui	a5,0x1
    80000c46:	97ba                	add	a5,a5,a4
    80000c48:	fef43423          	sd	a5,-24(s0)
    for(u64 i = 0; i < num_kb_pages; i++)
    80000c4c:	fe043783          	ld	a5,-32(s0)
    80000c50:	0785                	addi	a5,a5,1
    80000c52:	fef43023          	sd	a5,-32(s0)
    80000c56:	fe043703          	ld	a4,-32(s0)
    80000c5a:	fd843783          	ld	a5,-40(s0)
    80000c5e:	fcf766e3          	bltu	a4,a5,80000c2a <mmu_kernel_map_range+0x54>
    }
}
    80000c62:	0001                	nop
    80000c64:	0001                	nop
    80000c66:	60a6                	ld	ra,72(sp)
    80000c68:	6406                	ld	s0,64(sp)
    80000c6a:	6161                	addi	sp,sp,80
    80000c6c:	8082                	ret

0000000080000c6e <mmu_unmap>:
 
void mmu_unmap(u64* root)
{
    80000c6e:	715d                	addi	sp,sp,-80
    80000c70:	e486                	sd	ra,72(sp)
    80000c72:	e0a2                	sd	s0,64(sp)
    80000c74:	0880                	addi	s0,sp,80
    80000c76:	faa43c23          	sd	a0,-72(s0)
    for(u64 lv2 = 0; lv2 < 512; lv2++)
    80000c7a:	fe043423          	sd	zero,-24(s0)
    80000c7e:	a075                	j	80000d2a <mmu_unmap+0xbc>
    {
        u64 entry_lv2 = root[lv2];
    80000c80:	fe843783          	ld	a5,-24(s0)
    80000c84:	078e                	slli	a5,a5,0x3
    80000c86:	fb843703          	ld	a4,-72(s0)
    80000c8a:	97ba                	add	a5,a5,a4
    80000c8c:	639c                	ld	a5,0(a5)
    80000c8e:	fcf43c23          	sd	a5,-40(s0)
        if(mmu_is_entry_valid(entry_lv2) && !mmu_is_entry_leaf(entry_lv2))
    80000c92:	fd843503          	ld	a0,-40(s0)
    80000c96:	dadff0ef          	jal	ra,80000a42 <mmu_is_entry_valid>
    80000c9a:	87aa                	mv	a5,a0
    80000c9c:	c3d1                	beqz	a5,80000d20 <mmu_unmap+0xb2>
    80000c9e:	fd843503          	ld	a0,-40(s0)
    80000ca2:	dc1ff0ef          	jal	ra,80000a62 <mmu_is_entry_leaf>
    80000ca6:	87aa                	mv	a5,a0
    80000ca8:	efa5                	bnez	a5,80000d20 <mmu_unmap+0xb2>
        {
            u64* table_lv1 = (u64*)((entry_lv2 & ~0x3ff) << 2);
    80000caa:	fd843783          	ld	a5,-40(s0)
    80000cae:	00279713          	slli	a4,a5,0x2
    80000cb2:	77fd                	lui	a5,0xfffff
    80000cb4:	8ff9                	and	a5,a5,a4
    80000cb6:	fcf43823          	sd	a5,-48(s0)
 
            for(u64 lv1 = 0; lv1 < 512; lv1++)
    80000cba:	fe043023          	sd	zero,-32(s0)
    80000cbe:	a0b9                	j	80000d0c <mmu_unmap+0x9e>
            {
                u64 entry_lv1 = table_lv1[lv1];
    80000cc0:	fe043783          	ld	a5,-32(s0)
    80000cc4:	078e                	slli	a5,a5,0x3
    80000cc6:	fd043703          	ld	a4,-48(s0)
    80000cca:	97ba                	add	a5,a5,a4
    80000ccc:	639c                	ld	a5,0(a5)
    80000cce:	fcf43423          	sd	a5,-56(s0)
                if(mmu_is_entry_valid(entry_lv1) && !mmu_is_entry_leaf(entry_lv1))
    80000cd2:	fc843503          	ld	a0,-56(s0)
    80000cd6:	d6dff0ef          	jal	ra,80000a42 <mmu_is_entry_valid>
    80000cda:	87aa                	mv	a5,a0
    80000cdc:	c39d                	beqz	a5,80000d02 <mmu_unmap+0x94>
    80000cde:	fc843503          	ld	a0,-56(s0)
    80000ce2:	d81ff0ef          	jal	ra,80000a62 <mmu_is_entry_leaf>
    80000ce6:	87aa                	mv	a5,a0
    80000ce8:	ef89                	bnez	a5,80000d02 <mmu_unmap+0x94>
                {
                    u64* table_lv0 = (u64*)((entry_lv1 & ~0x3ff) << 2);
    80000cea:	fc843783          	ld	a5,-56(s0)
    80000cee:	00279713          	slli	a4,a5,0x2
    80000cf2:	77fd                	lui	a5,0xfffff
    80000cf4:	8ff9                	and	a5,a5,a4
    80000cf6:	fcf43023          	sd	a5,-64(s0)
 
                    kfree_single_page(table_lv0);
    80000cfa:	fc043503          	ld	a0,-64(s0)
    80000cfe:	d0dff0ef          	jal	ra,80000a0a <kfree_single_page>
            for(u64 lv1 = 0; lv1 < 512; lv1++)
    80000d02:	fe043783          	ld	a5,-32(s0)
    80000d06:	0785                	addi	a5,a5,1
    80000d08:	fef43023          	sd	a5,-32(s0)
    80000d0c:	fe043703          	ld	a4,-32(s0)
    80000d10:	1ff00793          	li	a5,511
    80000d14:	fae7f6e3          	bgeu	a5,a4,80000cc0 <mmu_unmap+0x52>
                }
            }
            kfree_single_page(table_lv1);
    80000d18:	fd043503          	ld	a0,-48(s0)
    80000d1c:	cefff0ef          	jal	ra,80000a0a <kfree_single_page>
    for(u64 lv2 = 0; lv2 < 512; lv2++)
    80000d20:	fe843783          	ld	a5,-24(s0)
    80000d24:	0785                	addi	a5,a5,1
    80000d26:	fef43423          	sd	a5,-24(s0)
    80000d2a:	fe843703          	ld	a4,-24(s0)
    80000d2e:	1ff00793          	li	a5,511
    80000d32:	f4e7f7e3          	bgeu	a5,a4,80000c80 <mmu_unmap+0x12>
        }
    }
}
    80000d36:	0001                	nop
    80000d38:	0001                	nop
    80000d3a:	60a6                	ld	ra,72(sp)
    80000d3c:	6406                	ld	s0,64(sp)
    80000d3e:	6161                	addi	sp,sp,80
    80000d40:	8082                	ret

0000000080000d42 <mem_init>:

u64* mem_init()
{
    80000d42:	711d                	addi	sp,sp,-96
    80000d44:	ec86                	sd	ra,88(sp)
    80000d46:	e8a2                	sd	s0,80(sp)
    80000d48:	1080                	addi	s0,sp,96
    K_PAGE_COUNT = HEAP_SIZE / PAGE_SIZE;
    80000d4a:	00003797          	auipc	a5,0x3
    80000d4e:	2be78793          	addi	a5,a5,702 # 80004008 <HEAP_SIZE>
    80000d52:	639c                	ld	a5,0(a5)
    80000d54:	00003717          	auipc	a4,0x3
    80000d58:	2ac70713          	addi	a4,a4,684 # 80004000 <HEAP_START>
    80000d5c:	6318                	ld	a4,0(a4)
    80000d5e:	0721                	addi	a4,a4,8
    80000d60:	83b1                	srli	a5,a5,0xc
    80000d62:	e31c                	sd	a5,0(a4)

    K_TABLE_COUNT = 63;
    80000d64:	00003797          	auipc	a5,0x3
    80000d68:	29c78793          	addi	a5,a5,668 # 80004000 <HEAP_START>
    80000d6c:	639c                	ld	a5,0(a5)
    80000d6e:	07c1                	addi	a5,a5,16
    80000d70:	873e                	mv	a4,a5
    80000d72:	03f00793          	li	a5,63
    80000d76:	e31c                	sd	a5,0(a4)
    while(1)
    {
        if((K_PAGE_COUNT & (((u64)1) << K_TABLE_COUNT)) != 0) { break; }
    80000d78:	00003797          	auipc	a5,0x3
    80000d7c:	28878793          	addi	a5,a5,648 # 80004000 <HEAP_START>
    80000d80:	639c                	ld	a5,0(a5)
    80000d82:	07a1                	addi	a5,a5,8
    80000d84:	639c                	ld	a5,0(a5)
    80000d86:	00003717          	auipc	a4,0x3
    80000d8a:	27a70713          	addi	a4,a4,634 # 80004000 <HEAP_START>
    80000d8e:	6318                	ld	a4,0(a4)
    80000d90:	0741                	addi	a4,a4,16
    80000d92:	6318                	ld	a4,0(a4)
    80000d94:	2701                	sext.w	a4,a4
    80000d96:	00e7d7b3          	srl	a5,a5,a4
    80000d9a:	8b85                	andi	a5,a5,1
    80000d9c:	eb9d                	bnez	a5,80000dd2 <mem_init+0x90>
        K_TABLE_COUNT -= 1;
    80000d9e:	00003797          	auipc	a5,0x3
    80000da2:	26278793          	addi	a5,a5,610 # 80004000 <HEAP_START>
    80000da6:	639c                	ld	a5,0(a5)
    80000da8:	07c1                	addi	a5,a5,16
    80000daa:	639c                	ld	a5,0(a5)
    80000dac:	00003717          	auipc	a4,0x3
    80000db0:	25470713          	addi	a4,a4,596 # 80004000 <HEAP_START>
    80000db4:	6318                	ld	a4,0(a4)
    80000db6:	0741                	addi	a4,a4,16
    80000db8:	17fd                	addi	a5,a5,-1
    80000dba:	e31c                	sd	a5,0(a4)
        if(K_TABLE_COUNT == 1) { break; }
    80000dbc:	00003797          	auipc	a5,0x3
    80000dc0:	24478793          	addi	a5,a5,580 # 80004000 <HEAP_START>
    80000dc4:	639c                	ld	a5,0(a5)
    80000dc6:	07c1                	addi	a5,a5,16
    80000dc8:	6398                	ld	a4,0(a5)
    80000dca:	4785                	li	a5,1
    80000dcc:	00f70563          	beq	a4,a5,80000dd6 <mem_init+0x94>
        if((K_PAGE_COUNT & (((u64)1) << K_TABLE_COUNT)) != 0) { break; }
    80000dd0:	b765                	j	80000d78 <mem_init+0x36>
    80000dd2:	0001                	nop
    80000dd4:	a011                	j	80000dd8 <mem_init+0x96>
        if(K_TABLE_COUNT == 1) { break; }
    80000dd6:	0001                	nop
    }
    if(((u64)1) << K_TABLE_COUNT < K_PAGE_COUNT) { K_TABLE_COUNT += 1; }
    80000dd8:	00003797          	auipc	a5,0x3
    80000ddc:	22878793          	addi	a5,a5,552 # 80004000 <HEAP_START>
    80000de0:	639c                	ld	a5,0(a5)
    80000de2:	07c1                	addi	a5,a5,16
    80000de4:	639c                	ld	a5,0(a5)
    80000de6:	2781                	sext.w	a5,a5
    80000de8:	873e                	mv	a4,a5
    80000dea:	4785                	li	a5,1
    80000dec:	00e79733          	sll	a4,a5,a4
    80000df0:	00003797          	auipc	a5,0x3
    80000df4:	21078793          	addi	a5,a5,528 # 80004000 <HEAP_START>
    80000df8:	639c                	ld	a5,0(a5)
    80000dfa:	07a1                	addi	a5,a5,8
    80000dfc:	639c                	ld	a5,0(a5)
    80000dfe:	02f77163          	bgeu	a4,a5,80000e20 <mem_init+0xde>
    80000e02:	00003797          	auipc	a5,0x3
    80000e06:	1fe78793          	addi	a5,a5,510 # 80004000 <HEAP_START>
    80000e0a:	639c                	ld	a5,0(a5)
    80000e0c:	07c1                	addi	a5,a5,16
    80000e0e:	639c                	ld	a5,0(a5)
    80000e10:	00003717          	auipc	a4,0x3
    80000e14:	1f070713          	addi	a4,a4,496 # 80004000 <HEAP_START>
    80000e18:	6318                	ld	a4,0(a4)
    80000e1a:	0741                	addi	a4,a4,16
    80000e1c:	0785                	addi	a5,a5,1
    80000e1e:	e31c                	sd	a5,0(a4)

    // But remember, the smallest buddy stores a byte of bitmap
    for(u64 i = 0; i < 2 && K_TABLE_COUNT > 1; i++) { K_TABLE_COUNT -= 1; }
    80000e20:	fe043423          	sd	zero,-24(s0)
    80000e24:	a02d                	j	80000e4e <mem_init+0x10c>
    80000e26:	00003797          	auipc	a5,0x3
    80000e2a:	1da78793          	addi	a5,a5,474 # 80004000 <HEAP_START>
    80000e2e:	639c                	ld	a5,0(a5)
    80000e30:	07c1                	addi	a5,a5,16
    80000e32:	639c                	ld	a5,0(a5)
    80000e34:	00003717          	auipc	a4,0x3
    80000e38:	1cc70713          	addi	a4,a4,460 # 80004000 <HEAP_START>
    80000e3c:	6318                	ld	a4,0(a4)
    80000e3e:	0741                	addi	a4,a4,16
    80000e40:	17fd                	addi	a5,a5,-1
    80000e42:	e31c                	sd	a5,0(a4)
    80000e44:	fe843783          	ld	a5,-24(s0)
    80000e48:	0785                	addi	a5,a5,1
    80000e4a:	fef43423          	sd	a5,-24(s0)
    80000e4e:	fe843703          	ld	a4,-24(s0)
    80000e52:	4785                	li	a5,1
    80000e54:	00e7ec63          	bltu	a5,a4,80000e6c <mem_init+0x12a>
    80000e58:	00003797          	auipc	a5,0x3
    80000e5c:	1a878793          	addi	a5,a5,424 # 80004000 <HEAP_START>
    80000e60:	639c                	ld	a5,0(a5)
    80000e62:	07c1                	addi	a5,a5,16
    80000e64:	6398                	ld	a4,0(a5)
    80000e66:	4785                	li	a5,1
    80000e68:	fae7efe3          	bltu	a5,a4,80000e26 <mem_init+0xe4>

    K_HEAP_START = HEAP_START + (3 * 8); // we have variables at the heap start see above
    80000e6c:	00003797          	auipc	a5,0x3
    80000e70:	19478793          	addi	a5,a5,404 # 80004000 <HEAP_START>
    80000e74:	639c                	ld	a5,0(a5)
    80000e76:	00003717          	auipc	a4,0x3
    80000e7a:	18a70713          	addi	a4,a4,394 # 80004000 <HEAP_START>
    80000e7e:	6318                	ld	a4,0(a4)
    80000e80:	07e1                	addi	a5,a5,24
    80000e82:	e31c                	sd	a5,0(a4)
    // Heap starts with memtables
    K_HEAP_START += K_TABLE_COUNT * sizeof(u8*);
    80000e84:	00003797          	auipc	a5,0x3
    80000e88:	17c78793          	addi	a5,a5,380 # 80004000 <HEAP_START>
    80000e8c:	639c                	ld	a5,0(a5)
    80000e8e:	6398                	ld	a4,0(a5)
    80000e90:	00003797          	auipc	a5,0x3
    80000e94:	17078793          	addi	a5,a5,368 # 80004000 <HEAP_START>
    80000e98:	639c                	ld	a5,0(a5)
    80000e9a:	07c1                	addi	a5,a5,16
    80000e9c:	639c                	ld	a5,0(a5)
    80000e9e:	078e                	slli	a5,a5,0x3
    80000ea0:	00003697          	auipc	a3,0x3
    80000ea4:	16068693          	addi	a3,a3,352 # 80004000 <HEAP_START>
    80000ea8:	6294                	ld	a3,0(a3)
    80000eaa:	97ba                	add	a5,a5,a4
    80000eac:	e29c                	sd	a5,0(a3)

    for(u64 i = 0; i < K_TABLE_COUNT; i++)
    80000eae:	fe043023          	sd	zero,-32(s0)
    80000eb2:	a219                	j	80000fb8 <mem_init+0x276>
    {
        K_MEMTABLES[i] = (void*)K_HEAP_START;
    80000eb4:	00003797          	auipc	a5,0x3
    80000eb8:	14c78793          	addi	a5,a5,332 # 80004000 <HEAP_START>
    80000ebc:	639c                	ld	a5,0(a5)
    80000ebe:	6394                	ld	a3,0(a5)
    80000ec0:	fe043783          	ld	a5,-32(s0)
    80000ec4:	00379713          	slli	a4,a5,0x3
    80000ec8:	00003797          	auipc	a5,0x3
    80000ecc:	13878793          	addi	a5,a5,312 # 80004000 <HEAP_START>
    80000ed0:	639c                	ld	a5,0(a5)
    80000ed2:	97ba                	add	a5,a5,a4
    80000ed4:	07e1                	addi	a5,a5,24
    80000ed6:	8736                	mv	a4,a3
    80000ed8:	e398                	sd	a4,0(a5)
        s64 buddy_byte_count = ((u64)1) << i;
    80000eda:	fe043783          	ld	a5,-32(s0)
    80000ede:	2781                	sext.w	a5,a5
    80000ee0:	873e                	mv	a4,a5
    80000ee2:	4785                	li	a5,1
    80000ee4:	00e797b3          	sll	a5,a5,a4
    80000ee8:	fcf43c23          	sd	a5,-40(s0)
        while((buddy_byte_count << (K_TABLE_COUNT - (i+1))) * 8 >= K_PAGE_COUNT)
    80000eec:	a031                	j	80000ef8 <mem_init+0x1b6>
        { buddy_byte_count -= 1; }
    80000eee:	fd843783          	ld	a5,-40(s0)
    80000ef2:	17fd                	addi	a5,a5,-1
    80000ef4:	fcf43c23          	sd	a5,-40(s0)
        while((buddy_byte_count << (K_TABLE_COUNT - (i+1))) * 8 >= K_PAGE_COUNT)
    80000ef8:	00003797          	auipc	a5,0x3
    80000efc:	10878793          	addi	a5,a5,264 # 80004000 <HEAP_START>
    80000f00:	639c                	ld	a5,0(a5)
    80000f02:	07c1                	addi	a5,a5,16
    80000f04:	639c                	ld	a5,0(a5)
    80000f06:	0007871b          	sext.w	a4,a5
    80000f0a:	fe043783          	ld	a5,-32(s0)
    80000f0e:	2781                	sext.w	a5,a5
    80000f10:	40f707bb          	subw	a5,a4,a5
    80000f14:	2781                	sext.w	a5,a5
    80000f16:	37fd                	addiw	a5,a5,-1
    80000f18:	2781                	sext.w	a5,a5
    80000f1a:	fd843703          	ld	a4,-40(s0)
    80000f1e:	00f717b3          	sll	a5,a4,a5
    80000f22:	078e                	slli	a5,a5,0x3
    80000f24:	873e                	mv	a4,a5
    80000f26:	00003797          	auipc	a5,0x3
    80000f2a:	0da78793          	addi	a5,a5,218 # 80004000 <HEAP_START>
    80000f2e:	639c                	ld	a5,0(a5)
    80000f30:	07a1                	addi	a5,a5,8
    80000f32:	639c                	ld	a5,0(a5)
    80000f34:	faf77de3          	bgeu	a4,a5,80000eee <mem_init+0x1ac>
        buddy_byte_count += 1;
    80000f38:	fd843783          	ld	a5,-40(s0)
    80000f3c:	0785                	addi	a5,a5,1
    80000f3e:	fcf43c23          	sd	a5,-40(s0)
        K_MEMTABLES[i]->table_len = buddy_byte_count;
    80000f42:	fe043783          	ld	a5,-32(s0)
    80000f46:	00379713          	slli	a4,a5,0x3
    80000f4a:	00003797          	auipc	a5,0x3
    80000f4e:	0b678793          	addi	a5,a5,182 # 80004000 <HEAP_START>
    80000f52:	639c                	ld	a5,0(a5)
    80000f54:	97ba                	add	a5,a5,a4
    80000f56:	07e1                	addi	a5,a5,24
    80000f58:	639c                	ld	a5,0(a5)
    80000f5a:	fd843703          	ld	a4,-40(s0)
    80000f5e:	e398                	sd	a4,0(a5)

        K_HEAP_START += sizeof(struct KmemTable);
    80000f60:	00003797          	auipc	a5,0x3
    80000f64:	0a078793          	addi	a5,a5,160 # 80004000 <HEAP_START>
    80000f68:	639c                	ld	a5,0(a5)
    80000f6a:	639c                	ld	a5,0(a5)
    80000f6c:	00003717          	auipc	a4,0x3
    80000f70:	09470713          	addi	a4,a4,148 # 80004000 <HEAP_START>
    80000f74:	6318                	ld	a4,0(a4)
    80000f76:	07a1                	addi	a5,a5,8
    80000f78:	e31c                	sd	a5,0(a4)
        K_HEAP_START += K_MEMTABLES[i]->table_len;
    80000f7a:	00003797          	auipc	a5,0x3
    80000f7e:	08678793          	addi	a5,a5,134 # 80004000 <HEAP_START>
    80000f82:	639c                	ld	a5,0(a5)
    80000f84:	6398                	ld	a4,0(a5)
    80000f86:	fe043783          	ld	a5,-32(s0)
    80000f8a:	00379693          	slli	a3,a5,0x3
    80000f8e:	00003797          	auipc	a5,0x3
    80000f92:	07278793          	addi	a5,a5,114 # 80004000 <HEAP_START>
    80000f96:	639c                	ld	a5,0(a5)
    80000f98:	97b6                	add	a5,a5,a3
    80000f9a:	07e1                	addi	a5,a5,24
    80000f9c:	639c                	ld	a5,0(a5)
    80000f9e:	639c                	ld	a5,0(a5)
    80000fa0:	00003697          	auipc	a3,0x3
    80000fa4:	06068693          	addi	a3,a3,96 # 80004000 <HEAP_START>
    80000fa8:	6294                	ld	a3,0(a3)
    80000faa:	97ba                	add	a5,a5,a4
    80000fac:	e29c                	sd	a5,0(a3)
    for(u64 i = 0; i < K_TABLE_COUNT; i++)
    80000fae:	fe043783          	ld	a5,-32(s0)
    80000fb2:	0785                	addi	a5,a5,1
    80000fb4:	fef43023          	sd	a5,-32(s0)
    80000fb8:	00003797          	auipc	a5,0x3
    80000fbc:	04878793          	addi	a5,a5,72 # 80004000 <HEAP_START>
    80000fc0:	639c                	ld	a5,0(a5)
    80000fc2:	07c1                	addi	a5,a5,16
    80000fc4:	639c                	ld	a5,0(a5)
    80000fc6:	fe043703          	ld	a4,-32(s0)
    80000fca:	eef765e3          	bltu	a4,a5,80000eb4 <mem_init+0x172>
    }
    K_HEAP_START += PAGE_SIZE - (K_HEAP_START % PAGE_SIZE);
    80000fce:	00003797          	auipc	a5,0x3
    80000fd2:	03278793          	addi	a5,a5,50 # 80004000 <HEAP_START>
    80000fd6:	639c                	ld	a5,0(a5)
    80000fd8:	6398                	ld	a4,0(a5)
    80000fda:	77fd                	lui	a5,0xfffff
    80000fdc:	8f7d                	and	a4,a4,a5
    80000fde:	00003797          	auipc	a5,0x3
    80000fe2:	02278793          	addi	a5,a5,34 # 80004000 <HEAP_START>
    80000fe6:	639c                	ld	a5,0(a5)
    80000fe8:	86be                	mv	a3,a5
    80000fea:	6785                	lui	a5,0x1
    80000fec:	97ba                	add	a5,a5,a4
    80000fee:	e29c                	sd	a5,0(a3)
    for(u64 i = 0; i < K_TABLE_COUNT; i++)
    80000ff0:	fc043823          	sd	zero,-48(s0)
    80000ff4:	a2a1                	j	8000113c <mem_init+0x3fa>
    {
        u64 table_page_size = ((u64)PAGE_SIZE) << (K_TABLE_COUNT - (i+1));
    80000ff6:	00003797          	auipc	a5,0x3
    80000ffa:	00a78793          	addi	a5,a5,10 # 80004000 <HEAP_START>
    80000ffe:	639c                	ld	a5,0(a5)
    80001000:	07c1                	addi	a5,a5,16
    80001002:	639c                	ld	a5,0(a5)
    80001004:	0007871b          	sext.w	a4,a5
    80001008:	fd043783          	ld	a5,-48(s0)
    8000100c:	2781                	sext.w	a5,a5
    8000100e:	40f707bb          	subw	a5,a4,a5
    80001012:	2781                	sext.w	a5,a5
    80001014:	37fd                	addiw	a5,a5,-1
    80001016:	2781                	sext.w	a5,a5
    80001018:	873e                	mv	a4,a5
    8000101a:	6785                	lui	a5,0x1
    8000101c:	00e797b3          	sll	a5,a5,a4
    80001020:	faf43423          	sd	a5,-88(s0)
        u64 c = HEAP_START;
    80001024:	00003797          	auipc	a5,0x3
    80001028:	fdc78793          	addi	a5,a5,-36 # 80004000 <HEAP_START>
    8000102c:	639c                	ld	a5,0(a5)
    8000102e:	fcf43423          	sd	a5,-56(s0)
        for(u64 j = 0; j < K_MEMTABLES[i]->table_len; j++)
    80001032:	fc043023          	sd	zero,-64(s0)
    80001036:	a8e9                	j	80001110 <mem_init+0x3ce>
        {
            K_MEMTABLES[i]->data[j] = 0;
    80001038:	fd043783          	ld	a5,-48(s0)
    8000103c:	00379713          	slli	a4,a5,0x3
    80001040:	00003797          	auipc	a5,0x3
    80001044:	fc078793          	addi	a5,a5,-64 # 80004000 <HEAP_START>
    80001048:	639c                	ld	a5,0(a5)
    8000104a:	97ba                	add	a5,a5,a4
    8000104c:	07e1                	addi	a5,a5,24
    8000104e:	6398                	ld	a4,0(a5)
    80001050:	fc043783          	ld	a5,-64(s0)
    80001054:	97ba                	add	a5,a5,a4
    80001056:	00078423          	sb	zero,8(a5)
            for(u64 k = 0; k < 8; k++)
    8000105a:	fa043c23          	sd	zero,-72(s0)
    8000105e:	a879                	j	800010fc <mem_init+0x3ba>
            {
                if(c < K_HEAP_START)
    80001060:	00003797          	auipc	a5,0x3
    80001064:	fa078793          	addi	a5,a5,-96 # 80004000 <HEAP_START>
    80001068:	639c                	ld	a5,0(a5)
    8000106a:	639c                	ld	a5,0(a5)
    8000106c:	fc843703          	ld	a4,-56(s0)
    80001070:	06f77a63          	bgeu	a4,a5,800010e4 <mem_init+0x3a2>
                { K_MEMTABLES[i]->data[j] |= 1 << k; }
    80001074:	fd043783          	ld	a5,-48(s0)
    80001078:	00379713          	slli	a4,a5,0x3
    8000107c:	00003797          	auipc	a5,0x3
    80001080:	f8478793          	addi	a5,a5,-124 # 80004000 <HEAP_START>
    80001084:	639c                	ld	a5,0(a5)
    80001086:	97ba                	add	a5,a5,a4
    80001088:	07e1                	addi	a5,a5,24
    8000108a:	6398                	ld	a4,0(a5)
    8000108c:	fc043783          	ld	a5,-64(s0)
    80001090:	97ba                	add	a5,a5,a4
    80001092:	0087c783          	lbu	a5,8(a5)
    80001096:	0187971b          	slliw	a4,a5,0x18
    8000109a:	4187571b          	sraiw	a4,a4,0x18
    8000109e:	fb843783          	ld	a5,-72(s0)
    800010a2:	2781                	sext.w	a5,a5
    800010a4:	4685                	li	a3,1
    800010a6:	00f697bb          	sllw	a5,a3,a5
    800010aa:	2781                	sext.w	a5,a5
    800010ac:	0187979b          	slliw	a5,a5,0x18
    800010b0:	4187d79b          	sraiw	a5,a5,0x18
    800010b4:	8fd9                	or	a5,a5,a4
    800010b6:	0187961b          	slliw	a2,a5,0x18
    800010ba:	4186561b          	sraiw	a2,a2,0x18
    800010be:	fd043783          	ld	a5,-48(s0)
    800010c2:	00379713          	slli	a4,a5,0x3
    800010c6:	00003797          	auipc	a5,0x3
    800010ca:	f3a78793          	addi	a5,a5,-198 # 80004000 <HEAP_START>
    800010ce:	639c                	ld	a5,0(a5)
    800010d0:	97ba                	add	a5,a5,a4
    800010d2:	07e1                	addi	a5,a5,24
    800010d4:	6394                	ld	a3,0(a5)
    800010d6:	0ff67713          	andi	a4,a2,255
    800010da:	fc043783          	ld	a5,-64(s0)
    800010de:	97b6                	add	a5,a5,a3
    800010e0:	00e78423          	sb	a4,8(a5)
                c += table_page_size;
    800010e4:	fc843703          	ld	a4,-56(s0)
    800010e8:	fa843783          	ld	a5,-88(s0)
    800010ec:	97ba                	add	a5,a5,a4
    800010ee:	fcf43423          	sd	a5,-56(s0)
            for(u64 k = 0; k < 8; k++)
    800010f2:	fb843783          	ld	a5,-72(s0)
    800010f6:	0785                	addi	a5,a5,1
    800010f8:	faf43c23          	sd	a5,-72(s0)
    800010fc:	fb843703          	ld	a4,-72(s0)
    80001100:	479d                	li	a5,7
    80001102:	f4e7ffe3          	bgeu	a5,a4,80001060 <mem_init+0x31e>
        for(u64 j = 0; j < K_MEMTABLES[i]->table_len; j++)
    80001106:	fc043783          	ld	a5,-64(s0)
    8000110a:	0785                	addi	a5,a5,1
    8000110c:	fcf43023          	sd	a5,-64(s0)
    80001110:	fd043783          	ld	a5,-48(s0)
    80001114:	00379713          	slli	a4,a5,0x3
    80001118:	00003797          	auipc	a5,0x3
    8000111c:	ee878793          	addi	a5,a5,-280 # 80004000 <HEAP_START>
    80001120:	639c                	ld	a5,0(a5)
    80001122:	97ba                	add	a5,a5,a4
    80001124:	07e1                	addi	a5,a5,24
    80001126:	639c                	ld	a5,0(a5)
    80001128:	639c                	ld	a5,0(a5)
    8000112a:	fc043703          	ld	a4,-64(s0)
    8000112e:	f0f765e3          	bltu	a4,a5,80001038 <mem_init+0x2f6>
    for(u64 i = 0; i < K_TABLE_COUNT; i++)
    80001132:	fd043783          	ld	a5,-48(s0)
    80001136:	0785                	addi	a5,a5,1
    80001138:	fcf43823          	sd	a5,-48(s0)
    8000113c:	00003797          	auipc	a5,0x3
    80001140:	ec478793          	addi	a5,a5,-316 # 80004000 <HEAP_START>
    80001144:	639c                	ld	a5,0(a5)
    80001146:	07c1                	addi	a5,a5,16
    80001148:	639c                	ld	a5,0(a5)
    8000114a:	fd043703          	ld	a4,-48(s0)
    8000114e:	eaf764e3          	bltu	a4,a5,80000ff6 <mem_init+0x2b4>
            }
        }
    }

    printf("Memory has been initialized:\n\n");
    80001152:	00003517          	auipc	a0,0x3
    80001156:	f2650513          	addi	a0,a0,-218 # 80004078 <KERNEL_STACK_END+0x20>
    8000115a:	7c4020ef          	jal	ra,8000391e <printf_>
    printf("TEXT:        0x%x <-> 0x%x\n", TEXT_START, TEXT_END);
    8000115e:	00003797          	auipc	a5,0x3
    80001162:	eb278793          	addi	a5,a5,-334 # 80004010 <TEXT_START>
    80001166:	6398                	ld	a4,0(a5)
    80001168:	00003797          	auipc	a5,0x3
    8000116c:	eb078793          	addi	a5,a5,-336 # 80004018 <TEXT_END>
    80001170:	639c                	ld	a5,0(a5)
    80001172:	863e                	mv	a2,a5
    80001174:	85ba                	mv	a1,a4
    80001176:	00003517          	auipc	a0,0x3
    8000117a:	f2250513          	addi	a0,a0,-222 # 80004098 <KERNEL_STACK_END+0x40>
    8000117e:	7a0020ef          	jal	ra,8000391e <printf_>
    printf("RODATA:      0x%x <-> 0x%x\n", RODATA_START, RODATA_END);
    80001182:	00003797          	auipc	a5,0x3
    80001186:	eae78793          	addi	a5,a5,-338 # 80004030 <RODATA_START>
    8000118a:	6398                	ld	a4,0(a5)
    8000118c:	00003797          	auipc	a5,0x3
    80001190:	eac78793          	addi	a5,a5,-340 # 80004038 <RODATA_END>
    80001194:	639c                	ld	a5,0(a5)
    80001196:	863e                	mv	a2,a5
    80001198:	85ba                	mv	a1,a4
    8000119a:	00003517          	auipc	a0,0x3
    8000119e:	f1e50513          	addi	a0,a0,-226 # 800040b8 <KERNEL_STACK_END+0x60>
    800011a2:	77c020ef          	jal	ra,8000391e <printf_>
    printf("DATA:        0x%x <-> 0x%x\n", DATA_START, DATA_END);
    800011a6:	00003797          	auipc	a5,0x3
    800011aa:	e7a78793          	addi	a5,a5,-390 # 80004020 <DATA_START>
    800011ae:	6398                	ld	a4,0(a5)
    800011b0:	00003797          	auipc	a5,0x3
    800011b4:	e7878793          	addi	a5,a5,-392 # 80004028 <DATA_END>
    800011b8:	639c                	ld	a5,0(a5)
    800011ba:	863e                	mv	a2,a5
    800011bc:	85ba                	mv	a1,a4
    800011be:	00003517          	auipc	a0,0x3
    800011c2:	f1a50513          	addi	a0,a0,-230 # 800040d8 <KERNEL_STACK_END+0x80>
    800011c6:	758020ef          	jal	ra,8000391e <printf_>
    printf("BSS:         0x%x <-> 0x%x\n", BSS_START, BSS_END);
    800011ca:	00003797          	auipc	a5,0x3
    800011ce:	e7678793          	addi	a5,a5,-394 # 80004040 <BSS_START>
    800011d2:	6398                	ld	a4,0(a5)
    800011d4:	00003797          	auipc	a5,0x3
    800011d8:	e7478793          	addi	a5,a5,-396 # 80004048 <BSS_END>
    800011dc:	639c                	ld	a5,0(a5)
    800011de:	863e                	mv	a2,a5
    800011e0:	85ba                	mv	a1,a4
    800011e2:	00003517          	auipc	a0,0x3
    800011e6:	f1650513          	addi	a0,a0,-234 # 800040f8 <KERNEL_STACK_END+0xa0>
    800011ea:	734020ef          	jal	ra,8000391e <printf_>
    printf("STACK:       0x%x <-> 0x%x\n", KERNEL_STACK_END, KERNEL_STACK_START);
    800011ee:	00003797          	auipc	a5,0x3
    800011f2:	e6a78793          	addi	a5,a5,-406 # 80004058 <KERNEL_STACK_END>
    800011f6:	6398                	ld	a4,0(a5)
    800011f8:	00003797          	auipc	a5,0x3
    800011fc:	e5878793          	addi	a5,a5,-424 # 80004050 <KERNEL_STACK_START>
    80001200:	639c                	ld	a5,0(a5)
    80001202:	863e                	mv	a2,a5
    80001204:	85ba                	mv	a1,a4
    80001206:	00003517          	auipc	a0,0x3
    8000120a:	f1250513          	addi	a0,a0,-238 # 80004118 <KERNEL_STACK_END+0xc0>
    8000120e:	710020ef          	jal	ra,8000391e <printf_>
    printf("HEAP META:   0x%x <-> 0x%x\n", HEAP_START, K_HEAP_START);
    80001212:	00003797          	auipc	a5,0x3
    80001216:	dee78793          	addi	a5,a5,-530 # 80004000 <HEAP_START>
    8000121a:	6398                	ld	a4,0(a5)
    8000121c:	00003797          	auipc	a5,0x3
    80001220:	de478793          	addi	a5,a5,-540 # 80004000 <HEAP_START>
    80001224:	639c                	ld	a5,0(a5)
    80001226:	639c                	ld	a5,0(a5)
    80001228:	863e                	mv	a2,a5
    8000122a:	85ba                	mv	a1,a4
    8000122c:	00003517          	auipc	a0,0x3
    80001230:	f0c50513          	addi	a0,a0,-244 # 80004138 <KERNEL_STACK_END+0xe0>
    80001234:	6ea020ef          	jal	ra,8000391e <printf_>
    printf("HEAP:        0x%x <-> 0x%x\n", K_HEAP_START, HEAP_START + HEAP_SIZE);
    80001238:	00003797          	auipc	a5,0x3
    8000123c:	dc878793          	addi	a5,a5,-568 # 80004000 <HEAP_START>
    80001240:	639c                	ld	a5,0(a5)
    80001242:	6394                	ld	a3,0(a5)
    80001244:	00003797          	auipc	a5,0x3
    80001248:	dbc78793          	addi	a5,a5,-580 # 80004000 <HEAP_START>
    8000124c:	6398                	ld	a4,0(a5)
    8000124e:	00003797          	auipc	a5,0x3
    80001252:	dba78793          	addi	a5,a5,-582 # 80004008 <HEAP_SIZE>
    80001256:	639c                	ld	a5,0(a5)
    80001258:	97ba                	add	a5,a5,a4
    8000125a:	863e                	mv	a2,a5
    8000125c:	85b6                	mv	a1,a3
    8000125e:	00003517          	auipc	a0,0x3
    80001262:	efa50513          	addi	a0,a0,-262 # 80004158 <KERNEL_STACK_END+0x100>
    80001266:	6b8020ef          	jal	ra,8000391e <printf_>
    printf("\n\n");
    8000126a:	00003517          	auipc	a0,0x3
    8000126e:	f0e50513          	addi	a0,a0,-242 # 80004178 <KERNEL_STACK_END+0x120>
    80001272:	6ac020ef          	jal	ra,8000391e <printf_>


    // Initialize MMU table for the kernel
    u64* table = kalloc_single_page();
    80001276:	f6cff0ef          	jal	ra,800009e2 <kalloc_single_page>
    8000127a:	faa43823          	sd	a0,-80(s0)

    mmu_kernel_map_range(table, (u64*)TEXT_START, (u64*)TEXT_END,                   2 + 8); //read + execute
    8000127e:	00003797          	auipc	a5,0x3
    80001282:	d9278793          	addi	a5,a5,-622 # 80004010 <TEXT_START>
    80001286:	639c                	ld	a5,0(a5)
    80001288:	873e                	mv	a4,a5
    8000128a:	00003797          	auipc	a5,0x3
    8000128e:	d8e78793          	addi	a5,a5,-626 # 80004018 <TEXT_END>
    80001292:	639c                	ld	a5,0(a5)
    80001294:	46a9                	li	a3,10
    80001296:	863e                	mv	a2,a5
    80001298:	85ba                	mv	a1,a4
    8000129a:	fb043503          	ld	a0,-80(s0)
    8000129e:	939ff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>
    mmu_kernel_map_range(table, (u64*)RODATA_START, (u64*)RODATA_END,               2    ); //readonly
    800012a2:	00003797          	auipc	a5,0x3
    800012a6:	d8e78793          	addi	a5,a5,-626 # 80004030 <RODATA_START>
    800012aa:	639c                	ld	a5,0(a5)
    800012ac:	873e                	mv	a4,a5
    800012ae:	00003797          	auipc	a5,0x3
    800012b2:	d8a78793          	addi	a5,a5,-630 # 80004038 <RODATA_END>
    800012b6:	639c                	ld	a5,0(a5)
    800012b8:	4689                	li	a3,2
    800012ba:	863e                	mv	a2,a5
    800012bc:	85ba                	mv	a1,a4
    800012be:	fb043503          	ld	a0,-80(s0)
    800012c2:	915ff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>
    mmu_kernel_map_range(table, (u64*)DATA_START, (u64*)DATA_END,                   2 + 4); //read + write
    800012c6:	00003797          	auipc	a5,0x3
    800012ca:	d5a78793          	addi	a5,a5,-678 # 80004020 <DATA_START>
    800012ce:	639c                	ld	a5,0(a5)
    800012d0:	873e                	mv	a4,a5
    800012d2:	00003797          	auipc	a5,0x3
    800012d6:	d5678793          	addi	a5,a5,-682 # 80004028 <DATA_END>
    800012da:	639c                	ld	a5,0(a5)
    800012dc:	4699                	li	a3,6
    800012de:	863e                	mv	a2,a5
    800012e0:	85ba                	mv	a1,a4
    800012e2:	fb043503          	ld	a0,-80(s0)
    800012e6:	8f1ff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>
    mmu_kernel_map_range(table, (u64*)BSS_START, (u64*)BSS_END,                     2 + 4);
    800012ea:	00003797          	auipc	a5,0x3
    800012ee:	d5678793          	addi	a5,a5,-682 # 80004040 <BSS_START>
    800012f2:	639c                	ld	a5,0(a5)
    800012f4:	873e                	mv	a4,a5
    800012f6:	00003797          	auipc	a5,0x3
    800012fa:	d5278793          	addi	a5,a5,-686 # 80004048 <BSS_END>
    800012fe:	639c                	ld	a5,0(a5)
    80001300:	4699                	li	a3,6
    80001302:	863e                	mv	a2,a5
    80001304:	85ba                	mv	a1,a4
    80001306:	fb043503          	ld	a0,-80(s0)
    8000130a:	8cdff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>
    mmu_kernel_map_range(table, (u64*)KERNEL_STACK_END, (u64*)KERNEL_STACK_END,     2 + 4);
    8000130e:	00003797          	auipc	a5,0x3
    80001312:	d4a78793          	addi	a5,a5,-694 # 80004058 <KERNEL_STACK_END>
    80001316:	639c                	ld	a5,0(a5)
    80001318:	873e                	mv	a4,a5
    8000131a:	00003797          	auipc	a5,0x3
    8000131e:	d3e78793          	addi	a5,a5,-706 # 80004058 <KERNEL_STACK_END>
    80001322:	639c                	ld	a5,0(a5)
    80001324:	4699                	li	a3,6
    80001326:	863e                	mv	a2,a5
    80001328:	85ba                	mv	a1,a4
    8000132a:	fb043503          	ld	a0,-80(s0)
    8000132e:	8a9ff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>
    mmu_kernel_map_range(table, (u64*)HEAP_START, (u64*)(HEAP_START + HEAP_SIZE),   2 + 4);
    80001332:	00003797          	auipc	a5,0x3
    80001336:	cce78793          	addi	a5,a5,-818 # 80004000 <HEAP_START>
    8000133a:	639c                	ld	a5,0(a5)
    8000133c:	85be                	mv	a1,a5
    8000133e:	00003797          	auipc	a5,0x3
    80001342:	cc278793          	addi	a5,a5,-830 # 80004000 <HEAP_START>
    80001346:	6398                	ld	a4,0(a5)
    80001348:	00003797          	auipc	a5,0x3
    8000134c:	cc078793          	addi	a5,a5,-832 # 80004008 <HEAP_SIZE>
    80001350:	639c                	ld	a5,0(a5)
    80001352:	97ba                	add	a5,a5,a4
    80001354:	4699                	li	a3,6
    80001356:	863e                	mv	a2,a5
    80001358:	fb043503          	ld	a0,-80(s0)
    8000135c:	87bff0ef          	jal	ra,80000bd6 <mmu_kernel_map_range>

    //Map the uart
    mmu_map(table, 0x10000000, 0x10000000, 2 + 4, 0);
    80001360:	4701                	li	a4,0
    80001362:	4699                	li	a3,6
    80001364:	10000637          	lui	a2,0x10000
    80001368:	100005b7          	lui	a1,0x10000
    8000136c:	fb043503          	ld	a0,-80(s0)
    80001370:	f12ff0ef          	jal	ra,80000a82 <mmu_map>

    return table;
    80001374:	fb043783          	ld	a5,-80(s0)
}
    80001378:	853e                	mv	a0,a5
    8000137a:	60e6                	ld	ra,88(sp)
    8000137c:	6446                	ld	s0,80(sp)
    8000137e:	6125                	addi	sp,sp,96
    80001380:	8082                	ret

0000000080001382 <mmu_virt_to_phys>:

/*
    returns 0 on success.
*/
u64 mmu_virt_to_phys(u64* root, u64 vaddr, u64* paddr)
{
    80001382:	7119                	addi	sp,sp,-128
    80001384:	fc86                	sd	ra,120(sp)
    80001386:	f8a2                	sd	s0,112(sp)
    80001388:	0100                	addi	s0,sp,128
    8000138a:	f8a43c23          	sd	a0,-104(s0)
    8000138e:	f8b43823          	sd	a1,-112(s0)
    80001392:	f8c43423          	sd	a2,-120(s0)
    u64 vpn[3];
    vpn[0] = (vaddr >> 12) & 0x1ff;
    80001396:	f9043783          	ld	a5,-112(s0)
    8000139a:	83b1                	srli	a5,a5,0xc
    8000139c:	1ff7f793          	andi	a5,a5,511
    800013a0:	faf43023          	sd	a5,-96(s0)
    vpn[1] = (vaddr >> 21) & 0x1ff;
    800013a4:	f9043783          	ld	a5,-112(s0)
    800013a8:	83d5                	srli	a5,a5,0x15
    800013aa:	1ff7f793          	andi	a5,a5,511
    800013ae:	faf43423          	sd	a5,-88(s0)
    vpn[2] = (vaddr >> 30) & 0x1ff;
    800013b2:	f9043783          	ld	a5,-112(s0)
    800013b6:	83f9                	srli	a5,a5,0x1e
    800013b8:	1ff7f793          	andi	a5,a5,511
    800013bc:	faf43823          	sd	a5,-80(s0)

    u64* v = root + vpn[2];
    800013c0:	fb043783          	ld	a5,-80(s0)
    800013c4:	078e                	slli	a5,a5,0x3
    800013c6:	f9843703          	ld	a4,-104(s0)
    800013ca:	97ba                	add	a5,a5,a4
    800013cc:	fef43423          	sd	a5,-24(s0)
    for(s64 i = 2; i >= 0; i--)
    800013d0:	4789                	li	a5,2
    800013d2:	fef43023          	sd	a5,-32(s0)
    800013d6:	a0e1                	j	8000149e <mmu_virt_to_phys+0x11c>
    {
        if(!mmu_is_entry_valid(*v))
    800013d8:	fe843783          	ld	a5,-24(s0)
    800013dc:	639c                	ld	a5,0(a5)
    800013de:	853e                	mv	a0,a5
    800013e0:	e62ff0ef          	jal	ra,80000a42 <mmu_is_entry_valid>
    800013e4:	87aa                	mv	a5,a0
    800013e6:	e399                	bnez	a5,800013ec <mmu_virt_to_phys+0x6a>
        { return 1; }
    800013e8:	4785                	li	a5,1
    800013ea:	a87d                	j	800014a8 <mmu_virt_to_phys+0x126>
        else if(mmu_is_entry_leaf(*v))
    800013ec:	fe843783          	ld	a5,-24(s0)
    800013f0:	639c                	ld	a5,0(a5)
    800013f2:	853e                	mv	a0,a5
    800013f4:	e6eff0ef          	jal	ra,80000a62 <mmu_is_entry_leaf>
    800013f8:	87aa                	mv	a5,a0
    800013fa:	c7ad                	beqz	a5,80001464 <mmu_virt_to_phys+0xe2>
        {
            u64 off_mask = (1 << (12 + i * 9)) - 1;
    800013fc:	fe043783          	ld	a5,-32(s0)
    80001400:	2781                	sext.w	a5,a5
    80001402:	873e                	mv	a4,a5
    80001404:	87ba                	mv	a5,a4
    80001406:	0037979b          	slliw	a5,a5,0x3
    8000140a:	9fb9                	addw	a5,a5,a4
    8000140c:	2781                	sext.w	a5,a5
    8000140e:	27b1                	addiw	a5,a5,12
    80001410:	2781                	sext.w	a5,a5
    80001412:	4705                	li	a4,1
    80001414:	00f717bb          	sllw	a5,a4,a5
    80001418:	2781                	sext.w	a5,a5
    8000141a:	37fd                	addiw	a5,a5,-1
    8000141c:	2781                	sext.w	a5,a5
    8000141e:	fcf43823          	sd	a5,-48(s0)
            u64 vaddr_pgoff = vaddr & off_mask;
    80001422:	f9043703          	ld	a4,-112(s0)
    80001426:	fd043783          	ld	a5,-48(s0)
    8000142a:	8ff9                	and	a5,a5,a4
    8000142c:	fcf43423          	sd	a5,-56(s0)
            u64 addr = (*v << 2) & ~off_mask;
    80001430:	fe843783          	ld	a5,-24(s0)
    80001434:	639c                	ld	a5,0(a5)
    80001436:	00279713          	slli	a4,a5,0x2
    8000143a:	fd043783          	ld	a5,-48(s0)
    8000143e:	fff7c793          	not	a5,a5
    80001442:	8ff9                	and	a5,a5,a4
    80001444:	fcf43023          	sd	a5,-64(s0)
            u64 res = addr | vaddr_pgoff;
    80001448:	fc043703          	ld	a4,-64(s0)
    8000144c:	fc843783          	ld	a5,-56(s0)
    80001450:	8fd9                	or	a5,a5,a4
    80001452:	faf43c23          	sd	a5,-72(s0)
            *paddr = res;
    80001456:	f8843783          	ld	a5,-120(s0)
    8000145a:	fb843703          	ld	a4,-72(s0)
    8000145e:	e398                	sd	a4,0(a5)
            return 0;
    80001460:	4781                	li	a5,0
    80001462:	a099                	j	800014a8 <mmu_virt_to_phys+0x126>
        }
        u64* entry = (u64*)((*v & ~0x3ff) << 2);
    80001464:	fe843783          	ld	a5,-24(s0)
    80001468:	639c                	ld	a5,0(a5)
    8000146a:	00279713          	slli	a4,a5,0x2
    8000146e:	77fd                	lui	a5,0xfffff
    80001470:	8ff9                	and	a5,a5,a4
    80001472:	fcf43c23          	sd	a5,-40(s0)
        v = entry + vpn[i - 1];
    80001476:	fe043783          	ld	a5,-32(s0)
    8000147a:	17fd                	addi	a5,a5,-1
    8000147c:	078e                	slli	a5,a5,0x3
    8000147e:	ff040713          	addi	a4,s0,-16
    80001482:	97ba                	add	a5,a5,a4
    80001484:	fb07b783          	ld	a5,-80(a5) # ffffffffffffefb0 <_memory_end+0xffffffff77ffefb0>
    80001488:	078e                	slli	a5,a5,0x3
    8000148a:	fd843703          	ld	a4,-40(s0)
    8000148e:	97ba                	add	a5,a5,a4
    80001490:	fef43423          	sd	a5,-24(s0)
    for(s64 i = 2; i >= 0; i--)
    80001494:	fe043783          	ld	a5,-32(s0)
    80001498:	17fd                	addi	a5,a5,-1
    8000149a:	fef43023          	sd	a5,-32(s0)
    8000149e:	fe043783          	ld	a5,-32(s0)
    800014a2:	f207dbe3          	bgez	a5,800013d8 <mmu_virt_to_phys+0x56>
    }

    return 2;
    800014a6:	4789                	li	a5,2
}
    800014a8:	853e                	mv	a0,a5
    800014aa:	70e6                	ld	ra,120(sp)
    800014ac:	7446                	ld	s0,112(sp)
    800014ae:	6109                	addi	sp,sp,128
    800014b0:	8082                	ret

00000000800014b2 <strlen>:

#include "memory.h"

// --- Lib maybe? ---
u64 strlen(char* str)
{
    800014b2:	7179                	addi	sp,sp,-48
    800014b4:	f422                	sd	s0,40(sp)
    800014b6:	1800                	addi	s0,sp,48
    800014b8:	fca43c23          	sd	a0,-40(s0)
    u64 i = 0;
    800014bc:	fe043423          	sd	zero,-24(s0)
    while(str[i] != 0) { i++; }
    800014c0:	a031                	j	800014cc <strlen+0x1a>
    800014c2:	fe843783          	ld	a5,-24(s0)
    800014c6:	0785                	addi	a5,a5,1
    800014c8:	fef43423          	sd	a5,-24(s0)
    800014cc:	fd843703          	ld	a4,-40(s0)
    800014d0:	fe843783          	ld	a5,-24(s0)
    800014d4:	97ba                	add	a5,a5,a4
    800014d6:	0007c783          	lbu	a5,0(a5)
    800014da:	f7e5                	bnez	a5,800014c2 <strlen+0x10>
    return i;
    800014dc:	fe843783          	ld	a5,-24(s0)
}
    800014e0:	853e                	mv	a0,a5
    800014e2:	7422                	ld	s0,40(sp)
    800014e4:	6145                	addi	sp,sp,48
    800014e6:	8082                	ret

00000000800014e8 <uart_write_string>:

void uart_write_string(char* str)
{
    800014e8:	1101                	addi	sp,sp,-32
    800014ea:	ec06                	sd	ra,24(sp)
    800014ec:	e822                	sd	s0,16(sp)
    800014ee:	1000                	addi	s0,sp,32
    800014f0:	fea43423          	sd	a0,-24(s0)
    uart_write((u8*)str, strlen(str));
    800014f4:	fe843503          	ld	a0,-24(s0)
    800014f8:	fbbff0ef          	jal	ra,800014b2 <strlen>
    800014fc:	87aa                	mv	a5,a0
    800014fe:	85be                	mv	a1,a5
    80001500:	fe843503          	ld	a0,-24(s0)
    80001504:	d6bfe0ef          	jal	ra,8000026e <uart_write>
}
    80001508:	0001                	nop
    8000150a:	60e2                	ld	ra,24(sp)
    8000150c:	6442                	ld	s0,16(sp)
    8000150e:	6105                	addi	sp,sp,32
    80001510:	8082                	ret

0000000080001512 <assert>:

void assert(u64 stat, char* error)
{
    80001512:	1101                	addi	sp,sp,-32
    80001514:	ec06                	sd	ra,24(sp)
    80001516:	e822                	sd	s0,16(sp)
    80001518:	1000                	addi	s0,sp,32
    8000151a:	fea43423          	sd	a0,-24(s0)
    8000151e:	feb43023          	sd	a1,-32(s0)
    if(!stat)
    80001522:	fe843783          	ld	a5,-24(s0)
    80001526:	e395                	bnez	a5,8000154a <assert+0x38>
    {
        uart_write_string("assertion failed: \"");
    80001528:	00003517          	auipc	a0,0x3
    8000152c:	c5850513          	addi	a0,a0,-936 # 80004180 <KERNEL_STACK_END+0x128>
    80001530:	fb9ff0ef          	jal	ra,800014e8 <uart_write_string>
        uart_write_string(error);
    80001534:	fe043503          	ld	a0,-32(s0)
    80001538:	fb1ff0ef          	jal	ra,800014e8 <uart_write_string>
        uart_write_string("\"\n");
    8000153c:	00003517          	auipc	a0,0x3
    80001540:	c5c50513          	addi	a0,a0,-932 # 80004198 <KERNEL_STACK_END+0x140>
    80001544:	fa5ff0ef          	jal	ra,800014e8 <uart_write_string>
        while(1) {};
    80001548:	a001                	j	80001548 <assert+0x36>
    }
}
    8000154a:	0001                	nop
    8000154c:	60e2                	ld	ra,24(sp)
    8000154e:	6442                	ld	s0,16(sp)
    80001550:	6105                	addi	sp,sp,32
    80001552:	8082                	ret

0000000080001554 <kinit>:

u64 KERNEL_MMU_TABLE;

u64 kinit()
{
    80001554:	1101                	addi	sp,sp,-32
    80001556:	ec06                	sd	ra,24(sp)
    80001558:	e822                	sd	s0,16(sp)
    8000155a:	1000                	addi	s0,sp,32
    uart_init();
    8000155c:	c75fe0ef          	jal	ra,800001d0 <uart_init>
    KERNEL_MMU_TABLE = (u64)mem_init();
    80001560:	fe2ff0ef          	jal	ra,80000d42 <mem_init>
    80001564:	87aa                	mv	a5,a0
    80001566:	873e                	mv	a4,a5
    80001568:	00005797          	auipc	a5,0x5
    8000156c:	a9878793          	addi	a5,a5,-1384 # 80006000 <KERNEL_MMU_TABLE>
    80001570:	e398                	sd	a4,0(a5)

    u64 root_ppn = ((u64)KERNEL_MMU_TABLE) >> 12;
    80001572:	00005797          	auipc	a5,0x5
    80001576:	a8e78793          	addi	a5,a5,-1394 # 80006000 <KERNEL_MMU_TABLE>
    8000157a:	639c                	ld	a5,0(a5)
    8000157c:	83b1                	srli	a5,a5,0xc
    8000157e:	fef43423          	sd	a5,-24(s0)
    u64 satp_val = (((u64)8) << 60) | root_ppn;
    80001582:	fe843703          	ld	a4,-24(s0)
    80001586:	57fd                	li	a5,-1
    80001588:	17fe                	slli	a5,a5,0x3f
    8000158a:	8fd9                	or	a5,a5,a4
    8000158c:	fef43023          	sd	a5,-32(s0)

    printf("Entering supervisor mode...");
    80001590:	00003517          	auipc	a0,0x3
    80001594:	c1050513          	addi	a0,a0,-1008 # 800041a0 <KERNEL_STACK_END+0x148>
    80001598:	386020ef          	jal	ra,8000391e <printf_>
    return satp_val;
    8000159c:	fe043783          	ld	a5,-32(s0)
}
    800015a0:	853e                	mv	a0,a5
    800015a2:	60e2                	ld	ra,24(sp)
    800015a4:	6442                	ld	s0,16(sp)
    800015a6:	6105                	addi	sp,sp,32
    800015a8:	8082                	ret

00000000800015aa <kmain>:

void kmain()
{
    800015aa:	711d                	addi	sp,sp,-96
    800015ac:	ec86                	sd	ra,88(sp)
    800015ae:	e8a2                	sd	s0,80(sp)
    800015b0:	1080                	addi	s0,sp,96
    printf("done.\n    Successfully entered kmain with supervisor mode enabled.\n\n");
    800015b2:	00003517          	auipc	a0,0x3
    800015b6:	c0e50513          	addi	a0,a0,-1010 # 800041c0 <KERNEL_STACK_END+0x168>
    800015ba:	364020ef          	jal	ra,8000391e <printf_>
    uart_write_string("Hello there, welcome to the ROS operating system\nYou have no idea the pain I went through to make these characters you type appear on screen\n\n");
    800015be:	00003517          	auipc	a0,0x3
    800015c2:	c4a50513          	addi	a0,a0,-950 # 80004208 <KERNEL_STACK_END+0x1b0>
    800015c6:	f23ff0ef          	jal	ra,800014e8 <uart_write_string>

Kallocation a1 = kalloc_pages(65);
    800015ca:	04100513          	li	a0,65
    800015ce:	914ff0ef          	jal	ra,800006e2 <kalloc_pages>
    800015d2:	872a                	mv	a4,a0
    800015d4:	87ae                	mv	a5,a1
    800015d6:	fae43c23          	sd	a4,-72(s0)
    800015da:	fcf43023          	sd	a5,-64(s0)
void* memory = kalloc_single_page();
    800015de:	c04ff0ef          	jal	ra,800009e2 <kalloc_single_page>
    800015e2:	fea43023          	sd	a0,-32(s0)

kfree_pages(a1);
    800015e6:	fb843503          	ld	a0,-72(s0)
    800015ea:	fc043583          	ld	a1,-64(s0)
    800015ee:	b7eff0ef          	jal	ra,8000096c <kfree_pages>

float f = 0.4;
    800015f2:	00003797          	auipc	a5,0x3
    800015f6:	28e78793          	addi	a5,a5,654 # 80004880 <KERNEL_STACK_END+0x828>
    800015fa:	0007a787          	flw	fa5,0(a5)
    800015fe:	fcf42e27          	fsw	fa5,-36(s0)
printf("%f + 4.2 = %f\n", f, f + 4.2);
    80001602:	fdc42787          	flw	fa5,-36(s0)
    80001606:	420786d3          	fcvt.d.s	fa3,fa5
    8000160a:	fdc42787          	flw	fa5,-36(s0)
    8000160e:	42078753          	fcvt.d.s	fa4,fa5
    80001612:	00003797          	auipc	a5,0x3
    80001616:	27678793          	addi	a5,a5,630 # 80004888 <KERNEL_STACK_END+0x830>
    8000161a:	239c                	fld	fa5,0(a5)
    8000161c:	02f777d3          	fadd.d	fa5,fa4,fa5
    80001620:	e2078653          	fmv.x.d	a2,fa5
    80001624:	e20685d3          	fmv.x.d	a1,fa3
    80001628:	00003517          	auipc	a0,0x3
    8000162c:	c7050513          	addi	a0,a0,-912 # 80004298 <KERNEL_STACK_END+0x240>
    80001630:	2ee020ef          	jal	ra,8000391e <printf_>


char* dave = "davey";
    80001634:	00003797          	auipc	a5,0x3
    80001638:	c7478793          	addi	a5,a5,-908 # 800042a8 <KERNEL_STACK_END+0x250>
    8000163c:	fcf43823          	sd	a5,-48(s0)
printf("writing to readonly memory: %p\n", dave +2);
    80001640:	fd043783          	ld	a5,-48(s0)
    80001644:	0789                	addi	a5,a5,2
    80001646:	85be                	mv	a1,a5
    80001648:	00003517          	auipc	a0,0x3
    8000164c:	c6850513          	addi	a0,a0,-920 # 800042b0 <KERNEL_STACK_END+0x258>
    80001650:	2ce020ef          	jal	ra,8000391e <printf_>
dave[2] = 'p';
    80001654:	fd043783          	ld	a5,-48(s0)
    80001658:	0789                	addi	a5,a5,2
    8000165a:	07000713          	li	a4,112
    8000165e:	00e78023          	sb	a4,0(a5)
printf("%s\n", dave);
    80001662:	fd043583          	ld	a1,-48(s0)
    80001666:	00003517          	auipc	a0,0x3
    8000166a:	c6a50513          	addi	a0,a0,-918 # 800042d0 <KERNEL_STACK_END+0x278>
    8000166e:	2b0020ef          	jal	ra,8000391e <printf_>

kfree_single_page(memory);
    80001672:	fe043503          	ld	a0,-32(s0)
    80001676:	b94ff0ef          	jal	ra,80000a0a <kfree_single_page>

uart_write_string("finished doing mem test\n");
    8000167a:	00003517          	auipc	a0,0x3
    8000167e:	c5e50513          	addi	a0,a0,-930 # 800042d8 <KERNEL_STACK_END+0x280>
    80001682:	e67ff0ef          	jal	ra,800014e8 <uart_write_string>

u64* table = kalloc_single_page();
    80001686:	b5cff0ef          	jal	ra,800009e2 <kalloc_single_page>
    8000168a:	fca43423          	sd	a0,-56(s0)

mmu_map(table, 401*4096, 20012*4096, 2+4, 0);
    8000168e:	4701                	li	a4,0
    80001690:	4699                	li	a3,6
    80001692:	04e2c637          	lui	a2,0x4e2c
    80001696:	001915b7          	lui	a1,0x191
    8000169a:	fc843503          	ld	a0,-56(s0)
    8000169e:	be4ff0ef          	jal	ra,80000a82 <mmu_map>
mmu_map(table, 403*4096, 212*4096, 2+4, 0);
    800016a2:	4701                	li	a4,0
    800016a4:	4699                	li	a3,6
    800016a6:	000d4637          	lui	a2,0xd4
    800016aa:	001935b7          	lui	a1,0x193
    800016ae:	fc843503          	ld	a0,-56(s0)
    800016b2:	bd0ff0ef          	jal	ra,80000a82 <mmu_map>

mmu_map(table, 520*4096, 51200000*4096, 2+4, 1);
    800016b6:	4705                	li	a4,1
    800016b8:	4699                	li	a3,6
    800016ba:	d4000637          	lui	a2,0xd4000
    800016be:	002085b7          	lui	a1,0x208
    800016c2:	fc843503          	ld	a0,-56(s0)
    800016c6:	bbcff0ef          	jal	ra,80000a82 <mmu_map>

u64 physical = 0;
    800016ca:	fa043823          	sd	zero,-80(s0)
//assert(mmu_virt_to_phys(table, 400*4096, &physical) == 0, "invalid virtual address");

for(u64 i = 799; i < 1100; i++)
    800016ce:	31f00793          	li	a5,799
    800016d2:	fef43423          	sd	a5,-24(s0)
    800016d6:	a0b9                	j	80001724 <kmain+0x17a>
{
    if(mmu_virt_to_phys(table, i << 11, &physical) == 0)
    800016d8:	fe843783          	ld	a5,-24(s0)
    800016dc:	07ae                	slli	a5,a5,0xb
    800016de:	fb040713          	addi	a4,s0,-80
    800016e2:	863a                	mv	a2,a4
    800016e4:	85be                	mv	a1,a5
    800016e6:	fc843503          	ld	a0,-56(s0)
    800016ea:	c99ff0ef          	jal	ra,80001382 <mmu_virt_to_phys>
    800016ee:	87aa                	mv	a5,a0
    800016f0:	ef99                	bnez	a5,8000170e <kmain+0x164>
    { printf("%p -> %p\n", i << 11, physical); }
    800016f2:	fe843783          	ld	a5,-24(s0)
    800016f6:	07ae                	slli	a5,a5,0xb
    800016f8:	fb043703          	ld	a4,-80(s0)
    800016fc:	863a                	mv	a2,a4
    800016fe:	85be                	mv	a1,a5
    80001700:	00003517          	auipc	a0,0x3
    80001704:	bf850513          	addi	a0,a0,-1032 # 800042f8 <KERNEL_STACK_END+0x2a0>
    80001708:	216020ef          	jal	ra,8000391e <printf_>
    8000170c:	a039                	j	8000171a <kmain+0x170>
    else
    { printf("segv"); }
    8000170e:	00003517          	auipc	a0,0x3
    80001712:	bfa50513          	addi	a0,a0,-1030 # 80004308 <KERNEL_STACK_END+0x2b0>
    80001716:	208020ef          	jal	ra,8000391e <printf_>
for(u64 i = 799; i < 1100; i++)
    8000171a:	fe843783          	ld	a5,-24(s0)
    8000171e:	0785                	addi	a5,a5,1
    80001720:	fef43423          	sd	a5,-24(s0)
    80001724:	fe843703          	ld	a4,-24(s0)
    80001728:	44b00793          	li	a5,1099
    8000172c:	fae7f6e3          	bgeu	a5,a4,800016d8 <kmain+0x12e>
}

mmu_unmap(table);
    80001730:	fc843503          	ld	a0,-56(s0)
    80001734:	d3aff0ef          	jal	ra,80000c6e <mmu_unmap>
        uart_write_string("\n");
    }
*/
    while(1)
    {
        u8 r = 0;
    80001738:	fa0407a3          	sb	zero,-81(s0)
        if(uart_read(&r, 1) == 1)
    8000173c:	faf40793          	addi	a5,s0,-81
    80001740:	4585                	li	a1,1
    80001742:	853e                	mv	a0,a5
    80001744:	b75fe0ef          	jal	ra,800002b8 <uart_read>
    80001748:	872a                	mv	a4,a0
    8000174a:	4785                	li	a5,1
    8000174c:	fef716e3          	bne	a4,a5,80001738 <kmain+0x18e>
        {
            uart_write(&r, 1);
    80001750:	faf40793          	addi	a5,s0,-81
    80001754:	4585                	li	a1,1
    80001756:	853e                	mv	a0,a5
    80001758:	b17fe0ef          	jal	ra,8000026e <uart_write>
    {
    8000175c:	bff1                	j	80001738 <kmain+0x18e>

000000008000175e <kinit_hart>:
        }
    }
}

void kinit_hart(u64 hartid)
{
    8000175e:	1101                	addi	sp,sp,-32
    80001760:	ec22                	sd	s0,24(sp)
    80001762:	1000                	addi	s0,sp,32
    80001764:	fea43423          	sd	a0,-24(s0)

}
    80001768:	0001                	nop
    8000176a:	6462                	ld	s0,24(sp)
    8000176c:	6105                	addi	sp,sp,32
    8000176e:	8082                	ret

0000000080001770 <m_trap>:
    u64 cause,
    u64 hart,
    u64 status,
    struct TrapFrame* frame
    )
{
    80001770:	7159                	addi	sp,sp,-112
    80001772:	f486                	sd	ra,104(sp)
    80001774:	f0a2                	sd	s0,96(sp)
    80001776:	1880                	addi	s0,sp,112
    80001778:	faa43c23          	sd	a0,-72(s0)
    8000177c:	fab43823          	sd	a1,-80(s0)
    80001780:	fac43423          	sd	a2,-88(s0)
    80001784:	fad43023          	sd	a3,-96(s0)
    80001788:	f8e43c23          	sd	a4,-104(s0)
    8000178c:	f8f43823          	sd	a5,-112(s0)
    printf("args:\n  epc: %x\n  tval: %x\n  cause: %x\n  hart: %x\n  status: %x\n  frame: %x\n",
    80001790:	f9043803          	ld	a6,-112(s0)
    80001794:	f9843783          	ld	a5,-104(s0)
    80001798:	fa043703          	ld	a4,-96(s0)
    8000179c:	fa843683          	ld	a3,-88(s0)
    800017a0:	fb043603          	ld	a2,-80(s0)
    800017a4:	fb843583          	ld	a1,-72(s0)
    800017a8:	00003517          	auipc	a0,0x3
    800017ac:	b6850513          	addi	a0,a0,-1176 # 80004310 <KERNEL_STACK_END+0x2b8>
    800017b0:	16e020ef          	jal	ra,8000391e <printf_>
            epc, tval, cause, hart, status, frame);
    printf("frame:\n regs:\n");
    800017b4:	00003517          	auipc	a0,0x3
    800017b8:	bac50513          	addi	a0,a0,-1108 # 80004360 <KERNEL_STACK_END+0x308>
    800017bc:	162020ef          	jal	ra,8000391e <printf_>
    for(u64 i = 0; i < 32; i++) { printf("  x%lld: %lx\n", i, frame->regs[i]); }
    800017c0:	fe043423          	sd	zero,-24(s0)
    800017c4:	a035                	j	800017f0 <m_trap+0x80>
    800017c6:	f9043703          	ld	a4,-112(s0)
    800017ca:	fe843783          	ld	a5,-24(s0)
    800017ce:	078e                	slli	a5,a5,0x3
    800017d0:	97ba                	add	a5,a5,a4
    800017d2:	639c                	ld	a5,0(a5)
    800017d4:	863e                	mv	a2,a5
    800017d6:	fe843583          	ld	a1,-24(s0)
    800017da:	00003517          	auipc	a0,0x3
    800017de:	b9650513          	addi	a0,a0,-1130 # 80004370 <KERNEL_STACK_END+0x318>
    800017e2:	13c020ef          	jal	ra,8000391e <printf_>
    800017e6:	fe843783          	ld	a5,-24(s0)
    800017ea:	0785                	addi	a5,a5,1
    800017ec:	fef43423          	sd	a5,-24(s0)
    800017f0:	fe843703          	ld	a4,-24(s0)
    800017f4:	47fd                	li	a5,31
    800017f6:	fce7f8e3          	bgeu	a5,a4,800017c6 <m_trap+0x56>
    printf(" fregs:\n");
    800017fa:	00003517          	auipc	a0,0x3
    800017fe:	b8650513          	addi	a0,a0,-1146 # 80004380 <KERNEL_STACK_END+0x328>
    80001802:	11c020ef          	jal	ra,8000391e <printf_>
    for(u64 i = 0; i < 32; i++) { printf("  f%lld: %lx\n", i, frame->fregs[i]); }
    80001806:	fe043023          	sd	zero,-32(s0)
    8000180a:	a805                	j	8000183a <m_trap+0xca>
    8000180c:	f9043703          	ld	a4,-112(s0)
    80001810:	fe043783          	ld	a5,-32(s0)
    80001814:	02078793          	addi	a5,a5,32
    80001818:	078e                	slli	a5,a5,0x3
    8000181a:	97ba                	add	a5,a5,a4
    8000181c:	639c                	ld	a5,0(a5)
    8000181e:	863e                	mv	a2,a5
    80001820:	fe043583          	ld	a1,-32(s0)
    80001824:	00003517          	auipc	a0,0x3
    80001828:	b6c50513          	addi	a0,a0,-1172 # 80004390 <KERNEL_STACK_END+0x338>
    8000182c:	0f2020ef          	jal	ra,8000391e <printf_>
    80001830:	fe043783          	ld	a5,-32(s0)
    80001834:	0785                	addi	a5,a5,1
    80001836:	fef43023          	sd	a5,-32(s0)
    8000183a:	fe043703          	ld	a4,-32(s0)
    8000183e:	47fd                	li	a5,31
    80001840:	fce7f6e3          	bgeu	a5,a4,8000180c <m_trap+0x9c>
    printf(" satp: %lx, trap_stack: %lx, hartid %lld\n", frame->satp, frame->trap_stack, frame->hartid);
    80001844:	f9043783          	ld	a5,-112(s0)
    80001848:	2007b703          	ld	a4,512(a5)
    8000184c:	f9043783          	ld	a5,-112(s0)
    80001850:	2087b603          	ld	a2,520(a5)
    80001854:	f9043783          	ld	a5,-112(s0)
    80001858:	2107b783          	ld	a5,528(a5)
    8000185c:	86be                	mv	a3,a5
    8000185e:	85ba                	mv	a1,a4
    80001860:	00003517          	auipc	a0,0x3
    80001864:	b4050513          	addi	a0,a0,-1216 # 800043a0 <KERNEL_STACK_END+0x348>
    80001868:	0b6020ef          	jal	ra,8000391e <printf_>

    u64 async = (cause >> 63) & 1 == 1;
    8000186c:	fa843783          	ld	a5,-88(s0)
    80001870:	93fd                	srli	a5,a5,0x3f
    80001872:	fcf43c23          	sd	a5,-40(s0)
    u64 cause_num = cause & 0xfff;
    80001876:	fa843703          	ld	a4,-88(s0)
    8000187a:	6785                	lui	a5,0x1
    8000187c:	17fd                	addi	a5,a5,-1
    8000187e:	8ff9                	and	a5,a5,a4
    80001880:	fcf43823          	sd	a5,-48(s0)
    u64 return_pc = epc;
    80001884:	fb843783          	ld	a5,-72(s0)
    80001888:	fcf43423          	sd	a5,-56(s0)

    if(async)
    8000188c:	fd843783          	ld	a5,-40(s0)
    80001890:	0e078e63          	beqz	a5,8000198c <m_trap+0x21c>
    {
             if(cause_num == 0) {
    80001894:	fd043783          	ld	a5,-48(s0)
    80001898:	eb91                	bnez	a5,800018ac <m_trap+0x13c>
                printf("User software interrupt CPU%lld\n", hart);
    8000189a:	fa043583          	ld	a1,-96(s0)
    8000189e:	00003517          	auipc	a0,0x3
    800018a2:	b3250513          	addi	a0,a0,-1230 # 800043d0 <KERNEL_STACK_END+0x378>
    800018a6:	078020ef          	jal	ra,8000391e <printf_>
    800018aa:	a4d1                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 1) {
    800018ac:	fd043703          	ld	a4,-48(s0)
    800018b0:	4785                	li	a5,1
    800018b2:	00f71b63          	bne	a4,a5,800018c8 <m_trap+0x158>
                printf("Supervisor software interrupt CPU%lld\n", hart);
    800018b6:	fa043583          	ld	a1,-96(s0)
    800018ba:	00003517          	auipc	a0,0x3
    800018be:	b3e50513          	addi	a0,a0,-1218 # 800043f8 <KERNEL_STACK_END+0x3a0>
    800018c2:	05c020ef          	jal	ra,8000391e <printf_>
    800018c6:	a465                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 3) {
    800018c8:	fd043703          	ld	a4,-48(s0)
    800018cc:	478d                	li	a5,3
    800018ce:	00f71b63          	bne	a4,a5,800018e4 <m_trap+0x174>
                printf("Machine software interrupt CPU%lld\n", hart);
    800018d2:	fa043583          	ld	a1,-96(s0)
    800018d6:	00003517          	auipc	a0,0x3
    800018da:	b4a50513          	addi	a0,a0,-1206 # 80004420 <KERNEL_STACK_END+0x3c8>
    800018de:	040020ef          	jal	ra,8000391e <printf_>
    800018e2:	a471                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 4) {
    800018e4:	fd043703          	ld	a4,-48(s0)
    800018e8:	4791                	li	a5,4
    800018ea:	00f71b63          	bne	a4,a5,80001900 <m_trap+0x190>
                printf("User timer interrupt CPU%lld\n", hart);
    800018ee:	fa043583          	ld	a1,-96(s0)
    800018f2:	00003517          	auipc	a0,0x3
    800018f6:	b5650513          	addi	a0,a0,-1194 # 80004448 <KERNEL_STACK_END+0x3f0>
    800018fa:	024020ef          	jal	ra,8000391e <printf_>
    800018fe:	ac85                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 5) {
    80001900:	fd043703          	ld	a4,-48(s0)
    80001904:	4795                	li	a5,5
    80001906:	00f71b63          	bne	a4,a5,8000191c <m_trap+0x1ac>
                printf("Supervisor timer interrupt CPU%lld\n", hart);
    8000190a:	fa043583          	ld	a1,-96(s0)
    8000190e:	00003517          	auipc	a0,0x3
    80001912:	b5a50513          	addi	a0,a0,-1190 # 80004468 <KERNEL_STACK_END+0x410>
    80001916:	008020ef          	jal	ra,8000391e <printf_>
    8000191a:	ac91                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 7) {
    8000191c:	fd043703          	ld	a4,-48(s0)
    80001920:	479d                	li	a5,7
    80001922:	00f71b63          	bne	a4,a5,80001938 <m_trap+0x1c8>
                printf("Machine timer interrupt CPU%lld\n", hart);
    80001926:	fa043583          	ld	a1,-96(s0)
    8000192a:	00003517          	auipc	a0,0x3
    8000192e:	b6650513          	addi	a0,a0,-1178 # 80004490 <KERNEL_STACK_END+0x438>
    80001932:	7ed010ef          	jal	ra,8000391e <printf_>
    80001936:	ac25                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 8) {
    80001938:	fd043703          	ld	a4,-48(s0)
    8000193c:	47a1                	li	a5,8
    8000193e:	00f71b63          	bne	a4,a5,80001954 <m_trap+0x1e4>
                printf("User external interrupt CPU%lld\n", hart);
    80001942:	fa043583          	ld	a1,-96(s0)
    80001946:	00003517          	auipc	a0,0x3
    8000194a:	b7250513          	addi	a0,a0,-1166 # 800044b8 <KERNEL_STACK_END+0x460>
    8000194e:	7d1010ef          	jal	ra,8000391e <printf_>
    80001952:	ac31                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 9) {
    80001954:	fd043703          	ld	a4,-48(s0)
    80001958:	47a5                	li	a5,9
    8000195a:	00f71b63          	bne	a4,a5,80001970 <m_trap+0x200>
                printf("Supervisor external interrupt CPU%lld\n", hart);
    8000195e:	fa043583          	ld	a1,-96(s0)
    80001962:	00003517          	auipc	a0,0x3
    80001966:	b7e50513          	addi	a0,a0,-1154 # 800044e0 <KERNEL_STACK_END+0x488>
    8000196a:	7b5010ef          	jal	ra,8000391e <printf_>
    8000196e:	a401                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 11) {
    80001970:	fd043703          	ld	a4,-48(s0)
    80001974:	47ad                	li	a5,11
    80001976:	1ef71c63          	bne	a4,a5,80001b6e <m_trap+0x3fe>
                printf("Machine external interrupt CPU%lld\n", hart);
    8000197a:	fa043583          	ld	a1,-96(s0)
    8000197e:	00003517          	auipc	a0,0x3
    80001982:	b8a50513          	addi	a0,a0,-1142 # 80004508 <KERNEL_STACK_END+0x4b0>
    80001986:	799010ef          	jal	ra,8000391e <printf_>
    8000198a:	a2d5                	j	80001b6e <m_trap+0x3fe>
        }
    }
    else
    {
             if(cause_num == 0) {
    8000198c:	fd043783          	ld	a5,-48(s0)
    80001990:	ef91                	bnez	a5,800019ac <m_trap+0x23c>
                printf("Interrupt: Instruction address misaligned CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001992:	fb043683          	ld	a3,-80(s0)
    80001996:	fb843603          	ld	a2,-72(s0)
    8000199a:	fa043583          	ld	a1,-96(s0)
    8000199e:	00003517          	auipc	a0,0x3
    800019a2:	b9250513          	addi	a0,a0,-1134 # 80004530 <KERNEL_STACK_END+0x4d8>
    800019a6:	779010ef          	jal	ra,8000391e <printf_>
    800019aa:	a2d1                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 1) {
    800019ac:	fd043703          	ld	a4,-48(s0)
    800019b0:	4785                	li	a5,1
    800019b2:	00f71f63          	bne	a4,a5,800019d0 <m_trap+0x260>
                printf("Interrupt: Instruction access fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    800019b6:	fb043683          	ld	a3,-80(s0)
    800019ba:	fb843603          	ld	a2,-72(s0)
    800019be:	fa043583          	ld	a1,-96(s0)
    800019c2:	00003517          	auipc	a0,0x3
    800019c6:	bb650513          	addi	a0,a0,-1098 # 80004578 <KERNEL_STACK_END+0x520>
    800019ca:	755010ef          	jal	ra,8000391e <printf_>
    800019ce:	a245                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 2) {
    800019d0:	fd043703          	ld	a4,-48(s0)
    800019d4:	4789                	li	a5,2
    800019d6:	00f71f63          	bne	a4,a5,800019f4 <m_trap+0x284>
                printf("Interrupt: Illegal instruction CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    800019da:	fb043683          	ld	a3,-80(s0)
    800019de:	fb843603          	ld	a2,-72(s0)
    800019e2:	fa043583          	ld	a1,-96(s0)
    800019e6:	00003517          	auipc	a0,0x3
    800019ea:	bd250513          	addi	a0,a0,-1070 # 800045b8 <KERNEL_STACK_END+0x560>
    800019ee:	731010ef          	jal	ra,8000391e <printf_>
    800019f2:	aab5                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 3) {
    800019f4:	fd043703          	ld	a4,-48(s0)
    800019f8:	478d                	li	a5,3
    800019fa:	00f71d63          	bne	a4,a5,80001a14 <m_trap+0x2a4>
                printf("Interrupt: Breakpoint CPU%lld -> 0x%x\n", hart, epc);
    800019fe:	fb843603          	ld	a2,-72(s0)
    80001a02:	fa043583          	ld	a1,-96(s0)
    80001a06:	00003517          	auipc	a0,0x3
    80001a0a:	bea50513          	addi	a0,a0,-1046 # 800045f0 <KERNEL_STACK_END+0x598>
    80001a0e:	711010ef          	jal	ra,8000391e <printf_>
    80001a12:	aab1                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 4) {
    80001a14:	fd043703          	ld	a4,-48(s0)
    80001a18:	4791                	li	a5,4
    80001a1a:	00f71f63          	bne	a4,a5,80001a38 <m_trap+0x2c8>
                printf("Interrupt: Load access misaligned CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001a1e:	fb043683          	ld	a3,-80(s0)
    80001a22:	fb843603          	ld	a2,-72(s0)
    80001a26:	fa043583          	ld	a1,-96(s0)
    80001a2a:	00003517          	auipc	a0,0x3
    80001a2e:	bee50513          	addi	a0,a0,-1042 # 80004618 <KERNEL_STACK_END+0x5c0>
    80001a32:	6ed010ef          	jal	ra,8000391e <printf_>
    80001a36:	aa25                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 5) {
    80001a38:	fd043703          	ld	a4,-48(s0)
    80001a3c:	4795                	li	a5,5
    80001a3e:	00f71f63          	bne	a4,a5,80001a5c <m_trap+0x2ec>
                printf("Interrupt: Load access fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001a42:	fb043683          	ld	a3,-80(s0)
    80001a46:	fb843603          	ld	a2,-72(s0)
    80001a4a:	fa043583          	ld	a1,-96(s0)
    80001a4e:	00003517          	auipc	a0,0x3
    80001a52:	c0a50513          	addi	a0,a0,-1014 # 80004658 <KERNEL_STACK_END+0x600>
    80001a56:	6c9010ef          	jal	ra,8000391e <printf_>
    80001a5a:	aa11                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 6) {
    80001a5c:	fd043703          	ld	a4,-48(s0)
    80001a60:	4799                	li	a5,6
    80001a62:	00f71f63          	bne	a4,a5,80001a80 <m_trap+0x310>
                printf("Interrupt: Store/AMO address misaligned CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001a66:	fb043683          	ld	a3,-80(s0)
    80001a6a:	fb843603          	ld	a2,-72(s0)
    80001a6e:	fa043583          	ld	a1,-96(s0)
    80001a72:	00003517          	auipc	a0,0x3
    80001a76:	c1e50513          	addi	a0,a0,-994 # 80004690 <KERNEL_STACK_END+0x638>
    80001a7a:	6a5010ef          	jal	ra,8000391e <printf_>
    80001a7e:	a8c5                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 7) {
    80001a80:	fd043703          	ld	a4,-48(s0)
    80001a84:	479d                	li	a5,7
    80001a86:	00f71f63          	bne	a4,a5,80001aa4 <m_trap+0x334>
                printf("Interrupt: Store/AMO access fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001a8a:	fb043683          	ld	a3,-80(s0)
    80001a8e:	fb843603          	ld	a2,-72(s0)
    80001a92:	fa043583          	ld	a1,-96(s0)
    80001a96:	00003517          	auipc	a0,0x3
    80001a9a:	c3a50513          	addi	a0,a0,-966 # 800046d0 <KERNEL_STACK_END+0x678>
    80001a9e:	681010ef          	jal	ra,8000391e <printf_>
    80001aa2:	a0f1                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 8) {
    80001aa4:	fd043703          	ld	a4,-48(s0)
    80001aa8:	47a1                	li	a5,8
    80001aaa:	00f71d63          	bne	a4,a5,80001ac4 <m_trap+0x354>
                printf("Interrupt: Environment call from U-mode CPU%lld -> 0x%x\n", hart, epc);
    80001aae:	fb843603          	ld	a2,-72(s0)
    80001ab2:	fa043583          	ld	a1,-96(s0)
    80001ab6:	00003517          	auipc	a0,0x3
    80001aba:	c5a50513          	addi	a0,a0,-934 # 80004710 <KERNEL_STACK_END+0x6b8>
    80001abe:	661010ef          	jal	ra,8000391e <printf_>
    80001ac2:	a075                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 9) {
    80001ac4:	fd043703          	ld	a4,-48(s0)
    80001ac8:	47a5                	li	a5,9
    80001aca:	00f71d63          	bne	a4,a5,80001ae4 <m_trap+0x374>
                printf("Interrupt: Environment call from S-mode CPU%lld -> 0x%x\n", hart, epc);
    80001ace:	fb843603          	ld	a2,-72(s0)
    80001ad2:	fa043583          	ld	a1,-96(s0)
    80001ad6:	00003517          	auipc	a0,0x3
    80001ada:	c7a50513          	addi	a0,a0,-902 # 80004750 <KERNEL_STACK_END+0x6f8>
    80001ade:	641010ef          	jal	ra,8000391e <printf_>
    80001ae2:	a071                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 11) {
    80001ae4:	fd043703          	ld	a4,-48(s0)
    80001ae8:	47ad                	li	a5,11
    80001aea:	00f71d63          	bne	a4,a5,80001b04 <m_trap+0x394>
                printf("Interrupt: Environment call from M-mode CPU%lld -> 0x%x\n", hart, epc);
    80001aee:	fb843603          	ld	a2,-72(s0)
    80001af2:	fa043583          	ld	a1,-96(s0)
    80001af6:	00003517          	auipc	a0,0x3
    80001afa:	c9a50513          	addi	a0,a0,-870 # 80004790 <KERNEL_STACK_END+0x738>
    80001afe:	621010ef          	jal	ra,8000391e <printf_>
    80001b02:	a0b5                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 12) {
    80001b04:	fd043703          	ld	a4,-48(s0)
    80001b08:	47b1                	li	a5,12
    80001b0a:	00f71f63          	bne	a4,a5,80001b28 <m_trap+0x3b8>
                printf("Interrupt: Instruction page fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001b0e:	fb043683          	ld	a3,-80(s0)
    80001b12:	fb843603          	ld	a2,-72(s0)
    80001b16:	fa043583          	ld	a1,-96(s0)
    80001b1a:	00003517          	auipc	a0,0x3
    80001b1e:	cb650513          	addi	a0,a0,-842 # 800047d0 <KERNEL_STACK_END+0x778>
    80001b22:	5fd010ef          	jal	ra,8000391e <printf_>
    80001b26:	a0a1                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 13) {
    80001b28:	fd043703          	ld	a4,-48(s0)
    80001b2c:	47b5                	li	a5,13
    80001b2e:	00f71f63          	bne	a4,a5,80001b4c <m_trap+0x3dc>
                printf("Interrupt: Load page fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001b32:	fb043683          	ld	a3,-80(s0)
    80001b36:	fb843603          	ld	a2,-72(s0)
    80001b3a:	fa043583          	ld	a1,-96(s0)
    80001b3e:	00003517          	auipc	a0,0x3
    80001b42:	cd250513          	addi	a0,a0,-814 # 80004810 <KERNEL_STACK_END+0x7b8>
    80001b46:	5d9010ef          	jal	ra,8000391e <printf_>
    80001b4a:	a015                	j	80001b6e <m_trap+0x3fe>
        }
        else if(cause_num == 15) {
    80001b4c:	fd043703          	ld	a4,-48(s0)
    80001b50:	47bd                	li	a5,15
    80001b52:	00f71e63          	bne	a4,a5,80001b6e <m_trap+0x3fe>
                printf("Interrupt: Store/AMO page fault CPU%lld -> 0x%x: 0x%x\n", hart, epc, tval);
    80001b56:	fb043683          	ld	a3,-80(s0)
    80001b5a:	fb843603          	ld	a2,-72(s0)
    80001b5e:	fa043583          	ld	a1,-96(s0)
    80001b62:	00003517          	auipc	a0,0x3
    80001b66:	ce650513          	addi	a0,a0,-794 # 80004848 <KERNEL_STACK_END+0x7f0>
    80001b6a:	5b5010ef          	jal	ra,8000391e <printf_>
        }
    }

    while(1) {}
    80001b6e:	a001                	j	80001b6e <m_trap+0x3fe>

0000000080001b70 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    80001b70:	7179                	addi	sp,sp,-48
    80001b72:	f422                	sd	s0,40(sp)
    80001b74:	1800                	addi	s0,sp,48
    80001b76:	87aa                	mv	a5,a0
    80001b78:	feb43023          	sd	a1,-32(s0)
    80001b7c:	fcc43c23          	sd	a2,-40(s0)
    80001b80:	fcd43823          	sd	a3,-48(s0)
    80001b84:	fef407a3          	sb	a5,-17(s0)
  if (idx < maxlen) {
    80001b88:	fd843703          	ld	a4,-40(s0)
    80001b8c:	fd043783          	ld	a5,-48(s0)
    80001b90:	00f77b63          	bgeu	a4,a5,80001ba6 <_out_buffer+0x36>
    ((char*)buffer)[idx] = character;
    80001b94:	fe043703          	ld	a4,-32(s0)
    80001b98:	fd843783          	ld	a5,-40(s0)
    80001b9c:	97ba                	add	a5,a5,a4
    80001b9e:	fef44703          	lbu	a4,-17(s0)
    80001ba2:	00e78023          	sb	a4,0(a5) # 1000 <NUM_FP_REGS+0xfe0>
  }
}
    80001ba6:	0001                	nop
    80001ba8:	7422                	ld	s0,40(sp)
    80001baa:	6145                	addi	sp,sp,48
    80001bac:	8082                	ret

0000000080001bae <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    80001bae:	7179                	addi	sp,sp,-48
    80001bb0:	f422                	sd	s0,40(sp)
    80001bb2:	1800                	addi	s0,sp,48
    80001bb4:	87aa                	mv	a5,a0
    80001bb6:	feb43023          	sd	a1,-32(s0)
    80001bba:	fcc43c23          	sd	a2,-40(s0)
    80001bbe:	fcd43823          	sd	a3,-48(s0)
    80001bc2:	fef407a3          	sb	a5,-17(s0)
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    80001bc6:	0001                	nop
    80001bc8:	7422                	ld	s0,40(sp)
    80001bca:	6145                	addi	sp,sp,48
    80001bcc:	8082                	ret

0000000080001bce <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    80001bce:	7179                	addi	sp,sp,-48
    80001bd0:	f406                	sd	ra,40(sp)
    80001bd2:	f022                	sd	s0,32(sp)
    80001bd4:	1800                	addi	s0,sp,48
    80001bd6:	87aa                	mv	a5,a0
    80001bd8:	feb43023          	sd	a1,-32(s0)
    80001bdc:	fcc43c23          	sd	a2,-40(s0)
    80001be0:	fcd43823          	sd	a3,-48(s0)
    80001be4:	fef407a3          	sb	a5,-17(s0)
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    80001be8:	fef44783          	lbu	a5,-17(s0)
    80001bec:	0ff7f793          	andi	a5,a5,255
    80001bf0:	c791                	beqz	a5,80001bfc <_out_char+0x2e>
    _putchar(character);
    80001bf2:	fef44783          	lbu	a5,-17(s0)
    80001bf6:	853e                	mv	a0,a5
    80001bf8:	f24fe0ef          	jal	ra,8000031c <_putchar>
  }
}
    80001bfc:	0001                	nop
    80001bfe:	70a2                	ld	ra,40(sp)
    80001c00:	7402                	ld	s0,32(sp)
    80001c02:	6145                	addi	sp,sp,48
    80001c04:	8082                	ret

0000000080001c06 <_out_fct>:


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
    80001c06:	7179                	addi	sp,sp,-48
    80001c08:	f406                	sd	ra,40(sp)
    80001c0a:	f022                	sd	s0,32(sp)
    80001c0c:	1800                	addi	s0,sp,48
    80001c0e:	87aa                	mv	a5,a0
    80001c10:	feb43023          	sd	a1,-32(s0)
    80001c14:	fcc43c23          	sd	a2,-40(s0)
    80001c18:	fcd43823          	sd	a3,-48(s0)
    80001c1c:	fef407a3          	sb	a5,-17(s0)
  (void)idx; (void)maxlen;
  if (character) {
    80001c20:	fef44783          	lbu	a5,-17(s0)
    80001c24:	0ff7f793          	andi	a5,a5,255
    80001c28:	cf81                	beqz	a5,80001c40 <_out_fct+0x3a>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    80001c2a:	fe043783          	ld	a5,-32(s0)
    80001c2e:	6394                	ld	a3,0(a5)
    80001c30:	fe043783          	ld	a5,-32(s0)
    80001c34:	6798                	ld	a4,8(a5)
    80001c36:	fef44783          	lbu	a5,-17(s0)
    80001c3a:	85ba                	mv	a1,a4
    80001c3c:	853e                	mv	a0,a5
    80001c3e:	9682                	jalr	a3
  }
}
    80001c40:	0001                	nop
    80001c42:	70a2                	ld	ra,40(sp)
    80001c44:	7402                	ld	s0,32(sp)
    80001c46:	6145                	addi	sp,sp,48
    80001c48:	8082                	ret

0000000080001c4a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
    80001c4a:	7179                	addi	sp,sp,-48
    80001c4c:	f422                	sd	s0,40(sp)
    80001c4e:	1800                	addi	s0,sp,48
    80001c50:	fca43c23          	sd	a0,-40(s0)
    80001c54:	fcb43823          	sd	a1,-48(s0)
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    80001c58:	fd843783          	ld	a5,-40(s0)
    80001c5c:	fef43423          	sd	a5,-24(s0)
    80001c60:	a031                	j	80001c6c <_strnlen_s+0x22>
    80001c62:	fe843783          	ld	a5,-24(s0)
    80001c66:	0785                	addi	a5,a5,1
    80001c68:	fef43423          	sd	a5,-24(s0)
    80001c6c:	fe843783          	ld	a5,-24(s0)
    80001c70:	0007c783          	lbu	a5,0(a5)
    80001c74:	cb81                	beqz	a5,80001c84 <_strnlen_s+0x3a>
    80001c76:	fd043783          	ld	a5,-48(s0)
    80001c7a:	fff78713          	addi	a4,a5,-1
    80001c7e:	fce43823          	sd	a4,-48(s0)
    80001c82:	f3e5                	bnez	a5,80001c62 <_strnlen_s+0x18>
  return (unsigned int)(s - str);
    80001c84:	fe843703          	ld	a4,-24(s0)
    80001c88:	fd843783          	ld	a5,-40(s0)
    80001c8c:	40f707b3          	sub	a5,a4,a5
    80001c90:	2781                	sext.w	a5,a5
}
    80001c92:	853e                	mv	a0,a5
    80001c94:	7422                	ld	s0,40(sp)
    80001c96:	6145                	addi	sp,sp,48
    80001c98:	8082                	ret

0000000080001c9a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    80001c9a:	1101                	addi	sp,sp,-32
    80001c9c:	ec22                	sd	s0,24(sp)
    80001c9e:	1000                	addi	s0,sp,32
    80001ca0:	87aa                	mv	a5,a0
    80001ca2:	fef407a3          	sb	a5,-17(s0)
  return (ch >= '0') && (ch <= '9');
    80001ca6:	fef44783          	lbu	a5,-17(s0)
    80001caa:	0ff7f713          	andi	a4,a5,255
    80001cae:	02f00793          	li	a5,47
    80001cb2:	00e7fc63          	bgeu	a5,a4,80001cca <_is_digit+0x30>
    80001cb6:	fef44783          	lbu	a5,-17(s0)
    80001cba:	0ff7f713          	andi	a4,a5,255
    80001cbe:	03900793          	li	a5,57
    80001cc2:	00e7e463          	bltu	a5,a4,80001cca <_is_digit+0x30>
    80001cc6:	4785                	li	a5,1
    80001cc8:	a011                	j	80001ccc <_is_digit+0x32>
    80001cca:	4781                	li	a5,0
    80001ccc:	8b85                	andi	a5,a5,1
    80001cce:	0ff7f793          	andi	a5,a5,255
}
    80001cd2:	853e                	mv	a0,a5
    80001cd4:	6462                	ld	s0,24(sp)
    80001cd6:	6105                	addi	sp,sp,32
    80001cd8:	8082                	ret

0000000080001cda <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    80001cda:	7179                	addi	sp,sp,-48
    80001cdc:	f406                	sd	ra,40(sp)
    80001cde:	f022                	sd	s0,32(sp)
    80001ce0:	1800                	addi	s0,sp,48
    80001ce2:	fca43c23          	sd	a0,-40(s0)
  unsigned int i = 0U;
    80001ce6:	fe042623          	sw	zero,-20(s0)
  while (_is_digit(**str)) {
    80001cea:	a825                	j	80001d22 <_atoi+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80001cec:	fec42703          	lw	a4,-20(s0)
    80001cf0:	87ba                	mv	a5,a4
    80001cf2:	0027979b          	slliw	a5,a5,0x2
    80001cf6:	9fb9                	addw	a5,a5,a4
    80001cf8:	0017979b          	slliw	a5,a5,0x1
    80001cfc:	0007871b          	sext.w	a4,a5
    80001d00:	fd843783          	ld	a5,-40(s0)
    80001d04:	639c                	ld	a5,0(a5)
    80001d06:	00178613          	addi	a2,a5,1
    80001d0a:	fd843683          	ld	a3,-40(s0)
    80001d0e:	e290                	sd	a2,0(a3)
    80001d10:	0007c783          	lbu	a5,0(a5)
    80001d14:	2781                	sext.w	a5,a5
    80001d16:	9fb9                	addw	a5,a5,a4
    80001d18:	2781                	sext.w	a5,a5
    80001d1a:	fd07879b          	addiw	a5,a5,-48
    80001d1e:	fef42623          	sw	a5,-20(s0)
  while (_is_digit(**str)) {
    80001d22:	fd843783          	ld	a5,-40(s0)
    80001d26:	639c                	ld	a5,0(a5)
    80001d28:	0007c783          	lbu	a5,0(a5)
    80001d2c:	853e                	mv	a0,a5
    80001d2e:	f6dff0ef          	jal	ra,80001c9a <_is_digit>
    80001d32:	87aa                	mv	a5,a0
    80001d34:	ffc5                	bnez	a5,80001cec <_atoi+0x12>
  }
  return i;
    80001d36:	fec42783          	lw	a5,-20(s0)
}
    80001d3a:	853e                	mv	a0,a5
    80001d3c:	70a2                	ld	ra,40(sp)
    80001d3e:	7402                	ld	s0,32(sp)
    80001d40:	6145                	addi	sp,sp,48
    80001d42:	8082                	ret

0000000080001d44 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    80001d44:	711d                	addi	sp,sp,-96
    80001d46:	ec86                	sd	ra,88(sp)
    80001d48:	e8a2                	sd	s0,80(sp)
    80001d4a:	1080                	addi	s0,sp,96
    80001d4c:	fca43c23          	sd	a0,-40(s0)
    80001d50:	fcb43823          	sd	a1,-48(s0)
    80001d54:	fcc43423          	sd	a2,-56(s0)
    80001d58:	fcd43023          	sd	a3,-64(s0)
    80001d5c:	fae43c23          	sd	a4,-72(s0)
    80001d60:	faf43823          	sd	a5,-80(s0)
    80001d64:	87c2                	mv	a5,a6
    80001d66:	8746                	mv	a4,a7
    80001d68:	faf42623          	sw	a5,-84(s0)
    80001d6c:	87ba                	mv	a5,a4
    80001d6e:	faf42423          	sw	a5,-88(s0)
  const size_t start_idx = idx;
    80001d72:	fc843783          	ld	a5,-56(s0)
    80001d76:	fef43023          	sd	a5,-32(s0)

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    80001d7a:	fa842783          	lw	a5,-88(s0)
    80001d7e:	8b89                	andi	a5,a5,2
    80001d80:	2781                	sext.w	a5,a5
    80001d82:	e3c9                	bnez	a5,80001e04 <_out_rev+0xc0>
    80001d84:	fa842783          	lw	a5,-88(s0)
    80001d88:	8b85                	andi	a5,a5,1
    80001d8a:	2781                	sext.w	a5,a5
    80001d8c:	efa5                	bnez	a5,80001e04 <_out_rev+0xc0>
    for (size_t i = len; i < width; i++) {
    80001d8e:	fb043783          	ld	a5,-80(s0)
    80001d92:	fef43423          	sd	a5,-24(s0)
    80001d96:	a035                	j	80001dc2 <_out_rev+0x7e>
      out(' ', buffer, idx++, maxlen);
    80001d98:	fc843783          	ld	a5,-56(s0)
    80001d9c:	00178713          	addi	a4,a5,1
    80001da0:	fce43423          	sd	a4,-56(s0)
    80001da4:	fd843703          	ld	a4,-40(s0)
    80001da8:	fc043683          	ld	a3,-64(s0)
    80001dac:	863e                	mv	a2,a5
    80001dae:	fd043583          	ld	a1,-48(s0)
    80001db2:	02000513          	li	a0,32
    80001db6:	9702                	jalr	a4
    for (size_t i = len; i < width; i++) {
    80001db8:	fe843783          	ld	a5,-24(s0)
    80001dbc:	0785                	addi	a5,a5,1
    80001dbe:	fef43423          	sd	a5,-24(s0)
    80001dc2:	fac46783          	lwu	a5,-84(s0)
    80001dc6:	fe843703          	ld	a4,-24(s0)
    80001dca:	fcf767e3          	bltu	a4,a5,80001d98 <_out_rev+0x54>
    }
  }

  // reverse string
  while (len) {
    80001dce:	a81d                	j	80001e04 <_out_rev+0xc0>
    out(buf[--len], buffer, idx++, maxlen);
    80001dd0:	fb043783          	ld	a5,-80(s0)
    80001dd4:	17fd                	addi	a5,a5,-1
    80001dd6:	faf43823          	sd	a5,-80(s0)
    80001dda:	fb843703          	ld	a4,-72(s0)
    80001dde:	fb043783          	ld	a5,-80(s0)
    80001de2:	97ba                	add	a5,a5,a4
    80001de4:	0007c503          	lbu	a0,0(a5)
    80001de8:	fc843783          	ld	a5,-56(s0)
    80001dec:	00178713          	addi	a4,a5,1
    80001df0:	fce43423          	sd	a4,-56(s0)
    80001df4:	fd843703          	ld	a4,-40(s0)
    80001df8:	fc043683          	ld	a3,-64(s0)
    80001dfc:	863e                	mv	a2,a5
    80001dfe:	fd043583          	ld	a1,-48(s0)
    80001e02:	9702                	jalr	a4
  while (len) {
    80001e04:	fb043783          	ld	a5,-80(s0)
    80001e08:	f7e1                	bnez	a5,80001dd0 <_out_rev+0x8c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    80001e0a:	fa842783          	lw	a5,-88(s0)
    80001e0e:	8b89                	andi	a5,a5,2
    80001e10:	2781                	sext.w	a5,a5
    80001e12:	cb9d                	beqz	a5,80001e48 <_out_rev+0x104>
    while (idx - start_idx < width) {
    80001e14:	a00d                	j	80001e36 <_out_rev+0xf2>
      out(' ', buffer, idx++, maxlen);
    80001e16:	fc843783          	ld	a5,-56(s0)
    80001e1a:	00178713          	addi	a4,a5,1
    80001e1e:	fce43423          	sd	a4,-56(s0)
    80001e22:	fd843703          	ld	a4,-40(s0)
    80001e26:	fc043683          	ld	a3,-64(s0)
    80001e2a:	863e                	mv	a2,a5
    80001e2c:	fd043583          	ld	a1,-48(s0)
    80001e30:	02000513          	li	a0,32
    80001e34:	9702                	jalr	a4
    while (idx - start_idx < width) {
    80001e36:	fc843703          	ld	a4,-56(s0)
    80001e3a:	fe043783          	ld	a5,-32(s0)
    80001e3e:	8f1d                	sub	a4,a4,a5
    80001e40:	fac46783          	lwu	a5,-84(s0)
    80001e44:	fcf769e3          	bltu	a4,a5,80001e16 <_out_rev+0xd2>
    }
  }

  return idx;
    80001e48:	fc843783          	ld	a5,-56(s0)
}
    80001e4c:	853e                	mv	a0,a5
    80001e4e:	60e6                	ld	ra,88(sp)
    80001e50:	6446                	ld	s0,80(sp)
    80001e52:	6125                	addi	sp,sp,96
    80001e54:	8082                	ret

0000000080001e56 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    80001e56:	715d                	addi	sp,sp,-80
    80001e58:	e486                	sd	ra,72(sp)
    80001e5a:	e0a2                	sd	s0,64(sp)
    80001e5c:	0880                	addi	s0,sp,80
    80001e5e:	fea43423          	sd	a0,-24(s0)
    80001e62:	feb43023          	sd	a1,-32(s0)
    80001e66:	fcc43c23          	sd	a2,-40(s0)
    80001e6a:	fcd43823          	sd	a3,-48(s0)
    80001e6e:	fce43423          	sd	a4,-56(s0)
    80001e72:	fcf43023          	sd	a5,-64(s0)
    80001e76:	87c2                	mv	a5,a6
    80001e78:	8746                	mv	a4,a7
    80001e7a:	faf40fa3          	sb	a5,-65(s0)
    80001e7e:	87ba                	mv	a5,a4
    80001e80:	faf42c23          	sw	a5,-72(s0)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    80001e84:	481c                	lw	a5,16(s0)
    80001e86:	8b89                	andi	a5,a5,2
    80001e88:	2781                	sext.w	a5,a5
    80001e8a:	ebd1                	bnez	a5,80001f1e <_ntoa_format+0xc8>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80001e8c:	441c                	lw	a5,8(s0)
    80001e8e:	2781                	sext.w	a5,a5
    80001e90:	cf9d                	beqz	a5,80001ece <_ntoa_format+0x78>
    80001e92:	481c                	lw	a5,16(s0)
    80001e94:	8b85                	andi	a5,a5,1
    80001e96:	2781                	sext.w	a5,a5
    80001e98:	cb9d                	beqz	a5,80001ece <_ntoa_format+0x78>
    80001e9a:	fbf44783          	lbu	a5,-65(s0)
    80001e9e:	0ff7f793          	andi	a5,a5,255
    80001ea2:	e789                	bnez	a5,80001eac <_ntoa_format+0x56>
    80001ea4:	481c                	lw	a5,16(s0)
    80001ea6:	8bb1                	andi	a5,a5,12
    80001ea8:	2781                	sext.w	a5,a5
    80001eaa:	c395                	beqz	a5,80001ece <_ntoa_format+0x78>
      width--;
    80001eac:	441c                	lw	a5,8(s0)
    80001eae:	37fd                	addiw	a5,a5,-1
    80001eb0:	c41c                	sw	a5,8(s0)
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001eb2:	a831                	j	80001ece <_ntoa_format+0x78>
      buf[len++] = '0';
    80001eb4:	fc043783          	ld	a5,-64(s0)
    80001eb8:	00178713          	addi	a4,a5,1
    80001ebc:	fce43023          	sd	a4,-64(s0)
    80001ec0:	fc843703          	ld	a4,-56(s0)
    80001ec4:	97ba                	add	a5,a5,a4
    80001ec6:	03000713          	li	a4,48
    80001eca:	00e78023          	sb	a4,0(a5)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001ece:	00046783          	lwu	a5,0(s0)
    80001ed2:	fc043703          	ld	a4,-64(s0)
    80001ed6:	02f77563          	bgeu	a4,a5,80001f00 <_ntoa_format+0xaa>
    80001eda:	fc043703          	ld	a4,-64(s0)
    80001ede:	47fd                	li	a5,31
    80001ee0:	fce7fae3          	bgeu	a5,a4,80001eb4 <_ntoa_format+0x5e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001ee4:	a831                	j	80001f00 <_ntoa_format+0xaa>
      buf[len++] = '0';
    80001ee6:	fc043783          	ld	a5,-64(s0)
    80001eea:	00178713          	addi	a4,a5,1
    80001eee:	fce43023          	sd	a4,-64(s0)
    80001ef2:	fc843703          	ld	a4,-56(s0)
    80001ef6:	97ba                	add	a5,a5,a4
    80001ef8:	03000713          	li	a4,48
    80001efc:	00e78023          	sb	a4,0(a5)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001f00:	481c                	lw	a5,16(s0)
    80001f02:	8b85                	andi	a5,a5,1
    80001f04:	2781                	sext.w	a5,a5
    80001f06:	cf81                	beqz	a5,80001f1e <_ntoa_format+0xc8>
    80001f08:	00846783          	lwu	a5,8(s0)
    80001f0c:	fc043703          	ld	a4,-64(s0)
    80001f10:	00f77763          	bgeu	a4,a5,80001f1e <_ntoa_format+0xc8>
    80001f14:	fc043703          	ld	a4,-64(s0)
    80001f18:	47fd                	li	a5,31
    80001f1a:	fce7f6e3          	bgeu	a5,a4,80001ee6 <_ntoa_format+0x90>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    80001f1e:	481c                	lw	a5,16(s0)
    80001f20:	8bc1                	andi	a5,a5,16
    80001f22:	2781                	sext.w	a5,a5
    80001f24:	12078363          	beqz	a5,8000204a <_ntoa_format+0x1f4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    80001f28:	481c                	lw	a5,16(s0)
    80001f2a:	4007f793          	andi	a5,a5,1024
    80001f2e:	2781                	sext.w	a5,a5
    80001f30:	e7a1                	bnez	a5,80001f78 <_ntoa_format+0x122>
    80001f32:	fc043783          	ld	a5,-64(s0)
    80001f36:	c3a9                	beqz	a5,80001f78 <_ntoa_format+0x122>
    80001f38:	00046783          	lwu	a5,0(s0)
    80001f3c:	fc043703          	ld	a4,-64(s0)
    80001f40:	00f70863          	beq	a4,a5,80001f50 <_ntoa_format+0xfa>
    80001f44:	00846783          	lwu	a5,8(s0)
    80001f48:	fc043703          	ld	a4,-64(s0)
    80001f4c:	02f71663          	bne	a4,a5,80001f78 <_ntoa_format+0x122>
      len--;
    80001f50:	fc043783          	ld	a5,-64(s0)
    80001f54:	17fd                	addi	a5,a5,-1
    80001f56:	fcf43023          	sd	a5,-64(s0)
      if (len && (base == 16U)) {
    80001f5a:	fc043783          	ld	a5,-64(s0)
    80001f5e:	cf89                	beqz	a5,80001f78 <_ntoa_format+0x122>
    80001f60:	fb842783          	lw	a5,-72(s0)
    80001f64:	0007871b          	sext.w	a4,a5
    80001f68:	47c1                	li	a5,16
    80001f6a:	00f71763          	bne	a4,a5,80001f78 <_ntoa_format+0x122>
        len--;
    80001f6e:	fc043783          	ld	a5,-64(s0)
    80001f72:	17fd                	addi	a5,a5,-1
    80001f74:	fcf43023          	sd	a5,-64(s0)
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001f78:	fb842783          	lw	a5,-72(s0)
    80001f7c:	0007871b          	sext.w	a4,a5
    80001f80:	47c1                	li	a5,16
    80001f82:	02f71a63          	bne	a4,a5,80001fb6 <_ntoa_format+0x160>
    80001f86:	481c                	lw	a5,16(s0)
    80001f88:	0207f793          	andi	a5,a5,32
    80001f8c:	2781                	sext.w	a5,a5
    80001f8e:	e785                	bnez	a5,80001fb6 <_ntoa_format+0x160>
    80001f90:	fc043703          	ld	a4,-64(s0)
    80001f94:	47fd                	li	a5,31
    80001f96:	02e7e063          	bltu	a5,a4,80001fb6 <_ntoa_format+0x160>
      buf[len++] = 'x';
    80001f9a:	fc043783          	ld	a5,-64(s0)
    80001f9e:	00178713          	addi	a4,a5,1
    80001fa2:	fce43023          	sd	a4,-64(s0)
    80001fa6:	fc843703          	ld	a4,-56(s0)
    80001faa:	97ba                	add	a5,a5,a4
    80001fac:	07800713          	li	a4,120
    80001fb0:	00e78023          	sb	a4,0(a5)
    80001fb4:	a88d                	j	80002026 <_ntoa_format+0x1d0>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001fb6:	fb842783          	lw	a5,-72(s0)
    80001fba:	0007871b          	sext.w	a4,a5
    80001fbe:	47c1                	li	a5,16
    80001fc0:	02f71a63          	bne	a4,a5,80001ff4 <_ntoa_format+0x19e>
    80001fc4:	481c                	lw	a5,16(s0)
    80001fc6:	0207f793          	andi	a5,a5,32
    80001fca:	2781                	sext.w	a5,a5
    80001fcc:	c785                	beqz	a5,80001ff4 <_ntoa_format+0x19e>
    80001fce:	fc043703          	ld	a4,-64(s0)
    80001fd2:	47fd                	li	a5,31
    80001fd4:	02e7e063          	bltu	a5,a4,80001ff4 <_ntoa_format+0x19e>
      buf[len++] = 'X';
    80001fd8:	fc043783          	ld	a5,-64(s0)
    80001fdc:	00178713          	addi	a4,a5,1
    80001fe0:	fce43023          	sd	a4,-64(s0)
    80001fe4:	fc843703          	ld	a4,-56(s0)
    80001fe8:	97ba                	add	a5,a5,a4
    80001fea:	05800713          	li	a4,88
    80001fee:	00e78023          	sb	a4,0(a5)
    80001ff2:	a815                	j	80002026 <_ntoa_format+0x1d0>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80001ff4:	fb842783          	lw	a5,-72(s0)
    80001ff8:	0007871b          	sext.w	a4,a5
    80001ffc:	4789                	li	a5,2
    80001ffe:	02f71463          	bne	a4,a5,80002026 <_ntoa_format+0x1d0>
    80002002:	fc043703          	ld	a4,-64(s0)
    80002006:	47fd                	li	a5,31
    80002008:	00e7ef63          	bltu	a5,a4,80002026 <_ntoa_format+0x1d0>
      buf[len++] = 'b';
    8000200c:	fc043783          	ld	a5,-64(s0)
    80002010:	00178713          	addi	a4,a5,1
    80002014:	fce43023          	sd	a4,-64(s0)
    80002018:	fc843703          	ld	a4,-56(s0)
    8000201c:	97ba                	add	a5,a5,a4
    8000201e:	06200713          	li	a4,98
    80002022:	00e78023          	sb	a4,0(a5)
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80002026:	fc043703          	ld	a4,-64(s0)
    8000202a:	47fd                	li	a5,31
    8000202c:	00e7ef63          	bltu	a5,a4,8000204a <_ntoa_format+0x1f4>
      buf[len++] = '0';
    80002030:	fc043783          	ld	a5,-64(s0)
    80002034:	00178713          	addi	a4,a5,1
    80002038:	fce43023          	sd	a4,-64(s0)
    8000203c:	fc843703          	ld	a4,-56(s0)
    80002040:	97ba                	add	a5,a5,a4
    80002042:	03000713          	li	a4,48
    80002046:	00e78023          	sb	a4,0(a5)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    8000204a:	fc043703          	ld	a4,-64(s0)
    8000204e:	47fd                	li	a5,31
    80002050:	06e7e863          	bltu	a5,a4,800020c0 <_ntoa_format+0x26a>
    if (negative) {
    80002054:	fbf44783          	lbu	a5,-65(s0)
    80002058:	0ff7f793          	andi	a5,a5,255
    8000205c:	cf99                	beqz	a5,8000207a <_ntoa_format+0x224>
      buf[len++] = '-';
    8000205e:	fc043783          	ld	a5,-64(s0)
    80002062:	00178713          	addi	a4,a5,1
    80002066:	fce43023          	sd	a4,-64(s0)
    8000206a:	fc843703          	ld	a4,-56(s0)
    8000206e:	97ba                	add	a5,a5,a4
    80002070:	02d00713          	li	a4,45
    80002074:	00e78023          	sb	a4,0(a5)
    80002078:	a0a1                	j	800020c0 <_ntoa_format+0x26a>
    }
    else if (flags & FLAGS_PLUS) {
    8000207a:	481c                	lw	a5,16(s0)
    8000207c:	8b91                	andi	a5,a5,4
    8000207e:	2781                	sext.w	a5,a5
    80002080:	cf99                	beqz	a5,8000209e <_ntoa_format+0x248>
      buf[len++] = '+';  // ignore the space if the '+' exists
    80002082:	fc043783          	ld	a5,-64(s0)
    80002086:	00178713          	addi	a4,a5,1
    8000208a:	fce43023          	sd	a4,-64(s0)
    8000208e:	fc843703          	ld	a4,-56(s0)
    80002092:	97ba                	add	a5,a5,a4
    80002094:	02b00713          	li	a4,43
    80002098:	00e78023          	sb	a4,0(a5)
    8000209c:	a015                	j	800020c0 <_ntoa_format+0x26a>
    }
    else if (flags & FLAGS_SPACE) {
    8000209e:	481c                	lw	a5,16(s0)
    800020a0:	8ba1                	andi	a5,a5,8
    800020a2:	2781                	sext.w	a5,a5
    800020a4:	cf91                	beqz	a5,800020c0 <_ntoa_format+0x26a>
      buf[len++] = ' ';
    800020a6:	fc043783          	ld	a5,-64(s0)
    800020aa:	00178713          	addi	a4,a5,1
    800020ae:	fce43023          	sd	a4,-64(s0)
    800020b2:	fc843703          	ld	a4,-56(s0)
    800020b6:	97ba                	add	a5,a5,a4
    800020b8:	02000713          	li	a4,32
    800020bc:	00e78023          	sb	a4,0(a5)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800020c0:	4818                	lw	a4,16(s0)
    800020c2:	441c                	lw	a5,8(s0)
    800020c4:	88ba                	mv	a7,a4
    800020c6:	883e                	mv	a6,a5
    800020c8:	fc043783          	ld	a5,-64(s0)
    800020cc:	fc843703          	ld	a4,-56(s0)
    800020d0:	fd043683          	ld	a3,-48(s0)
    800020d4:	fd843603          	ld	a2,-40(s0)
    800020d8:	fe043583          	ld	a1,-32(s0)
    800020dc:	fe843503          	ld	a0,-24(s0)
    800020e0:	c65ff0ef          	jal	ra,80001d44 <_out_rev>
    800020e4:	87aa                	mv	a5,a0
}
    800020e6:	853e                	mv	a0,a5
    800020e8:	60a6                	ld	ra,72(sp)
    800020ea:	6406                	ld	s0,64(sp)
    800020ec:	6161                	addi	sp,sp,80
    800020ee:	8082                	ret

00000000800020f0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    800020f0:	7135                	addi	sp,sp,-160
    800020f2:	ed06                	sd	ra,152(sp)
    800020f4:	e922                	sd	s0,144(sp)
    800020f6:	1100                	addi	s0,sp,160
    800020f8:	faa43c23          	sd	a0,-72(s0)
    800020fc:	fab43823          	sd	a1,-80(s0)
    80002100:	fac43423          	sd	a2,-88(s0)
    80002104:	fad43023          	sd	a3,-96(s0)
    80002108:	f8e43c23          	sd	a4,-104(s0)
    8000210c:	f9043423          	sd	a6,-120(s0)
    80002110:	8746                	mv	a4,a7
    80002112:	f8f40ba3          	sb	a5,-105(s0)
    80002116:	87ba                	mv	a5,a4
    80002118:	f8f42823          	sw	a5,-112(s0)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    8000211c:	fe043423          	sd	zero,-24(s0)

  // no hash for 0 values
  if (!value) {
    80002120:	f9843783          	ld	a5,-104(s0)
    80002124:	e781                	bnez	a5,8000212c <_ntoa_long+0x3c>
    flags &= ~FLAGS_HASH;
    80002126:	441c                	lw	a5,8(s0)
    80002128:	9bbd                	andi	a5,a5,-17
    8000212a:	c41c                	sw	a5,8(s0)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    8000212c:	441c                	lw	a5,8(s0)
    8000212e:	4007f793          	andi	a5,a5,1024
    80002132:	2781                	sext.w	a5,a5
    80002134:	c781                	beqz	a5,8000213c <_ntoa_long+0x4c>
    80002136:	f9843783          	ld	a5,-104(s0)
    8000213a:	c7c1                	beqz	a5,800021c2 <_ntoa_long+0xd2>
    do {
      const char digit = (char)(value % base);
    8000213c:	f9843703          	ld	a4,-104(s0)
    80002140:	f8843783          	ld	a5,-120(s0)
    80002144:	02f777b3          	remu	a5,a4,a5
    80002148:	fef403a3          	sb	a5,-25(s0)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    8000214c:	fe744783          	lbu	a5,-25(s0)
    80002150:	0ff7f713          	andi	a4,a5,255
    80002154:	47a5                	li	a5,9
    80002156:	00e7e963          	bltu	a5,a4,80002168 <_ntoa_long+0x78>
    8000215a:	fe744783          	lbu	a5,-25(s0)
    8000215e:	0307879b          	addiw	a5,a5,48
    80002162:	0ff7f793          	andi	a5,a5,255
    80002166:	a01d                	j	8000218c <_ntoa_long+0x9c>
    80002168:	441c                	lw	a5,8(s0)
    8000216a:	0207f793          	andi	a5,a5,32
    8000216e:	2781                	sext.w	a5,a5
    80002170:	c781                	beqz	a5,80002178 <_ntoa_long+0x88>
    80002172:	04100793          	li	a5,65
    80002176:	a019                	j	8000217c <_ntoa_long+0x8c>
    80002178:	06100793          	li	a5,97
    8000217c:	fe744703          	lbu	a4,-25(s0)
    80002180:	9fb9                	addw	a5,a5,a4
    80002182:	0ff7f793          	andi	a5,a5,255
    80002186:	37d9                	addiw	a5,a5,-10
    80002188:	0ff7f793          	andi	a5,a5,255
    8000218c:	fe843703          	ld	a4,-24(s0)
    80002190:	00170693          	addi	a3,a4,1
    80002194:	fed43423          	sd	a3,-24(s0)
    80002198:	ff040693          	addi	a3,s0,-16
    8000219c:	9736                	add	a4,a4,a3
    8000219e:	fcf70823          	sb	a5,-48(a4)
      value /= base;
    800021a2:	f9843703          	ld	a4,-104(s0)
    800021a6:	f8843783          	ld	a5,-120(s0)
    800021aa:	02f757b3          	divu	a5,a4,a5
    800021ae:	f8f43c23          	sd	a5,-104(s0)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    800021b2:	f9843783          	ld	a5,-104(s0)
    800021b6:	c791                	beqz	a5,800021c2 <_ntoa_long+0xd2>
    800021b8:	fe843703          	ld	a4,-24(s0)
    800021bc:	47fd                	li	a5,31
    800021be:	f6e7ffe3          	bgeu	a5,a4,8000213c <_ntoa_long+0x4c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    800021c2:	f8843783          	ld	a5,-120(s0)
    800021c6:	0007861b          	sext.w	a2,a5
    800021ca:	f9744683          	lbu	a3,-105(s0)
    800021ce:	fc040713          	addi	a4,s0,-64
    800021d2:	441c                	lw	a5,8(s0)
    800021d4:	e83e                	sd	a5,16(sp)
    800021d6:	401c                	lw	a5,0(s0)
    800021d8:	e43e                	sd	a5,8(sp)
    800021da:	f9042783          	lw	a5,-112(s0)
    800021de:	e03e                	sd	a5,0(sp)
    800021e0:	88b2                	mv	a7,a2
    800021e2:	8836                	mv	a6,a3
    800021e4:	fe843783          	ld	a5,-24(s0)
    800021e8:	fa043683          	ld	a3,-96(s0)
    800021ec:	fa843603          	ld	a2,-88(s0)
    800021f0:	fb043583          	ld	a1,-80(s0)
    800021f4:	fb843503          	ld	a0,-72(s0)
    800021f8:	c5fff0ef          	jal	ra,80001e56 <_ntoa_format>
    800021fc:	87aa                	mv	a5,a0
}
    800021fe:	853e                	mv	a0,a5
    80002200:	60ea                	ld	ra,152(sp)
    80002202:	644a                	ld	s0,144(sp)
    80002204:	610d                	addi	sp,sp,160
    80002206:	8082                	ret

0000000080002208 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    80002208:	7135                	addi	sp,sp,-160
    8000220a:	ed06                	sd	ra,152(sp)
    8000220c:	e922                	sd	s0,144(sp)
    8000220e:	1100                	addi	s0,sp,160
    80002210:	faa43c23          	sd	a0,-72(s0)
    80002214:	fab43823          	sd	a1,-80(s0)
    80002218:	fac43423          	sd	a2,-88(s0)
    8000221c:	fad43023          	sd	a3,-96(s0)
    80002220:	f8e43c23          	sd	a4,-104(s0)
    80002224:	f9043423          	sd	a6,-120(s0)
    80002228:	8746                	mv	a4,a7
    8000222a:	f8f40ba3          	sb	a5,-105(s0)
    8000222e:	87ba                	mv	a5,a4
    80002230:	f8f42823          	sw	a5,-112(s0)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    80002234:	fe043423          	sd	zero,-24(s0)

  // no hash for 0 values
  if (!value) {
    80002238:	f9843783          	ld	a5,-104(s0)
    8000223c:	e781                	bnez	a5,80002244 <_ntoa_long_long+0x3c>
    flags &= ~FLAGS_HASH;
    8000223e:	441c                	lw	a5,8(s0)
    80002240:	9bbd                	andi	a5,a5,-17
    80002242:	c41c                	sw	a5,8(s0)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    80002244:	441c                	lw	a5,8(s0)
    80002246:	4007f793          	andi	a5,a5,1024
    8000224a:	2781                	sext.w	a5,a5
    8000224c:	c781                	beqz	a5,80002254 <_ntoa_long_long+0x4c>
    8000224e:	f9843783          	ld	a5,-104(s0)
    80002252:	c7c1                	beqz	a5,800022da <_ntoa_long_long+0xd2>
    do {
      const char digit = (char)(value % base);
    80002254:	f9843703          	ld	a4,-104(s0)
    80002258:	f8843783          	ld	a5,-120(s0)
    8000225c:	02f777b3          	remu	a5,a4,a5
    80002260:	fef403a3          	sb	a5,-25(s0)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80002264:	fe744783          	lbu	a5,-25(s0)
    80002268:	0ff7f713          	andi	a4,a5,255
    8000226c:	47a5                	li	a5,9
    8000226e:	00e7e963          	bltu	a5,a4,80002280 <_ntoa_long_long+0x78>
    80002272:	fe744783          	lbu	a5,-25(s0)
    80002276:	0307879b          	addiw	a5,a5,48
    8000227a:	0ff7f793          	andi	a5,a5,255
    8000227e:	a01d                	j	800022a4 <_ntoa_long_long+0x9c>
    80002280:	441c                	lw	a5,8(s0)
    80002282:	0207f793          	andi	a5,a5,32
    80002286:	2781                	sext.w	a5,a5
    80002288:	c781                	beqz	a5,80002290 <_ntoa_long_long+0x88>
    8000228a:	04100793          	li	a5,65
    8000228e:	a019                	j	80002294 <_ntoa_long_long+0x8c>
    80002290:	06100793          	li	a5,97
    80002294:	fe744703          	lbu	a4,-25(s0)
    80002298:	9fb9                	addw	a5,a5,a4
    8000229a:	0ff7f793          	andi	a5,a5,255
    8000229e:	37d9                	addiw	a5,a5,-10
    800022a0:	0ff7f793          	andi	a5,a5,255
    800022a4:	fe843703          	ld	a4,-24(s0)
    800022a8:	00170693          	addi	a3,a4,1
    800022ac:	fed43423          	sd	a3,-24(s0)
    800022b0:	ff040693          	addi	a3,s0,-16
    800022b4:	9736                	add	a4,a4,a3
    800022b6:	fcf70823          	sb	a5,-48(a4)
      value /= base;
    800022ba:	f9843703          	ld	a4,-104(s0)
    800022be:	f8843783          	ld	a5,-120(s0)
    800022c2:	02f757b3          	divu	a5,a4,a5
    800022c6:	f8f43c23          	sd	a5,-104(s0)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    800022ca:	f9843783          	ld	a5,-104(s0)
    800022ce:	c791                	beqz	a5,800022da <_ntoa_long_long+0xd2>
    800022d0:	fe843703          	ld	a4,-24(s0)
    800022d4:	47fd                	li	a5,31
    800022d6:	f6e7ffe3          	bgeu	a5,a4,80002254 <_ntoa_long_long+0x4c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    800022da:	f8843783          	ld	a5,-120(s0)
    800022de:	0007861b          	sext.w	a2,a5
    800022e2:	f9744683          	lbu	a3,-105(s0)
    800022e6:	fc040713          	addi	a4,s0,-64
    800022ea:	441c                	lw	a5,8(s0)
    800022ec:	e83e                	sd	a5,16(sp)
    800022ee:	401c                	lw	a5,0(s0)
    800022f0:	e43e                	sd	a5,8(sp)
    800022f2:	f9042783          	lw	a5,-112(s0)
    800022f6:	e03e                	sd	a5,0(sp)
    800022f8:	88b2                	mv	a7,a2
    800022fa:	8836                	mv	a6,a3
    800022fc:	fe843783          	ld	a5,-24(s0)
    80002300:	fa043683          	ld	a3,-96(s0)
    80002304:	fa843603          	ld	a2,-88(s0)
    80002308:	fb043583          	ld	a1,-80(s0)
    8000230c:	fb843503          	ld	a0,-72(s0)
    80002310:	b47ff0ef          	jal	ra,80001e56 <_ntoa_format>
    80002314:	87aa                	mv	a5,a0
}
    80002316:	853e                	mv	a0,a5
    80002318:	60ea                	ld	ra,152(sp)
    8000231a:	644a                	ld	s0,144(sp)
    8000231c:	610d                	addi	sp,sp,160
    8000231e:	8082                	ret

0000000080002320 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    80002320:	7135                	addi	sp,sp,-160
    80002322:	ed06                	sd	ra,152(sp)
    80002324:	e922                	sd	s0,144(sp)
    80002326:	1100                	addi	s0,sp,160
    80002328:	f8a43c23          	sd	a0,-104(s0)
    8000232c:	f8b43823          	sd	a1,-112(s0)
    80002330:	f8c43423          	sd	a2,-120(s0)
    80002334:	f8d43023          	sd	a3,-128(s0)
    80002338:	f6e43c23          	sd	a4,-136(s0)
    8000233c:	86c2                	mv	a3,a6
    8000233e:	8746                	mv	a4,a7
    80002340:	f6f42a23          	sw	a5,-140(s0)
    80002344:	87b6                	mv	a5,a3
    80002346:	f6f42823          	sw	a5,-144(s0)
    8000234a:	87ba                	mv	a5,a4
    8000234c:	f6f42623          	sw	a5,-148(s0)
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    80002350:	fe043423          	sd	zero,-24(s0)
  double diff = 0.0;
    80002354:	fc043423          	sd	zero,-56(s0)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    80002358:	f7843707          	fld	fa4,-136(s0)
    8000235c:	f7843787          	fld	fa5,-136(s0)
    80002360:	a2f727d3          	feq.d	a5,fa4,fa5
    80002364:	eb85                	bnez	a5,80002394 <_ftoa+0x74>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    80002366:	f6c42703          	lw	a4,-148(s0)
    8000236a:	f7042783          	lw	a5,-144(s0)
    8000236e:	88ba                	mv	a7,a4
    80002370:	883e                	mv	a6,a5
    80002372:	478d                	li	a5,3
    80002374:	00002717          	auipc	a4,0x2
    80002378:	51c70713          	addi	a4,a4,1308 # 80004890 <KERNEL_STACK_END+0x838>
    8000237c:	f8043683          	ld	a3,-128(s0)
    80002380:	f8843603          	ld	a2,-120(s0)
    80002384:	f9043583          	ld	a1,-112(s0)
    80002388:	f9843503          	ld	a0,-104(s0)
    8000238c:	9b9ff0ef          	jal	ra,80001d44 <_out_rev>
    80002390:	87aa                	mv	a5,a0
    80002392:	a1f9                	j	80002860 <_ftoa+0x540>
  if (value < -DBL_MAX)
    80002394:	f7843707          	fld	fa4,-136(s0)
    80002398:	00002797          	auipc	a5,0x2
    8000239c:	74878793          	addi	a5,a5,1864 # 80004ae0 <pow10.0+0x50>
    800023a0:	239c                	fld	fa5,0(a5)
    800023a2:	a2f717d3          	flt.d	a5,fa4,fa5
    800023a6:	cb85                	beqz	a5,800023d6 <_ftoa+0xb6>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    800023a8:	f6c42703          	lw	a4,-148(s0)
    800023ac:	f7042783          	lw	a5,-144(s0)
    800023b0:	88ba                	mv	a7,a4
    800023b2:	883e                	mv	a6,a5
    800023b4:	4791                	li	a5,4
    800023b6:	00002717          	auipc	a4,0x2
    800023ba:	4e270713          	addi	a4,a4,1250 # 80004898 <KERNEL_STACK_END+0x840>
    800023be:	f8043683          	ld	a3,-128(s0)
    800023c2:	f8843603          	ld	a2,-120(s0)
    800023c6:	f9043583          	ld	a1,-112(s0)
    800023ca:	f9843503          	ld	a0,-104(s0)
    800023ce:	977ff0ef          	jal	ra,80001d44 <_out_rev>
    800023d2:	87aa                	mv	a5,a0
    800023d4:	a171                	j	80002860 <_ftoa+0x540>
  if (value > DBL_MAX)
    800023d6:	f7843707          	fld	fa4,-136(s0)
    800023da:	00002797          	auipc	a5,0x2
    800023de:	70e78793          	addi	a5,a5,1806 # 80004ae8 <pow10.0+0x58>
    800023e2:	239c                	fld	fa5,0(a5)
    800023e4:	a2e797d3          	flt.d	a5,fa5,fa4
    800023e8:	cba9                	beqz	a5,8000243a <_ftoa+0x11a>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    800023ea:	f6c42783          	lw	a5,-148(s0)
    800023ee:	8b91                	andi	a5,a5,4
    800023f0:	2781                	sext.w	a5,a5
    800023f2:	c791                	beqz	a5,800023fe <_ftoa+0xde>
    800023f4:	00002717          	auipc	a4,0x2
    800023f8:	4ac70713          	addi	a4,a4,1196 # 800048a0 <KERNEL_STACK_END+0x848>
    800023fc:	a029                	j	80002406 <_ftoa+0xe6>
    800023fe:	00002717          	auipc	a4,0x2
    80002402:	4aa70713          	addi	a4,a4,1194 # 800048a8 <KERNEL_STACK_END+0x850>
    80002406:	f6c42783          	lw	a5,-148(s0)
    8000240a:	8b91                	andi	a5,a5,4
    8000240c:	2781                	sext.w	a5,a5
    8000240e:	c399                	beqz	a5,80002414 <_ftoa+0xf4>
    80002410:	4791                	li	a5,4
    80002412:	a011                	j	80002416 <_ftoa+0xf6>
    80002414:	478d                	li	a5,3
    80002416:	f6c42603          	lw	a2,-148(s0)
    8000241a:	f7042683          	lw	a3,-144(s0)
    8000241e:	88b2                	mv	a7,a2
    80002420:	8836                	mv	a6,a3
    80002422:	f8043683          	ld	a3,-128(s0)
    80002426:	f8843603          	ld	a2,-120(s0)
    8000242a:	f9043583          	ld	a1,-112(s0)
    8000242e:	f9843503          	ld	a0,-104(s0)
    80002432:	913ff0ef          	jal	ra,80001d44 <_out_rev>
    80002436:	87aa                	mv	a5,a0
    80002438:	a125                	j	80002860 <_ftoa+0x540>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    8000243a:	f7843707          	fld	fa4,-136(s0)
    8000243e:	00002797          	auipc	a5,0x2
    80002442:	6b278793          	addi	a5,a5,1714 # 80004af0 <pow10.0+0x60>
    80002446:	239c                	fld	fa5,0(a5)
    80002448:	a2e797d3          	flt.d	a5,fa5,fa4
    8000244c:	eb99                	bnez	a5,80002462 <_ftoa+0x142>
    8000244e:	f7843707          	fld	fa4,-136(s0)
    80002452:	00002797          	auipc	a5,0x2
    80002456:	6a678793          	addi	a5,a5,1702 # 80004af8 <pow10.0+0x68>
    8000245a:	239c                	fld	fa5,0(a5)
    8000245c:	a2f717d3          	flt.d	a5,fa4,fa5
    80002460:	c79d                	beqz	a5,8000248e <_ftoa+0x16e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80002462:	f6c42683          	lw	a3,-148(s0)
    80002466:	f7042703          	lw	a4,-144(s0)
    8000246a:	f7442783          	lw	a5,-140(s0)
    8000246e:	88b6                	mv	a7,a3
    80002470:	883a                	mv	a6,a4
    80002472:	f7843703          	ld	a4,-136(s0)
    80002476:	f8043683          	ld	a3,-128(s0)
    8000247a:	f8843603          	ld	a2,-120(s0)
    8000247e:	f9043583          	ld	a1,-112(s0)
    80002482:	f9843503          	ld	a0,-104(s0)
    80002486:	3e4000ef          	jal	ra,8000286a <_etoa>
    8000248a:	87aa                	mv	a5,a0
    8000248c:	aed1                	j	80002860 <_ftoa+0x540>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
    8000248e:	fe0403a3          	sb	zero,-25(s0)
  if (value < 0) {
    80002492:	f7843787          	fld	fa5,-136(s0)
    80002496:	f2000753          	fmv.d.x	fa4,zero
    8000249a:	a2e797d3          	flt.d	a5,fa5,fa4
    8000249e:	cf81                	beqz	a5,800024b6 <_ftoa+0x196>
    negative = true;
    800024a0:	4785                	li	a5,1
    800024a2:	fef403a3          	sb	a5,-25(s0)
    value = 0 - value;
    800024a6:	f2000753          	fmv.d.x	fa4,zero
    800024aa:	f7843787          	fld	fa5,-136(s0)
    800024ae:	0af777d3          	fsub.d	fa5,fa4,fa5
    800024b2:	f6f43c27          	fsd	fa5,-136(s0)
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    800024b6:	f6c42783          	lw	a5,-148(s0)
    800024ba:	4007f793          	andi	a5,a5,1024
    800024be:	2781                	sext.w	a5,a5
    800024c0:	e79d                	bnez	a5,800024ee <_ftoa+0x1ce>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    800024c2:	4799                	li	a5,6
    800024c4:	f6f42a23          	sw	a5,-140(s0)
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    800024c8:	a01d                	j	800024ee <_ftoa+0x1ce>
    buf[len++] = '0';
    800024ca:	fe843783          	ld	a5,-24(s0)
    800024ce:	00178713          	addi	a4,a5,1
    800024d2:	fee43423          	sd	a4,-24(s0)
    800024d6:	ff040713          	addi	a4,s0,-16
    800024da:	97ba                	add	a5,a5,a4
    800024dc:	03000713          	li	a4,48
    800024e0:	fae78823          	sb	a4,-80(a5)
    prec--;
    800024e4:	f7442783          	lw	a5,-140(s0)
    800024e8:	37fd                	addiw	a5,a5,-1
    800024ea:	f6f42a23          	sw	a5,-140(s0)
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    800024ee:	fe843703          	ld	a4,-24(s0)
    800024f2:	47fd                	li	a5,31
    800024f4:	00e7e963          	bltu	a5,a4,80002506 <_ftoa+0x1e6>
    800024f8:	f7442783          	lw	a5,-140(s0)
    800024fc:	0007871b          	sext.w	a4,a5
    80002500:	47a5                	li	a5,9
    80002502:	fce7e4e3          	bltu	a5,a4,800024ca <_ftoa+0x1aa>
  }

  int whole = (int)value;
    80002506:	f7843787          	fld	fa5,-136(s0)
    8000250a:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    8000250e:	fef42023          	sw	a5,-32(s0)
  double tmp = (value - whole) * pow10[prec];
    80002512:	fe042783          	lw	a5,-32(s0)
    80002516:	d20787d3          	fcvt.d.w	fa5,a5
    8000251a:	f7843707          	fld	fa4,-136(s0)
    8000251e:	0af77753          	fsub.d	fa4,fa4,fa5
    80002522:	00002717          	auipc	a4,0x2
    80002526:	56e70713          	addi	a4,a4,1390 # 80004a90 <pow10.0>
    8000252a:	f7446783          	lwu	a5,-140(s0)
    8000252e:	078e                	slli	a5,a5,0x3
    80002530:	97ba                	add	a5,a5,a4
    80002532:	239c                	fld	fa5,0(a5)
    80002534:	12f777d3          	fmul.d	fa5,fa4,fa5
    80002538:	fcf43027          	fsd	fa5,-64(s0)
  unsigned long frac = (unsigned long)tmp;
    8000253c:	fc043787          	fld	fa5,-64(s0)
    80002540:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    80002544:	fcf43c23          	sd	a5,-40(s0)
  diff = tmp - frac;
    80002548:	fd843783          	ld	a5,-40(s0)
    8000254c:	d237f7d3          	fcvt.d.lu	fa5,a5
    80002550:	fc043707          	fld	fa4,-64(s0)
    80002554:	0af777d3          	fsub.d	fa5,fa4,fa5
    80002558:	fcf43427          	fsd	fa5,-56(s0)

  if (diff > 0.5) {
    8000255c:	fc843707          	fld	fa4,-56(s0)
    80002560:	00002797          	auipc	a5,0x2
    80002564:	5a078793          	addi	a5,a5,1440 # 80004b00 <pow10.0+0x70>
    80002568:	239c                	fld	fa5,0(a5)
    8000256a:	a2e797d3          	flt.d	a5,fa5,fa4
    8000256e:	cf95                	beqz	a5,800025aa <_ftoa+0x28a>
    ++frac;
    80002570:	fd843783          	ld	a5,-40(s0)
    80002574:	0785                	addi	a5,a5,1
    80002576:	fcf43c23          	sd	a5,-40(s0)
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    8000257a:	fd843783          	ld	a5,-40(s0)
    8000257e:	d237f753          	fcvt.d.lu	fa4,a5
    80002582:	00002717          	auipc	a4,0x2
    80002586:	50e70713          	addi	a4,a4,1294 # 80004a90 <pow10.0>
    8000258a:	f7446783          	lwu	a5,-140(s0)
    8000258e:	078e                	slli	a5,a5,0x3
    80002590:	97ba                	add	a5,a5,a4
    80002592:	239c                	fld	fa5,0(a5)
    80002594:	a2e787d3          	fle.d	a5,fa5,fa4
    80002598:	cf9d                	beqz	a5,800025d6 <_ftoa+0x2b6>
      frac = 0;
    8000259a:	fc043c23          	sd	zero,-40(s0)
      ++whole;
    8000259e:	fe042783          	lw	a5,-32(s0)
    800025a2:	2785                	addiw	a5,a5,1
    800025a4:	fef42023          	sw	a5,-32(s0)
    800025a8:	a03d                	j	800025d6 <_ftoa+0x2b6>
    }
  }
  else if (diff < 0.5) {
    800025aa:	fc843707          	fld	fa4,-56(s0)
    800025ae:	00002797          	auipc	a5,0x2
    800025b2:	55278793          	addi	a5,a5,1362 # 80004b00 <pow10.0+0x70>
    800025b6:	239c                	fld	fa5,0(a5)
    800025b8:	a2f717d3          	flt.d	a5,fa4,fa5
    800025bc:	ef89                	bnez	a5,800025d6 <_ftoa+0x2b6>
  }
  else if ((frac == 0U) || (frac & 1U)) {
    800025be:	fd843783          	ld	a5,-40(s0)
    800025c2:	c789                	beqz	a5,800025cc <_ftoa+0x2ac>
    800025c4:	fd843783          	ld	a5,-40(s0)
    800025c8:	8b85                	andi	a5,a5,1
    800025ca:	c791                	beqz	a5,800025d6 <_ftoa+0x2b6>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
    800025cc:	fd843783          	ld	a5,-40(s0)
    800025d0:	0785                	addi	a5,a5,1
    800025d2:	fcf43c23          	sd	a5,-40(s0)
  }

  if (prec == 0U) {
    800025d6:	f7442783          	lw	a5,-140(s0)
    800025da:	2781                	sext.w	a5,a5
    800025dc:	e3bd                	bnez	a5,80002642 <_ftoa+0x322>
    diff = value - (double)whole;
    800025de:	fe042783          	lw	a5,-32(s0)
    800025e2:	d20787d3          	fcvt.d.w	fa5,a5
    800025e6:	f7843707          	fld	fa4,-136(s0)
    800025ea:	0af777d3          	fsub.d	fa5,fa4,fa5
    800025ee:	fcf43427          	fsd	fa5,-56(s0)
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    800025f2:	fc843707          	fld	fa4,-56(s0)
    800025f6:	00002797          	auipc	a5,0x2
    800025fa:	50a78793          	addi	a5,a5,1290 # 80004b00 <pow10.0+0x70>
    800025fe:	239c                	fld	fa5,0(a5)
    80002600:	a2f717d3          	flt.d	a5,fa4,fa5
    80002604:	00f037b3          	snez	a5,a5
    80002608:	0ff7f793          	andi	a5,a5,255
    8000260c:	0017c793          	xori	a5,a5,1
    80002610:	0ff7f793          	andi	a5,a5,255
    80002614:	eb99                	bnez	a5,8000262a <_ftoa+0x30a>
    80002616:	fc843707          	fld	fa4,-56(s0)
    8000261a:	00002797          	auipc	a5,0x2
    8000261e:	4e678793          	addi	a5,a5,1254 # 80004b00 <pow10.0+0x70>
    80002622:	239c                	fld	fa5,0(a5)
    80002624:	a2e797d3          	flt.d	a5,fa5,fa4
    80002628:	cbf1                	beqz	a5,800026fc <_ftoa+0x3dc>
    8000262a:	fe042783          	lw	a5,-32(s0)
    8000262e:	8b85                	andi	a5,a5,1
    80002630:	2781                	sext.w	a5,a5
    80002632:	10078863          	beqz	a5,80002742 <_ftoa+0x422>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    80002636:	fe042783          	lw	a5,-32(s0)
    8000263a:	2785                	addiw	a5,a5,1
    8000263c:	fef42023          	sw	a5,-32(s0)
    80002640:	a209                	j	80002742 <_ftoa+0x422>
    }
  }
  else {
    unsigned int count = prec;
    80002642:	f7442783          	lw	a5,-140(s0)
    80002646:	fcf42a23          	sw	a5,-44(s0)
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8000264a:	a0b1                	j	80002696 <_ftoa+0x376>
      --count;
    8000264c:	fd442783          	lw	a5,-44(s0)
    80002650:	37fd                	addiw	a5,a5,-1
    80002652:	fcf42a23          	sw	a5,-44(s0)
      buf[len++] = (char)(48U + (frac % 10U));
    80002656:	fd843703          	ld	a4,-40(s0)
    8000265a:	47a9                	li	a5,10
    8000265c:	02f777b3          	remu	a5,a4,a5
    80002660:	0ff7f713          	andi	a4,a5,255
    80002664:	fe843783          	ld	a5,-24(s0)
    80002668:	00178693          	addi	a3,a5,1
    8000266c:	fed43423          	sd	a3,-24(s0)
    80002670:	0307071b          	addiw	a4,a4,48
    80002674:	0ff77713          	andi	a4,a4,255
    80002678:	ff040693          	addi	a3,s0,-16
    8000267c:	97b6                	add	a5,a5,a3
    8000267e:	fae78823          	sb	a4,-80(a5)
      if (!(frac /= 10U)) {
    80002682:	fd843703          	ld	a4,-40(s0)
    80002686:	47a9                	li	a5,10
    80002688:	02f757b3          	divu	a5,a4,a5
    8000268c:	fcf43c23          	sd	a5,-40(s0)
    80002690:	fd843783          	ld	a5,-40(s0)
    80002694:	c799                	beqz	a5,800026a2 <_ftoa+0x382>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80002696:	fe843703          	ld	a4,-24(s0)
    8000269a:	47fd                	li	a5,31
    8000269c:	fae7f8e3          	bgeu	a5,a4,8000264c <_ftoa+0x32c>
    800026a0:	a005                	j	800026c0 <_ftoa+0x3a0>
        break;
    800026a2:	0001                	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    800026a4:	a831                	j	800026c0 <_ftoa+0x3a0>
      buf[len++] = '0';
    800026a6:	fe843783          	ld	a5,-24(s0)
    800026aa:	00178713          	addi	a4,a5,1
    800026ae:	fee43423          	sd	a4,-24(s0)
    800026b2:	ff040713          	addi	a4,s0,-16
    800026b6:	97ba                	add	a5,a5,a4
    800026b8:	03000713          	li	a4,48
    800026bc:	fae78823          	sb	a4,-80(a5)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    800026c0:	fe843703          	ld	a4,-24(s0)
    800026c4:	47fd                	li	a5,31
    800026c6:	00e7e963          	bltu	a5,a4,800026d8 <_ftoa+0x3b8>
    800026ca:	fd442783          	lw	a5,-44(s0)
    800026ce:	fff7871b          	addiw	a4,a5,-1
    800026d2:	fce42a23          	sw	a4,-44(s0)
    800026d6:	fbe1                	bnez	a5,800026a6 <_ftoa+0x386>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800026d8:	fe843703          	ld	a4,-24(s0)
    800026dc:	47fd                	li	a5,31
    800026de:	06e7e263          	bltu	a5,a4,80002742 <_ftoa+0x422>
      // add decimal
      buf[len++] = '.';
    800026e2:	fe843783          	ld	a5,-24(s0)
    800026e6:	00178713          	addi	a4,a5,1
    800026ea:	fee43423          	sd	a4,-24(s0)
    800026ee:	ff040713          	addi	a4,s0,-16
    800026f2:	97ba                	add	a5,a5,a4
    800026f4:	02e00713          	li	a4,46
    800026f8:	fae78823          	sb	a4,-80(a5)
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    800026fc:	a099                	j	80002742 <_ftoa+0x422>
    buf[len++] = (char)(48 + (whole % 10));
    800026fe:	fe042703          	lw	a4,-32(s0)
    80002702:	47a9                	li	a5,10
    80002704:	02f767bb          	remw	a5,a4,a5
    80002708:	2781                	sext.w	a5,a5
    8000270a:	0ff7f713          	andi	a4,a5,255
    8000270e:	fe843783          	ld	a5,-24(s0)
    80002712:	00178693          	addi	a3,a5,1
    80002716:	fed43423          	sd	a3,-24(s0)
    8000271a:	0307071b          	addiw	a4,a4,48
    8000271e:	0ff77713          	andi	a4,a4,255
    80002722:	ff040693          	addi	a3,s0,-16
    80002726:	97b6                	add	a5,a5,a3
    80002728:	fae78823          	sb	a4,-80(a5)
    if (!(whole /= 10)) {
    8000272c:	fe042703          	lw	a4,-32(s0)
    80002730:	47a9                	li	a5,10
    80002732:	02f747bb          	divw	a5,a4,a5
    80002736:	fef42023          	sw	a5,-32(s0)
    8000273a:	fe042783          	lw	a5,-32(s0)
    8000273e:	2781                	sext.w	a5,a5
    80002740:	c799                	beqz	a5,8000274e <_ftoa+0x42e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80002742:	fe843703          	ld	a4,-24(s0)
    80002746:	47fd                	li	a5,31
    80002748:	fae7fbe3          	bgeu	a5,a4,800026fe <_ftoa+0x3de>
    8000274c:	a011                	j	80002750 <_ftoa+0x430>
      break;
    8000274e:	0001                	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    80002750:	f6c42783          	lw	a5,-148(s0)
    80002754:	8b89                	andi	a5,a5,2
    80002756:	2781                	sext.w	a5,a5
    80002758:	e3b5                	bnez	a5,800027bc <_ftoa+0x49c>
    8000275a:	f6c42783          	lw	a5,-148(s0)
    8000275e:	8b85                	andi	a5,a5,1
    80002760:	2781                	sext.w	a5,a5
    80002762:	cfa9                	beqz	a5,800027bc <_ftoa+0x49c>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80002764:	f7042783          	lw	a5,-144(s0)
    80002768:	2781                	sext.w	a5,a5
    8000276a:	cf95                	beqz	a5,800027a6 <_ftoa+0x486>
    8000276c:	fe744783          	lbu	a5,-25(s0)
    80002770:	0ff7f793          	andi	a5,a5,255
    80002774:	e791                	bnez	a5,80002780 <_ftoa+0x460>
    80002776:	f6c42783          	lw	a5,-148(s0)
    8000277a:	8bb1                	andi	a5,a5,12
    8000277c:	2781                	sext.w	a5,a5
    8000277e:	c785                	beqz	a5,800027a6 <_ftoa+0x486>
      width--;
    80002780:	f7042783          	lw	a5,-144(s0)
    80002784:	37fd                	addiw	a5,a5,-1
    80002786:	f6f42823          	sw	a5,-144(s0)
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    8000278a:	a831                	j	800027a6 <_ftoa+0x486>
      buf[len++] = '0';
    8000278c:	fe843783          	ld	a5,-24(s0)
    80002790:	00178713          	addi	a4,a5,1
    80002794:	fee43423          	sd	a4,-24(s0)
    80002798:	ff040713          	addi	a4,s0,-16
    8000279c:	97ba                	add	a5,a5,a4
    8000279e:	03000713          	li	a4,48
    800027a2:	fae78823          	sb	a4,-80(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800027a6:	f7046783          	lwu	a5,-144(s0)
    800027aa:	fe843703          	ld	a4,-24(s0)
    800027ae:	00f77763          	bgeu	a4,a5,800027bc <_ftoa+0x49c>
    800027b2:	fe843703          	ld	a4,-24(s0)
    800027b6:	47fd                	li	a5,31
    800027b8:	fce7fae3          	bgeu	a5,a4,8000278c <_ftoa+0x46c>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800027bc:	fe843703          	ld	a4,-24(s0)
    800027c0:	47fd                	li	a5,31
    800027c2:	06e7ea63          	bltu	a5,a4,80002836 <_ftoa+0x516>
    if (negative) {
    800027c6:	fe744783          	lbu	a5,-25(s0)
    800027ca:	0ff7f793          	andi	a5,a5,255
    800027ce:	cf99                	beqz	a5,800027ec <_ftoa+0x4cc>
      buf[len++] = '-';
    800027d0:	fe843783          	ld	a5,-24(s0)
    800027d4:	00178713          	addi	a4,a5,1
    800027d8:	fee43423          	sd	a4,-24(s0)
    800027dc:	ff040713          	addi	a4,s0,-16
    800027e0:	97ba                	add	a5,a5,a4
    800027e2:	02d00713          	li	a4,45
    800027e6:	fae78823          	sb	a4,-80(a5)
    800027ea:	a0b1                	j	80002836 <_ftoa+0x516>
    }
    else if (flags & FLAGS_PLUS) {
    800027ec:	f6c42783          	lw	a5,-148(s0)
    800027f0:	8b91                	andi	a5,a5,4
    800027f2:	2781                	sext.w	a5,a5
    800027f4:	cf99                	beqz	a5,80002812 <_ftoa+0x4f2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    800027f6:	fe843783          	ld	a5,-24(s0)
    800027fa:	00178713          	addi	a4,a5,1
    800027fe:	fee43423          	sd	a4,-24(s0)
    80002802:	ff040713          	addi	a4,s0,-16
    80002806:	97ba                	add	a5,a5,a4
    80002808:	02b00713          	li	a4,43
    8000280c:	fae78823          	sb	a4,-80(a5)
    80002810:	a01d                	j	80002836 <_ftoa+0x516>
    }
    else if (flags & FLAGS_SPACE) {
    80002812:	f6c42783          	lw	a5,-148(s0)
    80002816:	8ba1                	andi	a5,a5,8
    80002818:	2781                	sext.w	a5,a5
    8000281a:	cf91                	beqz	a5,80002836 <_ftoa+0x516>
      buf[len++] = ' ';
    8000281c:	fe843783          	ld	a5,-24(s0)
    80002820:	00178713          	addi	a4,a5,1
    80002824:	fee43423          	sd	a4,-24(s0)
    80002828:	ff040713          	addi	a4,s0,-16
    8000282c:	97ba                	add	a5,a5,a4
    8000282e:	02000713          	li	a4,32
    80002832:	fae78823          	sb	a4,-80(a5)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80002836:	f6c42683          	lw	a3,-148(s0)
    8000283a:	f7042783          	lw	a5,-144(s0)
    8000283e:	fa040713          	addi	a4,s0,-96
    80002842:	88b6                	mv	a7,a3
    80002844:	883e                	mv	a6,a5
    80002846:	fe843783          	ld	a5,-24(s0)
    8000284a:	f8043683          	ld	a3,-128(s0)
    8000284e:	f8843603          	ld	a2,-120(s0)
    80002852:	f9043583          	ld	a1,-112(s0)
    80002856:	f9843503          	ld	a0,-104(s0)
    8000285a:	ceaff0ef          	jal	ra,80001d44 <_out_rev>
    8000285e:	87aa                	mv	a5,a0
}
    80002860:	853e                	mv	a0,a5
    80002862:	60ea                	ld	ra,152(sp)
    80002864:	644a                	ld	s0,144(sp)
    80002866:	610d                	addi	sp,sp,160
    80002868:	8082                	ret

000000008000286a <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    8000286a:	7135                	addi	sp,sp,-160
    8000286c:	ed06                	sd	ra,152(sp)
    8000286e:	e922                	sd	s0,144(sp)
    80002870:	1100                	addi	s0,sp,160
    80002872:	faa43423          	sd	a0,-88(s0)
    80002876:	fab43023          	sd	a1,-96(s0)
    8000287a:	f8c43c23          	sd	a2,-104(s0)
    8000287e:	f8d43823          	sd	a3,-112(s0)
    80002882:	f8e43423          	sd	a4,-120(s0)
    80002886:	86c2                	mv	a3,a6
    80002888:	8746                	mv	a4,a7
    8000288a:	f8f42223          	sw	a5,-124(s0)
    8000288e:	87b6                	mv	a5,a3
    80002890:	f8f42023          	sw	a5,-128(s0)
    80002894:	87ba                	mv	a5,a4
    80002896:	f6f42e23          	sw	a5,-132(s0)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    8000289a:	f8843707          	fld	fa4,-120(s0)
    8000289e:	f8843787          	fld	fa5,-120(s0)
    800028a2:	a2f727d3          	feq.d	a5,fa4,fa5
    800028a6:	c78d                	beqz	a5,800028d0 <_etoa+0x66>
    800028a8:	f8843707          	fld	fa4,-120(s0)
    800028ac:	00002797          	auipc	a5,0x2
    800028b0:	23c78793          	addi	a5,a5,572 # 80004ae8 <pow10.0+0x58>
    800028b4:	239c                	fld	fa5,0(a5)
    800028b6:	a2e797d3          	flt.d	a5,fa5,fa4
    800028ba:	eb99                	bnez	a5,800028d0 <_etoa+0x66>
    800028bc:	f8843707          	fld	fa4,-120(s0)
    800028c0:	00002797          	auipc	a5,0x2
    800028c4:	22078793          	addi	a5,a5,544 # 80004ae0 <pow10.0+0x50>
    800028c8:	239c                	fld	fa5,0(a5)
    800028ca:	a2f717d3          	flt.d	a5,fa4,fa5
    800028ce:	c79d                	beqz	a5,800028fc <_etoa+0x92>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    800028d0:	f7c42683          	lw	a3,-132(s0)
    800028d4:	f8042703          	lw	a4,-128(s0)
    800028d8:	f8442783          	lw	a5,-124(s0)
    800028dc:	88b6                	mv	a7,a3
    800028de:	883a                	mv	a6,a4
    800028e0:	f8843703          	ld	a4,-120(s0)
    800028e4:	f9043683          	ld	a3,-112(s0)
    800028e8:	f9843603          	ld	a2,-104(s0)
    800028ec:	fa043583          	ld	a1,-96(s0)
    800028f0:	fa843503          	ld	a0,-88(s0)
    800028f4:	a2dff0ef          	jal	ra,80002320 <_ftoa>
    800028f8:	87aa                	mv	a5,a0
    800028fa:	a125                	j	80002d22 <_etoa+0x4b8>
  }

  // determine the sign
  const bool negative = value < 0;
    800028fc:	f8843787          	fld	fa5,-120(s0)
    80002900:	f2000753          	fmv.d.x	fa4,zero
    80002904:	a2e797d3          	flt.d	a5,fa5,fa4
    80002908:	00f037b3          	snez	a5,a5
    8000290c:	fef401a3          	sb	a5,-29(s0)
  if (negative) {
    80002910:	fe344783          	lbu	a5,-29(s0)
    80002914:	0ff7f793          	andi	a5,a5,255
    80002918:	c799                	beqz	a5,80002926 <_etoa+0xbc>
    value = -value;
    8000291a:	f8843787          	fld	fa5,-120(s0)
    8000291e:	22f797d3          	fneg.d	fa5,fa5
    80002922:	f8f43427          	fsd	fa5,-120(s0)
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    80002926:	f7c42783          	lw	a5,-132(s0)
    8000292a:	4007f793          	andi	a5,a5,1024
    8000292e:	2781                	sext.w	a5,a5
    80002930:	e781                	bnez	a5,80002938 <_etoa+0xce>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80002932:	4799                	li	a5,6
    80002934:	f8f42223          	sw	a5,-124(s0)
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
    80002938:	f8843787          	fld	fa5,-120(s0)
    8000293c:	faf43c27          	fsd	fa5,-72(s0)
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
    80002940:	fb843783          	ld	a5,-72(s0)
    80002944:	93d1                	srli	a5,a5,0x34
    80002946:	2781                	sext.w	a5,a5
    80002948:	7ff7f793          	andi	a5,a5,2047
    8000294c:	2781                	sext.w	a5,a5
    8000294e:	c017879b          	addiw	a5,a5,-1023
    80002952:	fcf42e23          	sw	a5,-36(s0)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    80002956:	fb843703          	ld	a4,-72(s0)
    8000295a:	57fd                	li	a5,-1
    8000295c:	83b1                	srli	a5,a5,0xc
    8000295e:	8f7d                	and	a4,a4,a5
    80002960:	3ff00793          	li	a5,1023
    80002964:	17d2                	slli	a5,a5,0x34
    80002966:	8fd9                	or	a5,a5,a4
    80002968:	faf43c23          	sd	a5,-72(s0)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    8000296c:	fdc42783          	lw	a5,-36(s0)
    80002970:	d2078753          	fcvt.d.w	fa4,a5
    80002974:	00002797          	auipc	a5,0x2
    80002978:	19478793          	addi	a5,a5,404 # 80004b08 <pow10.0+0x78>
    8000297c:	239c                	fld	fa5,0(a5)
    8000297e:	12f77753          	fmul.d	fa4,fa4,fa5
    80002982:	00002797          	auipc	a5,0x2
    80002986:	18e78793          	addi	a5,a5,398 # 80004b10 <pow10.0+0x80>
    8000298a:	239c                	fld	fa5,0(a5)
    8000298c:	02f77753          	fadd.d	fa4,fa4,fa5
    80002990:	fb843687          	fld	fa3,-72(s0)
    80002994:	00002797          	auipc	a5,0x2
    80002998:	18478793          	addi	a5,a5,388 # 80004b18 <pow10.0+0x88>
    8000299c:	239c                	fld	fa5,0(a5)
    8000299e:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    800029a2:	00002797          	auipc	a5,0x2
    800029a6:	17e78793          	addi	a5,a5,382 # 80004b20 <pow10.0+0x90>
    800029aa:	239c                	fld	fa5,0(a5)
    800029ac:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    800029b0:	02f777d3          	fadd.d	fa5,fa4,fa5
    800029b4:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800029b8:	fef42623          	sw	a5,-20(s0)
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    800029bc:	fec42783          	lw	a5,-20(s0)
    800029c0:	d2078753          	fcvt.d.w	fa4,a5
    800029c4:	00002797          	auipc	a5,0x2
    800029c8:	16478793          	addi	a5,a5,356 # 80004b28 <pow10.0+0x98>
    800029cc:	239c                	fld	fa5,0(a5)
    800029ce:	12f77753          	fmul.d	fa4,fa4,fa5
    800029d2:	00002797          	auipc	a5,0x2
    800029d6:	12e78793          	addi	a5,a5,302 # 80004b00 <pow10.0+0x70>
    800029da:	239c                	fld	fa5,0(a5)
    800029dc:	02f777d3          	fadd.d	fa5,fa4,fa5
    800029e0:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800029e4:	fcf42e23          	sw	a5,-36(s0)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    800029e8:	fec42783          	lw	a5,-20(s0)
    800029ec:	d2078753          	fcvt.d.w	fa4,a5
    800029f0:	00002797          	auipc	a5,0x2
    800029f4:	14078793          	addi	a5,a5,320 # 80004b30 <pow10.0+0xa0>
    800029f8:	239c                	fld	fa5,0(a5)
    800029fa:	12f77753          	fmul.d	fa4,fa4,fa5
    800029fe:	fdc42783          	lw	a5,-36(s0)
    80002a02:	d20786d3          	fcvt.d.w	fa3,a5
    80002a06:	00002797          	auipc	a5,0x2
    80002a0a:	13278793          	addi	a5,a5,306 # 80004b38 <pow10.0+0xa8>
    80002a0e:	239c                	fld	fa5,0(a5)
    80002a10:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80002a14:	0af777d3          	fsub.d	fa5,fa4,fa5
    80002a18:	fcf43827          	fsd	fa5,-48(s0)
  const double z2 = z * z;
    80002a1c:	fd043787          	fld	fa5,-48(s0)
    80002a20:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80002a24:	fcf43427          	fsd	fa5,-56(s0)
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    80002a28:	fdc42783          	lw	a5,-36(s0)
    80002a2c:	3ff7879b          	addiw	a5,a5,1023
    80002a30:	2781                	sext.w	a5,a5
    80002a32:	17d2                	slli	a5,a5,0x34
    80002a34:	faf43c23          	sd	a5,-72(s0)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80002a38:	fb843707          	fld	fa4,-72(s0)
    80002a3c:	fd043787          	fld	fa5,-48(s0)
    80002a40:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80002a44:	00002797          	auipc	a5,0x2
    80002a48:	0fc78793          	addi	a5,a5,252 # 80004b40 <pow10.0+0xb0>
    80002a4c:	2390                	fld	fa2,0(a5)
    80002a4e:	fd043787          	fld	fa5,-48(s0)
    80002a52:	0af67653          	fsub.d	fa2,fa2,fa5
    80002a56:	fc843587          	fld	fa1,-56(s0)
    80002a5a:	00002797          	auipc	a5,0x2
    80002a5e:	0ee78793          	addi	a5,a5,238 # 80004b48 <pow10.0+0xb8>
    80002a62:	239c                	fld	fa5,0(a5)
    80002a64:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80002a68:	00002797          	auipc	a5,0x2
    80002a6c:	0e878793          	addi	a5,a5,232 # 80004b50 <pow10.0+0xc0>
    80002a70:	239c                	fld	fa5,0(a5)
    80002a72:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80002a76:	fc843587          	fld	fa1,-56(s0)
    80002a7a:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80002a7e:	00002797          	auipc	a5,0x2
    80002a82:	0da78793          	addi	a5,a5,218 # 80004b58 <pow10.0+0xc8>
    80002a86:	239c                	fld	fa5,0(a5)
    80002a88:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80002a8c:	fc843587          	fld	fa1,-56(s0)
    80002a90:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    80002a94:	02f677d3          	fadd.d	fa5,fa2,fa5
    80002a98:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    80002a9c:	00002797          	auipc	a5,0x2
    80002aa0:	0c478793          	addi	a5,a5,196 # 80004b60 <pow10.0+0xd0>
    80002aa4:	239c                	fld	fa5,0(a5)
    80002aa6:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    80002aaa:	12f777d3          	fmul.d	fa5,fa4,fa5
    80002aae:	faf43c27          	fsd	fa5,-72(s0)
  // correct for rounding errors
  if (value < conv.F) {
    80002ab2:	fb843787          	fld	fa5,-72(s0)
    80002ab6:	f8843707          	fld	fa4,-120(s0)
    80002aba:	a2f717d3          	flt.d	a5,fa4,fa5
    80002abe:	c38d                	beqz	a5,80002ae0 <_etoa+0x276>
    expval--;
    80002ac0:	fec42783          	lw	a5,-20(s0)
    80002ac4:	37fd                	addiw	a5,a5,-1
    80002ac6:	fef42623          	sw	a5,-20(s0)
    conv.F /= 10;
    80002aca:	fb843707          	fld	fa4,-72(s0)
    80002ace:	00002797          	auipc	a5,0x2
    80002ad2:	08278793          	addi	a5,a5,130 # 80004b50 <pow10.0+0xc0>
    80002ad6:	239c                	fld	fa5,0(a5)
    80002ad8:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80002adc:	faf43c27          	fsd	fa5,-72(s0)
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    80002ae0:	fec42783          	lw	a5,-20(s0)
    80002ae4:	0007871b          	sext.w	a4,a5
    80002ae8:	06300793          	li	a5,99
    80002aec:	00e7cc63          	blt	a5,a4,80002b04 <_etoa+0x29a>
    80002af0:	fec42783          	lw	a5,-20(s0)
    80002af4:	0007871b          	sext.w	a4,a5
    80002af8:	f9d00793          	li	a5,-99
    80002afc:	00f74463          	blt	a4,a5,80002b04 <_etoa+0x29a>
    80002b00:	4791                	li	a5,4
    80002b02:	a011                	j	80002b06 <_etoa+0x29c>
    80002b04:	4795                	li	a5,5
    80002b06:	fef42423          	sw	a5,-24(s0)

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    80002b0a:	f7c42703          	lw	a4,-132(s0)
    80002b0e:	6785                	lui	a5,0x1
    80002b10:	80078793          	addi	a5,a5,-2048 # 800 <NUM_FP_REGS+0x7e0>
    80002b14:	8ff9                	and	a5,a5,a4
    80002b16:	2781                	sext.w	a5,a5
    80002b18:	c7c1                	beqz	a5,80002ba0 <_etoa+0x336>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    80002b1a:	f8843707          	fld	fa4,-120(s0)
    80002b1e:	00002797          	auipc	a5,0x2
    80002b22:	04a78793          	addi	a5,a5,74 # 80004b68 <pow10.0+0xd8>
    80002b26:	239c                	fld	fa5,0(a5)
    80002b28:	a2e787d3          	fle.d	a5,fa5,fa4
    80002b2c:	cbb9                	beqz	a5,80002b82 <_etoa+0x318>
    80002b2e:	f8843707          	fld	fa4,-120(s0)
    80002b32:	00002797          	auipc	a5,0x2
    80002b36:	03e78793          	addi	a5,a5,62 # 80004b70 <pow10.0+0xe0>
    80002b3a:	239c                	fld	fa5,0(a5)
    80002b3c:	a2f717d3          	flt.d	a5,fa4,fa5
    80002b40:	c3a9                	beqz	a5,80002b82 <_etoa+0x318>
      if ((int)prec > expval) {
    80002b42:	f8442703          	lw	a4,-124(s0)
    80002b46:	fec42783          	lw	a5,-20(s0)
    80002b4a:	2781                	sext.w	a5,a5
    80002b4c:	00e7de63          	bge	a5,a4,80002b68 <_etoa+0x2fe>
        prec = (unsigned)((int)prec - expval - 1);
    80002b50:	f8442703          	lw	a4,-124(s0)
    80002b54:	fec42783          	lw	a5,-20(s0)
    80002b58:	40f707bb          	subw	a5,a4,a5
    80002b5c:	2781                	sext.w	a5,a5
    80002b5e:	37fd                	addiw	a5,a5,-1
    80002b60:	2781                	sext.w	a5,a5
    80002b62:	f8f42223          	sw	a5,-124(s0)
    80002b66:	a019                	j	80002b6c <_etoa+0x302>
      }
      else {
        prec = 0;
    80002b68:	f8042223          	sw	zero,-124(s0)
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    80002b6c:	f7c42783          	lw	a5,-132(s0)
    80002b70:	4007e793          	ori	a5,a5,1024
    80002b74:	f6f42e23          	sw	a5,-132(s0)
      // no characters in exponent
      minwidth = 0U;
    80002b78:	fe042423          	sw	zero,-24(s0)
      expval   = 0;
    80002b7c:	fe042623          	sw	zero,-20(s0)
    80002b80:	a005                	j	80002ba0 <_etoa+0x336>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    80002b82:	f8442783          	lw	a5,-124(s0)
    80002b86:	2781                	sext.w	a5,a5
    80002b88:	cf81                	beqz	a5,80002ba0 <_etoa+0x336>
    80002b8a:	f7c42783          	lw	a5,-132(s0)
    80002b8e:	4007f793          	andi	a5,a5,1024
    80002b92:	2781                	sext.w	a5,a5
    80002b94:	c791                	beqz	a5,80002ba0 <_etoa+0x336>
        --prec;
    80002b96:	f8442783          	lw	a5,-124(s0)
    80002b9a:	37fd                	addiw	a5,a5,-1
    80002b9c:	f8f42223          	sw	a5,-124(s0)
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
    80002ba0:	f8042783          	lw	a5,-128(s0)
    80002ba4:	fef42223          	sw	a5,-28(s0)
  if (width > minwidth) {
    80002ba8:	f8042703          	lw	a4,-128(s0)
    80002bac:	fe842783          	lw	a5,-24(s0)
    80002bb0:	2701                	sext.w	a4,a4
    80002bb2:	2781                	sext.w	a5,a5
    80002bb4:	00e7fb63          	bgeu	a5,a4,80002bca <_etoa+0x360>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    80002bb8:	fe442703          	lw	a4,-28(s0)
    80002bbc:	fe842783          	lw	a5,-24(s0)
    80002bc0:	40f707bb          	subw	a5,a4,a5
    80002bc4:	fef42223          	sw	a5,-28(s0)
    80002bc8:	a019                	j	80002bce <_etoa+0x364>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    80002bca:	fe042223          	sw	zero,-28(s0)
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    80002bce:	f7c42783          	lw	a5,-132(s0)
    80002bd2:	8b89                	andi	a5,a5,2
    80002bd4:	2781                	sext.w	a5,a5
    80002bd6:	c799                	beqz	a5,80002be4 <_etoa+0x37a>
    80002bd8:	fe842783          	lw	a5,-24(s0)
    80002bdc:	2781                	sext.w	a5,a5
    80002bde:	c399                	beqz	a5,80002be4 <_etoa+0x37a>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    80002be0:	fe042223          	sw	zero,-28(s0)
  }

  // rescale the float value
  if (expval) {
    80002be4:	fec42783          	lw	a5,-20(s0)
    80002be8:	2781                	sext.w	a5,a5
    80002bea:	cb89                	beqz	a5,80002bfc <_etoa+0x392>
    value /= conv.F;
    80002bec:	fb843787          	fld	fa5,-72(s0)
    80002bf0:	f8843707          	fld	fa4,-120(s0)
    80002bf4:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80002bf8:	f8f43427          	fsd	fa5,-120(s0)
  }

  // output the floating part
  const size_t start_idx = idx;
    80002bfc:	f9843783          	ld	a5,-104(s0)
    80002c00:	fcf43023          	sd	a5,-64(s0)
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    80002c04:	fe344783          	lbu	a5,-29(s0)
    80002c08:	0ff7f793          	andi	a5,a5,255
    80002c0c:	c791                	beqz	a5,80002c18 <_etoa+0x3ae>
    80002c0e:	f8843787          	fld	fa5,-120(s0)
    80002c12:	22f797d3          	fneg.d	fa5,fa5
    80002c16:	a019                	j	80002c1c <_etoa+0x3b2>
    80002c18:	f8843787          	fld	fa5,-120(s0)
    80002c1c:	f7c42703          	lw	a4,-132(s0)
    80002c20:	77fd                	lui	a5,0xfffff
    80002c22:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_memory_end+0xffffffff77fff7ff>
    80002c26:	8ff9                	and	a5,a5,a4
    80002c28:	0007869b          	sext.w	a3,a5
    80002c2c:	fe442703          	lw	a4,-28(s0)
    80002c30:	f8442783          	lw	a5,-124(s0)
    80002c34:	88b6                	mv	a7,a3
    80002c36:	883a                	mv	a6,a4
    80002c38:	e2078753          	fmv.x.d	a4,fa5
    80002c3c:	f9043683          	ld	a3,-112(s0)
    80002c40:	f9843603          	ld	a2,-104(s0)
    80002c44:	fa043583          	ld	a1,-96(s0)
    80002c48:	fa843503          	ld	a0,-88(s0)
    80002c4c:	ed4ff0ef          	jal	ra,80002320 <_ftoa>
    80002c50:	f8a43c23          	sd	a0,-104(s0)

  // output the exponent part
  if (minwidth) {
    80002c54:	fe842783          	lw	a5,-24(s0)
    80002c58:	2781                	sext.w	a5,a5
    80002c5a:	c3f1                	beqz	a5,80002d1e <_etoa+0x4b4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80002c5c:	f7c42783          	lw	a5,-132(s0)
    80002c60:	0207f793          	andi	a5,a5,32
    80002c64:	2781                	sext.w	a5,a5
    80002c66:	c781                	beqz	a5,80002c6e <_etoa+0x404>
    80002c68:	04500793          	li	a5,69
    80002c6c:	a019                	j	80002c72 <_etoa+0x408>
    80002c6e:	06500793          	li	a5,101
    80002c72:	f9843703          	ld	a4,-104(s0)
    80002c76:	00170693          	addi	a3,a4,1
    80002c7a:	f8d43c23          	sd	a3,-104(s0)
    80002c7e:	fa843803          	ld	a6,-88(s0)
    80002c82:	f9043683          	ld	a3,-112(s0)
    80002c86:	863a                	mv	a2,a4
    80002c88:	fa043583          	ld	a1,-96(s0)
    80002c8c:	853e                	mv	a0,a5
    80002c8e:	9802                	jalr	a6
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    80002c90:	fec42783          	lw	a5,-20(s0)
    80002c94:	41f7d79b          	sraiw	a5,a5,0x1f
    80002c98:	fec42703          	lw	a4,-20(s0)
    80002c9c:	8f3d                	xor	a4,a4,a5
    80002c9e:	40f707bb          	subw	a5,a4,a5
    80002ca2:	2781                	sext.w	a5,a5
    80002ca4:	863e                	mv	a2,a5
    80002ca6:	fec42783          	lw	a5,-20(s0)
    80002caa:	01f7d79b          	srliw	a5,a5,0x1f
    80002cae:	0ff7f693          	andi	a3,a5,255
    80002cb2:	fe842783          	lw	a5,-24(s0)
    80002cb6:	37fd                	addiw	a5,a5,-1
    80002cb8:	2781                	sext.w	a5,a5
    80002cba:	4715                	li	a4,5
    80002cbc:	e43a                	sd	a4,8(sp)
    80002cbe:	e03e                	sd	a5,0(sp)
    80002cc0:	4881                	li	a7,0
    80002cc2:	4829                	li	a6,10
    80002cc4:	87b6                	mv	a5,a3
    80002cc6:	8732                	mv	a4,a2
    80002cc8:	f9043683          	ld	a3,-112(s0)
    80002ccc:	f9843603          	ld	a2,-104(s0)
    80002cd0:	fa043583          	ld	a1,-96(s0)
    80002cd4:	fa843503          	ld	a0,-88(s0)
    80002cd8:	c18ff0ef          	jal	ra,800020f0 <_ntoa_long>
    80002cdc:	f8a43c23          	sd	a0,-104(s0)
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    80002ce0:	f7c42783          	lw	a5,-132(s0)
    80002ce4:	8b89                	andi	a5,a5,2
    80002ce6:	2781                	sext.w	a5,a5
    80002ce8:	cb9d                	beqz	a5,80002d1e <_etoa+0x4b4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    80002cea:	a00d                	j	80002d0c <_etoa+0x4a2>
    80002cec:	f9843783          	ld	a5,-104(s0)
    80002cf0:	00178713          	addi	a4,a5,1
    80002cf4:	f8e43c23          	sd	a4,-104(s0)
    80002cf8:	fa843703          	ld	a4,-88(s0)
    80002cfc:	f9043683          	ld	a3,-112(s0)
    80002d00:	863e                	mv	a2,a5
    80002d02:	fa043583          	ld	a1,-96(s0)
    80002d06:	02000513          	li	a0,32
    80002d0a:	9702                	jalr	a4
    80002d0c:	f9843703          	ld	a4,-104(s0)
    80002d10:	fc043783          	ld	a5,-64(s0)
    80002d14:	8f1d                	sub	a4,a4,a5
    80002d16:	f8046783          	lwu	a5,-128(s0)
    80002d1a:	fcf769e3          	bltu	a4,a5,80002cec <_etoa+0x482>
    }
  }
  return idx;
    80002d1e:	f9843783          	ld	a5,-104(s0)
}
    80002d22:	853e                	mv	a0,a5
    80002d24:	60ea                	ld	ra,152(sp)
    80002d26:	644a                	ld	s0,144(sp)
    80002d28:	610d                	addi	sp,sp,160
    80002d2a:	8082                	ret

0000000080002d2c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    80002d2c:	7135                	addi	sp,sp,-160
    80002d2e:	ed06                	sd	ra,152(sp)
    80002d30:	e922                	sd	s0,144(sp)
    80002d32:	1100                	addi	s0,sp,160
    80002d34:	f8a43c23          	sd	a0,-104(s0)
    80002d38:	f8b43823          	sd	a1,-112(s0)
    80002d3c:	f8c43423          	sd	a2,-120(s0)
    80002d40:	f8d43023          	sd	a3,-128(s0)
    80002d44:	f6e43c23          	sd	a4,-136(s0)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    80002d48:	fc043c23          	sd	zero,-40(s0)

  if (!buffer) {
    80002d4c:	f9043783          	ld	a5,-112(s0)
    80002d50:	380794e3          	bnez	a5,800038d8 <_vsnprintf+0xbac>
    // use null output function
    out = _out_null;
    80002d54:	fffff797          	auipc	a5,0xfffff
    80002d58:	e5a78793          	addi	a5,a5,-422 # 80001bae <_out_null>
    80002d5c:	f8f43c23          	sd	a5,-104(s0)
  }

  while (*format)
    80002d60:	3790006f          	j	800038d8 <_vsnprintf+0xbac>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    80002d64:	f8043783          	ld	a5,-128(s0)
    80002d68:	0007c783          	lbu	a5,0(a5)
    80002d6c:	873e                	mv	a4,a5
    80002d6e:	02500793          	li	a5,37
    80002d72:	02f70b63          	beq	a4,a5,80002da8 <_vsnprintf+0x7c>
      // no
      out(*format, buffer, idx++, maxlen);
    80002d76:	f8043783          	ld	a5,-128(s0)
    80002d7a:	0007c503          	lbu	a0,0(a5)
    80002d7e:	fd843783          	ld	a5,-40(s0)
    80002d82:	00178713          	addi	a4,a5,1
    80002d86:	fce43c23          	sd	a4,-40(s0)
    80002d8a:	f9843703          	ld	a4,-104(s0)
    80002d8e:	f8843683          	ld	a3,-120(s0)
    80002d92:	863e                	mv	a2,a5
    80002d94:	f9043583          	ld	a1,-112(s0)
    80002d98:	9702                	jalr	a4
      format++;
    80002d9a:	f8043783          	ld	a5,-128(s0)
    80002d9e:	0785                	addi	a5,a5,1
    80002da0:	f8f43023          	sd	a5,-128(s0)
      continue;
    80002da4:	3350006f          	j	800038d8 <_vsnprintf+0xbac>
    }
    else {
      // yes, evaluate it
      format++;
    80002da8:	f8043783          	ld	a5,-128(s0)
    80002dac:	0785                	addi	a5,a5,1
    80002dae:	f8f43023          	sd	a5,-128(s0)
    }

    // evaluate flags
    flags = 0U;
    80002db2:	fe042623          	sw	zero,-20(s0)
    do {
      switch (*format) {
    80002db6:	f8043783          	ld	a5,-128(s0)
    80002dba:	0007c783          	lbu	a5,0(a5)
    80002dbe:	2781                	sext.w	a5,a5
    80002dc0:	fe07869b          	addiw	a3,a5,-32
    80002dc4:	0006871b          	sext.w	a4,a3
    80002dc8:	47c1                	li	a5,16
    80002dca:	0ce7e063          	bltu	a5,a4,80002e8a <_vsnprintf+0x15e>
    80002dce:	02069793          	slli	a5,a3,0x20
    80002dd2:	9381                	srli	a5,a5,0x20
    80002dd4:	00279713          	slli	a4,a5,0x2
    80002dd8:	00002797          	auipc	a5,0x2
    80002ddc:	ad478793          	addi	a5,a5,-1324 # 800048ac <KERNEL_STACK_END+0x854>
    80002de0:	97ba                	add	a5,a5,a4
    80002de2:	439c                	lw	a5,0(a5)
    80002de4:	0007871b          	sext.w	a4,a5
    80002de8:	00002797          	auipc	a5,0x2
    80002dec:	ac478793          	addi	a5,a5,-1340 # 800048ac <KERNEL_STACK_END+0x854>
    80002df0:	97ba                	add	a5,a5,a4
    80002df2:	8782                	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    80002df4:	fec42783          	lw	a5,-20(s0)
    80002df8:	0017e793          	ori	a5,a5,1
    80002dfc:	fef42623          	sw	a5,-20(s0)
    80002e00:	f8043783          	ld	a5,-128(s0)
    80002e04:	0785                	addi	a5,a5,1
    80002e06:	f8f43023          	sd	a5,-128(s0)
    80002e0a:	4785                	li	a5,1
    80002e0c:	fef42023          	sw	a5,-32(s0)
    80002e10:	a041                	j	80002e90 <_vsnprintf+0x164>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    80002e12:	fec42783          	lw	a5,-20(s0)
    80002e16:	0027e793          	ori	a5,a5,2
    80002e1a:	fef42623          	sw	a5,-20(s0)
    80002e1e:	f8043783          	ld	a5,-128(s0)
    80002e22:	0785                	addi	a5,a5,1
    80002e24:	f8f43023          	sd	a5,-128(s0)
    80002e28:	4785                	li	a5,1
    80002e2a:	fef42023          	sw	a5,-32(s0)
    80002e2e:	a08d                	j	80002e90 <_vsnprintf+0x164>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    80002e30:	fec42783          	lw	a5,-20(s0)
    80002e34:	0047e793          	ori	a5,a5,4
    80002e38:	fef42623          	sw	a5,-20(s0)
    80002e3c:	f8043783          	ld	a5,-128(s0)
    80002e40:	0785                	addi	a5,a5,1
    80002e42:	f8f43023          	sd	a5,-128(s0)
    80002e46:	4785                	li	a5,1
    80002e48:	fef42023          	sw	a5,-32(s0)
    80002e4c:	a091                	j	80002e90 <_vsnprintf+0x164>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    80002e4e:	fec42783          	lw	a5,-20(s0)
    80002e52:	0087e793          	ori	a5,a5,8
    80002e56:	fef42623          	sw	a5,-20(s0)
    80002e5a:	f8043783          	ld	a5,-128(s0)
    80002e5e:	0785                	addi	a5,a5,1
    80002e60:	f8f43023          	sd	a5,-128(s0)
    80002e64:	4785                	li	a5,1
    80002e66:	fef42023          	sw	a5,-32(s0)
    80002e6a:	a01d                	j	80002e90 <_vsnprintf+0x164>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    80002e6c:	fec42783          	lw	a5,-20(s0)
    80002e70:	0107e793          	ori	a5,a5,16
    80002e74:	fef42623          	sw	a5,-20(s0)
    80002e78:	f8043783          	ld	a5,-128(s0)
    80002e7c:	0785                	addi	a5,a5,1
    80002e7e:	f8f43023          	sd	a5,-128(s0)
    80002e82:	4785                	li	a5,1
    80002e84:	fef42023          	sw	a5,-32(s0)
    80002e88:	a021                	j	80002e90 <_vsnprintf+0x164>
        default :                                   n = 0U; break;
    80002e8a:	fe042023          	sw	zero,-32(s0)
    80002e8e:	0001                	nop
      }
    } while (n);
    80002e90:	fe042783          	lw	a5,-32(s0)
    80002e94:	2781                	sext.w	a5,a5
    80002e96:	f385                	bnez	a5,80002db6 <_vsnprintf+0x8a>

    // evaluate width field
    width = 0U;
    80002e98:	fe042423          	sw	zero,-24(s0)
    if (_is_digit(*format)) {
    80002e9c:	f8043783          	ld	a5,-128(s0)
    80002ea0:	0007c783          	lbu	a5,0(a5)
    80002ea4:	853e                	mv	a0,a5
    80002ea6:	df5fe0ef          	jal	ra,80001c9a <_is_digit>
    80002eaa:	87aa                	mv	a5,a0
    80002eac:	cb91                	beqz	a5,80002ec0 <_vsnprintf+0x194>
      width = _atoi(&format);
    80002eae:	f8040793          	addi	a5,s0,-128
    80002eb2:	853e                	mv	a0,a5
    80002eb4:	e27fe0ef          	jal	ra,80001cda <_atoi>
    80002eb8:	87aa                	mv	a5,a0
    80002eba:	fef42423          	sw	a5,-24(s0)
    80002ebe:	a8b9                	j	80002f1c <_vsnprintf+0x1f0>
    }
    else if (*format == '*') {
    80002ec0:	f8043783          	ld	a5,-128(s0)
    80002ec4:	0007c783          	lbu	a5,0(a5)
    80002ec8:	873e                	mv	a4,a5
    80002eca:	02a00793          	li	a5,42
    80002ece:	04f71763          	bne	a4,a5,80002f1c <_vsnprintf+0x1f0>
      const int w = va_arg(va, int);
    80002ed2:	f7843783          	ld	a5,-136(s0)
    80002ed6:	00878713          	addi	a4,a5,8
    80002eda:	f6e43c23          	sd	a4,-136(s0)
    80002ede:	439c                	lw	a5,0(a5)
    80002ee0:	fcf42023          	sw	a5,-64(s0)
      if (w < 0) {
    80002ee4:	fc042783          	lw	a5,-64(s0)
    80002ee8:	2781                	sext.w	a5,a5
    80002eea:	0207d063          	bgez	a5,80002f0a <_vsnprintf+0x1de>
        flags |= FLAGS_LEFT;    // reverse padding
    80002eee:	fec42783          	lw	a5,-20(s0)
    80002ef2:	0027e793          	ori	a5,a5,2
    80002ef6:	fef42623          	sw	a5,-20(s0)
        width = (unsigned int)-w;
    80002efa:	fc042783          	lw	a5,-64(s0)
    80002efe:	40f007bb          	negw	a5,a5
    80002f02:	2781                	sext.w	a5,a5
    80002f04:	fef42423          	sw	a5,-24(s0)
    80002f08:	a029                	j	80002f12 <_vsnprintf+0x1e6>
      }
      else {
        width = (unsigned int)w;
    80002f0a:	fc042783          	lw	a5,-64(s0)
    80002f0e:	fef42423          	sw	a5,-24(s0)
      }
      format++;
    80002f12:	f8043783          	ld	a5,-128(s0)
    80002f16:	0785                	addi	a5,a5,1
    80002f18:	f8f43023          	sd	a5,-128(s0)
    }

    // evaluate precision field
    precision = 0U;
    80002f1c:	fe042223          	sw	zero,-28(s0)
    if (*format == '.') {
    80002f20:	f8043783          	ld	a5,-128(s0)
    80002f24:	0007c783          	lbu	a5,0(a5)
    80002f28:	873e                	mv	a4,a5
    80002f2a:	02e00793          	li	a5,46
    80002f2e:	08f71063          	bne	a4,a5,80002fae <_vsnprintf+0x282>
      flags |= FLAGS_PRECISION;
    80002f32:	fec42783          	lw	a5,-20(s0)
    80002f36:	4007e793          	ori	a5,a5,1024
    80002f3a:	fef42623          	sw	a5,-20(s0)
      format++;
    80002f3e:	f8043783          	ld	a5,-128(s0)
    80002f42:	0785                	addi	a5,a5,1
    80002f44:	f8f43023          	sd	a5,-128(s0)
      if (_is_digit(*format)) {
    80002f48:	f8043783          	ld	a5,-128(s0)
    80002f4c:	0007c783          	lbu	a5,0(a5)
    80002f50:	853e                	mv	a0,a5
    80002f52:	d49fe0ef          	jal	ra,80001c9a <_is_digit>
    80002f56:	87aa                	mv	a5,a0
    80002f58:	cb91                	beqz	a5,80002f6c <_vsnprintf+0x240>
        precision = _atoi(&format);
    80002f5a:	f8040793          	addi	a5,s0,-128
    80002f5e:	853e                	mv	a0,a5
    80002f60:	d7bfe0ef          	jal	ra,80001cda <_atoi>
    80002f64:	87aa                	mv	a5,a0
    80002f66:	fef42223          	sw	a5,-28(s0)
    80002f6a:	a091                	j	80002fae <_vsnprintf+0x282>
      }
      else if (*format == '*') {
    80002f6c:	f8043783          	ld	a5,-128(s0)
    80002f70:	0007c783          	lbu	a5,0(a5)
    80002f74:	873e                	mv	a4,a5
    80002f76:	02a00793          	li	a5,42
    80002f7a:	02f71a63          	bne	a4,a5,80002fae <_vsnprintf+0x282>
        const int prec = (int)va_arg(va, int);
    80002f7e:	f7843783          	ld	a5,-136(s0)
    80002f82:	00878713          	addi	a4,a5,8
    80002f86:	f6e43c23          	sd	a4,-136(s0)
    80002f8a:	439c                	lw	a5,0(a5)
    80002f8c:	faf42e23          	sw	a5,-68(s0)
        precision = prec > 0 ? (unsigned int)prec : 0U;
    80002f90:	fbc42783          	lw	a5,-68(s0)
    80002f94:	0007871b          	sext.w	a4,a5
    80002f98:	00075363          	bgez	a4,80002f9e <_vsnprintf+0x272>
    80002f9c:	4781                	li	a5,0
    80002f9e:	2781                	sext.w	a5,a5
    80002fa0:	fef42223          	sw	a5,-28(s0)
        format++;
    80002fa4:	f8043783          	ld	a5,-128(s0)
    80002fa8:	0785                	addi	a5,a5,1
    80002faa:	f8f43023          	sd	a5,-128(s0)
      }
    }

    // evaluate length field
    switch (*format) {
    80002fae:	f8043783          	ld	a5,-128(s0)
    80002fb2:	0007c783          	lbu	a5,0(a5)
    80002fb6:	2781                	sext.w	a5,a5
    80002fb8:	f987869b          	addiw	a3,a5,-104
    80002fbc:	0006871b          	sext.w	a4,a3
    80002fc0:	47c9                	li	a5,18
    80002fc2:	0ee7e963          	bltu	a5,a4,800030b4 <_vsnprintf+0x388>
    80002fc6:	02069793          	slli	a5,a3,0x20
    80002fca:	9381                	srli	a5,a5,0x20
    80002fcc:	00279713          	slli	a4,a5,0x2
    80002fd0:	00002797          	auipc	a5,0x2
    80002fd4:	92078793          	addi	a5,a5,-1760 # 800048f0 <KERNEL_STACK_END+0x898>
    80002fd8:	97ba                	add	a5,a5,a4
    80002fda:	439c                	lw	a5,0(a5)
    80002fdc:	0007871b          	sext.w	a4,a5
    80002fe0:	00002797          	auipc	a5,0x2
    80002fe4:	91078793          	addi	a5,a5,-1776 # 800048f0 <KERNEL_STACK_END+0x898>
    80002fe8:	97ba                	add	a5,a5,a4
    80002fea:	8782                	jr	a5
      case 'l' :
        flags |= FLAGS_LONG;
    80002fec:	fec42783          	lw	a5,-20(s0)
    80002ff0:	1007e793          	ori	a5,a5,256
    80002ff4:	fef42623          	sw	a5,-20(s0)
        format++;
    80002ff8:	f8043783          	ld	a5,-128(s0)
    80002ffc:	0785                	addi	a5,a5,1
    80002ffe:	f8f43023          	sd	a5,-128(s0)
        if (*format == 'l') {
    80003002:	f8043783          	ld	a5,-128(s0)
    80003006:	0007c783          	lbu	a5,0(a5)
    8000300a:	873e                	mv	a4,a5
    8000300c:	06c00793          	li	a5,108
    80003010:	0af71463          	bne	a4,a5,800030b8 <_vsnprintf+0x38c>
          flags |= FLAGS_LONG_LONG;
    80003014:	fec42783          	lw	a5,-20(s0)
    80003018:	2007e793          	ori	a5,a5,512
    8000301c:	fef42623          	sw	a5,-20(s0)
          format++;
    80003020:	f8043783          	ld	a5,-128(s0)
    80003024:	0785                	addi	a5,a5,1
    80003026:	f8f43023          	sd	a5,-128(s0)
        }
        break;
    8000302a:	a079                	j	800030b8 <_vsnprintf+0x38c>
      case 'h' :
        flags |= FLAGS_SHORT;
    8000302c:	fec42783          	lw	a5,-20(s0)
    80003030:	0807e793          	ori	a5,a5,128
    80003034:	fef42623          	sw	a5,-20(s0)
        format++;
    80003038:	f8043783          	ld	a5,-128(s0)
    8000303c:	0785                	addi	a5,a5,1
    8000303e:	f8f43023          	sd	a5,-128(s0)
        if (*format == 'h') {
    80003042:	f8043783          	ld	a5,-128(s0)
    80003046:	0007c783          	lbu	a5,0(a5)
    8000304a:	873e                	mv	a4,a5
    8000304c:	06800793          	li	a5,104
    80003050:	06f71663          	bne	a4,a5,800030bc <_vsnprintf+0x390>
          flags |= FLAGS_CHAR;
    80003054:	fec42783          	lw	a5,-20(s0)
    80003058:	0407e793          	ori	a5,a5,64
    8000305c:	fef42623          	sw	a5,-20(s0)
          format++;
    80003060:	f8043783          	ld	a5,-128(s0)
    80003064:	0785                	addi	a5,a5,1
    80003066:	f8f43023          	sd	a5,-128(s0)
        }
        break;
    8000306a:	a889                	j	800030bc <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    8000306c:	fec42783          	lw	a5,-20(s0)
    80003070:	1007e793          	ori	a5,a5,256
    80003074:	fef42623          	sw	a5,-20(s0)
        format++;
    80003078:	f8043783          	ld	a5,-128(s0)
    8000307c:	0785                	addi	a5,a5,1
    8000307e:	f8f43023          	sd	a5,-128(s0)
        break;
    80003082:	a835                	j	800030be <_vsnprintf+0x392>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    80003084:	fec42783          	lw	a5,-20(s0)
    80003088:	1007e793          	ori	a5,a5,256
    8000308c:	fef42623          	sw	a5,-20(s0)
        format++;
    80003090:	f8043783          	ld	a5,-128(s0)
    80003094:	0785                	addi	a5,a5,1
    80003096:	f8f43023          	sd	a5,-128(s0)
        break;
    8000309a:	a015                	j	800030be <_vsnprintf+0x392>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    8000309c:	fec42783          	lw	a5,-20(s0)
    800030a0:	1007e793          	ori	a5,a5,256
    800030a4:	fef42623          	sw	a5,-20(s0)
        format++;
    800030a8:	f8043783          	ld	a5,-128(s0)
    800030ac:	0785                	addi	a5,a5,1
    800030ae:	f8f43023          	sd	a5,-128(s0)
        break;
    800030b2:	a031                	j	800030be <_vsnprintf+0x392>
      default :
        break;
    800030b4:	0001                	nop
    800030b6:	a021                	j	800030be <_vsnprintf+0x392>
        break;
    800030b8:	0001                	nop
    800030ba:	a011                	j	800030be <_vsnprintf+0x392>
        break;
    800030bc:	0001                	nop
    }

    // evaluate specifier
    switch (*format) {
    800030be:	f8043783          	ld	a5,-128(s0)
    800030c2:	0007c783          	lbu	a5,0(a5)
    800030c6:	2781                	sext.w	a5,a5
    800030c8:	fdb7869b          	addiw	a3,a5,-37
    800030cc:	0006871b          	sext.w	a4,a3
    800030d0:	05300793          	li	a5,83
    800030d4:	7ce7ea63          	bltu	a5,a4,800038a8 <_vsnprintf+0xb7c>
    800030d8:	02069793          	slli	a5,a3,0x20
    800030dc:	9381                	srli	a5,a5,0x20
    800030de:	00279713          	slli	a4,a5,0x2
    800030e2:	00002797          	auipc	a5,0x2
    800030e6:	85a78793          	addi	a5,a5,-1958 # 8000493c <KERNEL_STACK_END+0x8e4>
    800030ea:	97ba                	add	a5,a5,a4
    800030ec:	439c                	lw	a5,0(a5)
    800030ee:	0007871b          	sext.w	a4,a5
    800030f2:	00002797          	auipc	a5,0x2
    800030f6:	84a78793          	addi	a5,a5,-1974 # 8000493c <KERNEL_STACK_END+0x8e4>
    800030fa:	97ba                	add	a5,a5,a4
    800030fc:	8782                	jr	a5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    800030fe:	f8043783          	ld	a5,-128(s0)
    80003102:	0007c783          	lbu	a5,0(a5)
    80003106:	873e                	mv	a4,a5
    80003108:	07800793          	li	a5,120
    8000310c:	00f70b63          	beq	a4,a5,80003122 <_vsnprintf+0x3f6>
    80003110:	f8043783          	ld	a5,-128(s0)
    80003114:	0007c783          	lbu	a5,0(a5)
    80003118:	873e                	mv	a4,a5
    8000311a:	05800793          	li	a5,88
    8000311e:	00f71663          	bne	a4,a5,8000312a <_vsnprintf+0x3fe>
          base = 16U;
    80003122:	47c1                	li	a5,16
    80003124:	fcf42a23          	sw	a5,-44(s0)
    80003128:	a099                	j	8000316e <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
    8000312a:	f8043783          	ld	a5,-128(s0)
    8000312e:	0007c783          	lbu	a5,0(a5)
    80003132:	873e                	mv	a4,a5
    80003134:	06f00793          	li	a5,111
    80003138:	00f71663          	bne	a4,a5,80003144 <_vsnprintf+0x418>
          base =  8U;
    8000313c:	47a1                	li	a5,8
    8000313e:	fcf42a23          	sw	a5,-44(s0)
    80003142:	a035                	j	8000316e <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
    80003144:	f8043783          	ld	a5,-128(s0)
    80003148:	0007c783          	lbu	a5,0(a5)
    8000314c:	873e                	mv	a4,a5
    8000314e:	06200793          	li	a5,98
    80003152:	00f71663          	bne	a4,a5,8000315e <_vsnprintf+0x432>
          base =  2U;
    80003156:	4789                	li	a5,2
    80003158:	fcf42a23          	sw	a5,-44(s0)
    8000315c:	a809                	j	8000316e <_vsnprintf+0x442>
        }
        else {
          base = 10U;
    8000315e:	47a9                	li	a5,10
    80003160:	fcf42a23          	sw	a5,-44(s0)
          flags &= ~FLAGS_HASH;   // no hash for dec format
    80003164:	fec42783          	lw	a5,-20(s0)
    80003168:	9bbd                	andi	a5,a5,-17
    8000316a:	fef42623          	sw	a5,-20(s0)
        }
        // uppercase
        if (*format == 'X') {
    8000316e:	f8043783          	ld	a5,-128(s0)
    80003172:	0007c783          	lbu	a5,0(a5)
    80003176:	873e                	mv	a4,a5
    80003178:	05800793          	li	a5,88
    8000317c:	00f71863          	bne	a4,a5,8000318c <_vsnprintf+0x460>
          flags |= FLAGS_UPPERCASE;
    80003180:	fec42783          	lw	a5,-20(s0)
    80003184:	0207e793          	ori	a5,a5,32
    80003188:	fef42623          	sw	a5,-20(s0)
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    8000318c:	f8043783          	ld	a5,-128(s0)
    80003190:	0007c783          	lbu	a5,0(a5)
    80003194:	873e                	mv	a4,a5
    80003196:	06900793          	li	a5,105
    8000319a:	02f70063          	beq	a4,a5,800031ba <_vsnprintf+0x48e>
    8000319e:	f8043783          	ld	a5,-128(s0)
    800031a2:	0007c783          	lbu	a5,0(a5)
    800031a6:	873e                	mv	a4,a5
    800031a8:	06400793          	li	a5,100
    800031ac:	00f70763          	beq	a4,a5,800031ba <_vsnprintf+0x48e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    800031b0:	fec42783          	lw	a5,-20(s0)
    800031b4:	9bcd                	andi	a5,a5,-13
    800031b6:	fef42623          	sw	a5,-20(s0)
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    800031ba:	fec42783          	lw	a5,-20(s0)
    800031be:	4007f793          	andi	a5,a5,1024
    800031c2:	2781                	sext.w	a5,a5
    800031c4:	c791                	beqz	a5,800031d0 <_vsnprintf+0x4a4>
          flags &= ~FLAGS_ZEROPAD;
    800031c6:	fec42783          	lw	a5,-20(s0)
    800031ca:	9bf9                	andi	a5,a5,-2
    800031cc:	fef42623          	sw	a5,-20(s0)
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    800031d0:	f8043783          	ld	a5,-128(s0)
    800031d4:	0007c783          	lbu	a5,0(a5)
    800031d8:	873e                	mv	a4,a5
    800031da:	06900793          	li	a5,105
    800031de:	00f70b63          	beq	a4,a5,800031f4 <_vsnprintf+0x4c8>
    800031e2:	f8043783          	ld	a5,-128(s0)
    800031e6:	0007c783          	lbu	a5,0(a5)
    800031ea:	873e                	mv	a4,a5
    800031ec:	06400793          	li	a5,100
    800031f0:	18f71d63          	bne	a4,a5,8000338a <_vsnprintf+0x65e>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    800031f4:	fec42783          	lw	a5,-20(s0)
    800031f8:	2007f793          	andi	a5,a5,512
    800031fc:	2781                	sext.w	a5,a5
    800031fe:	c3bd                	beqz	a5,80003264 <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    80003200:	f7843783          	ld	a5,-136(s0)
    80003204:	00878713          	addi	a4,a5,8
    80003208:	f6e43c23          	sd	a4,-136(s0)
    8000320c:	639c                	ld	a5,0(a5)
    8000320e:	faf43023          	sd	a5,-96(s0)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    80003212:	fa043783          	ld	a5,-96(s0)
    80003216:	43f7d713          	srai	a4,a5,0x3f
    8000321a:	fa043783          	ld	a5,-96(s0)
    8000321e:	8fb9                	xor	a5,a5,a4
    80003220:	8f99                	sub	a5,a5,a4
    80003222:	85be                	mv	a1,a5
    80003224:	fa043783          	ld	a5,-96(s0)
    80003228:	93fd                	srli	a5,a5,0x3f
    8000322a:	0ff7f713          	andi	a4,a5,255
    8000322e:	fd446683          	lwu	a3,-44(s0)
    80003232:	fe442603          	lw	a2,-28(s0)
    80003236:	fec42783          	lw	a5,-20(s0)
    8000323a:	e43e                	sd	a5,8(sp)
    8000323c:	fe842783          	lw	a5,-24(s0)
    80003240:	e03e                	sd	a5,0(sp)
    80003242:	88b2                	mv	a7,a2
    80003244:	8836                	mv	a6,a3
    80003246:	87ba                	mv	a5,a4
    80003248:	872e                	mv	a4,a1
    8000324a:	f8843683          	ld	a3,-120(s0)
    8000324e:	fd843603          	ld	a2,-40(s0)
    80003252:	f9043583          	ld	a1,-112(s0)
    80003256:	f9843503          	ld	a0,-104(s0)
    8000325a:	faffe0ef          	jal	ra,80002208 <_ntoa_long_long>
    8000325e:	fca43c23          	sd	a0,-40(s0)
          if (flags & FLAGS_LONG_LONG) {
    80003262:	ac89                	j	800034b4 <_vsnprintf+0x788>
#endif
          }
          else if (flags & FLAGS_LONG) {
    80003264:	fec42783          	lw	a5,-20(s0)
    80003268:	1007f793          	andi	a5,a5,256
    8000326c:	2781                	sext.w	a5,a5
    8000326e:	c3bd                	beqz	a5,800032d4 <_vsnprintf+0x5a8>
            const long value = va_arg(va, long);
    80003270:	f7843783          	ld	a5,-136(s0)
    80003274:	00878713          	addi	a4,a5,8
    80003278:	f6e43c23          	sd	a4,-136(s0)
    8000327c:	639c                	ld	a5,0(a5)
    8000327e:	faf43423          	sd	a5,-88(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    80003282:	fa843783          	ld	a5,-88(s0)
    80003286:	43f7d713          	srai	a4,a5,0x3f
    8000328a:	fa843783          	ld	a5,-88(s0)
    8000328e:	8fb9                	xor	a5,a5,a4
    80003290:	8f99                	sub	a5,a5,a4
    80003292:	85be                	mv	a1,a5
    80003294:	fa843783          	ld	a5,-88(s0)
    80003298:	93fd                	srli	a5,a5,0x3f
    8000329a:	0ff7f713          	andi	a4,a5,255
    8000329e:	fd446683          	lwu	a3,-44(s0)
    800032a2:	fe442603          	lw	a2,-28(s0)
    800032a6:	fec42783          	lw	a5,-20(s0)
    800032aa:	e43e                	sd	a5,8(sp)
    800032ac:	fe842783          	lw	a5,-24(s0)
    800032b0:	e03e                	sd	a5,0(sp)
    800032b2:	88b2                	mv	a7,a2
    800032b4:	8836                	mv	a6,a3
    800032b6:	87ba                	mv	a5,a4
    800032b8:	872e                	mv	a4,a1
    800032ba:	f8843683          	ld	a3,-120(s0)
    800032be:	fd843603          	ld	a2,-40(s0)
    800032c2:	f9043583          	ld	a1,-112(s0)
    800032c6:	f9843503          	ld	a0,-104(s0)
    800032ca:	e27fe0ef          	jal	ra,800020f0 <_ntoa_long>
    800032ce:	fca43c23          	sd	a0,-40(s0)
          if (flags & FLAGS_LONG_LONG) {
    800032d2:	a2cd                	j	800034b4 <_vsnprintf+0x788>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    800032d4:	fec42783          	lw	a5,-20(s0)
    800032d8:	0407f793          	andi	a5,a5,64
    800032dc:	2781                	sext.w	a5,a5
    800032de:	cf81                	beqz	a5,800032f6 <_vsnprintf+0x5ca>
    800032e0:	f7843783          	ld	a5,-136(s0)
    800032e4:	00878713          	addi	a4,a5,8
    800032e8:	f6e43c23          	sd	a4,-136(s0)
    800032ec:	439c                	lw	a5,0(a5)
    800032ee:	0ff7f793          	andi	a5,a5,255
    800032f2:	2781                	sext.w	a5,a5
    800032f4:	a81d                	j	8000332a <_vsnprintf+0x5fe>
    800032f6:	fec42783          	lw	a5,-20(s0)
    800032fa:	0807f793          	andi	a5,a5,128
    800032fe:	2781                	sext.w	a5,a5
    80003300:	cf91                	beqz	a5,8000331c <_vsnprintf+0x5f0>
    80003302:	f7843783          	ld	a5,-136(s0)
    80003306:	00878713          	addi	a4,a5,8
    8000330a:	f6e43c23          	sd	a4,-136(s0)
    8000330e:	439c                	lw	a5,0(a5)
    80003310:	0107979b          	slliw	a5,a5,0x10
    80003314:	4107d79b          	sraiw	a5,a5,0x10
    80003318:	2781                	sext.w	a5,a5
    8000331a:	a801                	j	8000332a <_vsnprintf+0x5fe>
    8000331c:	f7843783          	ld	a5,-136(s0)
    80003320:	00878713          	addi	a4,a5,8
    80003324:	f6e43c23          	sd	a4,-136(s0)
    80003328:	439c                	lw	a5,0(a5)
    8000332a:	faf42823          	sw	a5,-80(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    8000332e:	fb042783          	lw	a5,-80(s0)
    80003332:	41f7d79b          	sraiw	a5,a5,0x1f
    80003336:	fb042703          	lw	a4,-80(s0)
    8000333a:	8f3d                	xor	a4,a4,a5
    8000333c:	40f707bb          	subw	a5,a4,a5
    80003340:	2781                	sext.w	a5,a5
    80003342:	2781                	sext.w	a5,a5
    80003344:	02079713          	slli	a4,a5,0x20
    80003348:	9301                	srli	a4,a4,0x20
    8000334a:	fb042783          	lw	a5,-80(s0)
    8000334e:	01f7d79b          	srliw	a5,a5,0x1f
    80003352:	0ff7f693          	andi	a3,a5,255
    80003356:	fd446603          	lwu	a2,-44(s0)
    8000335a:	fe442583          	lw	a1,-28(s0)
    8000335e:	fec42783          	lw	a5,-20(s0)
    80003362:	e43e                	sd	a5,8(sp)
    80003364:	fe842783          	lw	a5,-24(s0)
    80003368:	e03e                	sd	a5,0(sp)
    8000336a:	88ae                	mv	a7,a1
    8000336c:	8832                	mv	a6,a2
    8000336e:	87b6                	mv	a5,a3
    80003370:	f8843683          	ld	a3,-120(s0)
    80003374:	fd843603          	ld	a2,-40(s0)
    80003378:	f9043583          	ld	a1,-112(s0)
    8000337c:	f9843503          	ld	a0,-104(s0)
    80003380:	d71fe0ef          	jal	ra,800020f0 <_ntoa_long>
    80003384:	fca43c23          	sd	a0,-40(s0)
          if (flags & FLAGS_LONG_LONG) {
    80003388:	a235                	j	800034b4 <_vsnprintf+0x788>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    8000338a:	fec42783          	lw	a5,-20(s0)
    8000338e:	2007f793          	andi	a5,a5,512
    80003392:	2781                	sext.w	a5,a5
    80003394:	c3b1                	beqz	a5,800033d8 <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    80003396:	f7843783          	ld	a5,-136(s0)
    8000339a:	00878713          	addi	a4,a5,8
    8000339e:	f6e43c23          	sd	a4,-136(s0)
    800033a2:	6398                	ld	a4,0(a5)
    800033a4:	fd446683          	lwu	a3,-44(s0)
    800033a8:	fe442603          	lw	a2,-28(s0)
    800033ac:	fec42783          	lw	a5,-20(s0)
    800033b0:	e43e                	sd	a5,8(sp)
    800033b2:	fe842783          	lw	a5,-24(s0)
    800033b6:	e03e                	sd	a5,0(sp)
    800033b8:	88b2                	mv	a7,a2
    800033ba:	8836                	mv	a6,a3
    800033bc:	4781                	li	a5,0
    800033be:	f8843683          	ld	a3,-120(s0)
    800033c2:	fd843603          	ld	a2,-40(s0)
    800033c6:	f9043583          	ld	a1,-112(s0)
    800033ca:	f9843503          	ld	a0,-104(s0)
    800033ce:	e3bfe0ef          	jal	ra,80002208 <_ntoa_long_long>
    800033d2:	fca43c23          	sd	a0,-40(s0)
    800033d6:	a8f9                	j	800034b4 <_vsnprintf+0x788>
#endif
          }
          else if (flags & FLAGS_LONG) {
    800033d8:	fec42783          	lw	a5,-20(s0)
    800033dc:	1007f793          	andi	a5,a5,256
    800033e0:	2781                	sext.w	a5,a5
    800033e2:	c3b1                	beqz	a5,80003426 <_vsnprintf+0x6fa>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    800033e4:	f7843783          	ld	a5,-136(s0)
    800033e8:	00878713          	addi	a4,a5,8
    800033ec:	f6e43c23          	sd	a4,-136(s0)
    800033f0:	6398                	ld	a4,0(a5)
    800033f2:	fd446683          	lwu	a3,-44(s0)
    800033f6:	fe442603          	lw	a2,-28(s0)
    800033fa:	fec42783          	lw	a5,-20(s0)
    800033fe:	e43e                	sd	a5,8(sp)
    80003400:	fe842783          	lw	a5,-24(s0)
    80003404:	e03e                	sd	a5,0(sp)
    80003406:	88b2                	mv	a7,a2
    80003408:	8836                	mv	a6,a3
    8000340a:	4781                	li	a5,0
    8000340c:	f8843683          	ld	a3,-120(s0)
    80003410:	fd843603          	ld	a2,-40(s0)
    80003414:	f9043583          	ld	a1,-112(s0)
    80003418:	f9843503          	ld	a0,-104(s0)
    8000341c:	cd5fe0ef          	jal	ra,800020f0 <_ntoa_long>
    80003420:	fca43c23          	sd	a0,-40(s0)
    80003424:	a841                	j	800034b4 <_vsnprintf+0x788>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    80003426:	fec42783          	lw	a5,-20(s0)
    8000342a:	0407f793          	andi	a5,a5,64
    8000342e:	2781                	sext.w	a5,a5
    80003430:	cf81                	beqz	a5,80003448 <_vsnprintf+0x71c>
    80003432:	f7843783          	ld	a5,-136(s0)
    80003436:	00878713          	addi	a4,a5,8
    8000343a:	f6e43c23          	sd	a4,-136(s0)
    8000343e:	439c                	lw	a5,0(a5)
    80003440:	0ff7f793          	andi	a5,a5,255
    80003444:	2781                	sext.w	a5,a5
    80003446:	a815                	j	8000347a <_vsnprintf+0x74e>
    80003448:	fec42783          	lw	a5,-20(s0)
    8000344c:	0807f793          	andi	a5,a5,128
    80003450:	2781                	sext.w	a5,a5
    80003452:	cf81                	beqz	a5,8000346a <_vsnprintf+0x73e>
    80003454:	f7843783          	ld	a5,-136(s0)
    80003458:	00878713          	addi	a4,a5,8
    8000345c:	f6e43c23          	sd	a4,-136(s0)
    80003460:	439c                	lw	a5,0(a5)
    80003462:	17c2                	slli	a5,a5,0x30
    80003464:	93c1                	srli	a5,a5,0x30
    80003466:	2781                	sext.w	a5,a5
    80003468:	a801                	j	80003478 <_vsnprintf+0x74c>
    8000346a:	f7843783          	ld	a5,-136(s0)
    8000346e:	00878713          	addi	a4,a5,8
    80003472:	f6e43c23          	sd	a4,-136(s0)
    80003476:	439c                	lw	a5,0(a5)
    80003478:	2781                	sext.w	a5,a5
    8000347a:	faf42a23          	sw	a5,-76(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    8000347e:	fb446703          	lwu	a4,-76(s0)
    80003482:	fd446683          	lwu	a3,-44(s0)
    80003486:	fe442603          	lw	a2,-28(s0)
    8000348a:	fec42783          	lw	a5,-20(s0)
    8000348e:	e43e                	sd	a5,8(sp)
    80003490:	fe842783          	lw	a5,-24(s0)
    80003494:	e03e                	sd	a5,0(sp)
    80003496:	88b2                	mv	a7,a2
    80003498:	8836                	mv	a6,a3
    8000349a:	4781                	li	a5,0
    8000349c:	f8843683          	ld	a3,-120(s0)
    800034a0:	fd843603          	ld	a2,-40(s0)
    800034a4:	f9043583          	ld	a1,-112(s0)
    800034a8:	f9843503          	ld	a0,-104(s0)
    800034ac:	c45fe0ef          	jal	ra,800020f0 <_ntoa_long>
    800034b0:	fca43c23          	sd	a0,-40(s0)
          }
        }
        format++;
    800034b4:	f8043783          	ld	a5,-128(s0)
    800034b8:	0785                	addi	a5,a5,1
    800034ba:	f8f43023          	sd	a5,-128(s0)
        break;
    800034be:	a929                	j	800038d8 <_vsnprintf+0xbac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    800034c0:	f8043783          	ld	a5,-128(s0)
    800034c4:	0007c783          	lbu	a5,0(a5)
    800034c8:	873e                	mv	a4,a5
    800034ca:	04600793          	li	a5,70
    800034ce:	00f71863          	bne	a4,a5,800034de <_vsnprintf+0x7b2>
    800034d2:	fec42783          	lw	a5,-20(s0)
    800034d6:	0207e793          	ori	a5,a5,32
    800034da:	fef42623          	sw	a5,-20(s0)
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    800034de:	f7843783          	ld	a5,-136(s0)
    800034e2:	00878713          	addi	a4,a5,8
    800034e6:	f6e43c23          	sd	a4,-136(s0)
    800034ea:	239c                	fld	fa5,0(a5)
    800034ec:	fec42683          	lw	a3,-20(s0)
    800034f0:	fe842703          	lw	a4,-24(s0)
    800034f4:	fe442783          	lw	a5,-28(s0)
    800034f8:	88b6                	mv	a7,a3
    800034fa:	883a                	mv	a6,a4
    800034fc:	e2078753          	fmv.x.d	a4,fa5
    80003500:	f8843683          	ld	a3,-120(s0)
    80003504:	fd843603          	ld	a2,-40(s0)
    80003508:	f9043583          	ld	a1,-112(s0)
    8000350c:	f9843503          	ld	a0,-104(s0)
    80003510:	e11fe0ef          	jal	ra,80002320 <_ftoa>
    80003514:	fca43c23          	sd	a0,-40(s0)
        format++;
    80003518:	f8043783          	ld	a5,-128(s0)
    8000351c:	0785                	addi	a5,a5,1
    8000351e:	f8f43023          	sd	a5,-128(s0)
        break;
    80003522:	ae5d                	j	800038d8 <_vsnprintf+0xbac>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    80003524:	f8043783          	ld	a5,-128(s0)
    80003528:	0007c783          	lbu	a5,0(a5)
    8000352c:	873e                	mv	a4,a5
    8000352e:	06700793          	li	a5,103
    80003532:	00f70b63          	beq	a4,a5,80003548 <_vsnprintf+0x81c>
    80003536:	f8043783          	ld	a5,-128(s0)
    8000353a:	0007c783          	lbu	a5,0(a5)
    8000353e:	873e                	mv	a4,a5
    80003540:	04700793          	li	a5,71
    80003544:	00f71a63          	bne	a4,a5,80003558 <_vsnprintf+0x82c>
    80003548:	fec42703          	lw	a4,-20(s0)
    8000354c:	6785                	lui	a5,0x1
    8000354e:	80078793          	addi	a5,a5,-2048 # 800 <NUM_FP_REGS+0x7e0>
    80003552:	8fd9                	or	a5,a5,a4
    80003554:	fef42623          	sw	a5,-20(s0)
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    80003558:	f8043783          	ld	a5,-128(s0)
    8000355c:	0007c783          	lbu	a5,0(a5)
    80003560:	873e                	mv	a4,a5
    80003562:	04500793          	li	a5,69
    80003566:	00f70b63          	beq	a4,a5,8000357c <_vsnprintf+0x850>
    8000356a:	f8043783          	ld	a5,-128(s0)
    8000356e:	0007c783          	lbu	a5,0(a5)
    80003572:	873e                	mv	a4,a5
    80003574:	04700793          	li	a5,71
    80003578:	00f71863          	bne	a4,a5,80003588 <_vsnprintf+0x85c>
    8000357c:	fec42783          	lw	a5,-20(s0)
    80003580:	0207e793          	ori	a5,a5,32
    80003584:	fef42623          	sw	a5,-20(s0)
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    80003588:	f7843783          	ld	a5,-136(s0)
    8000358c:	00878713          	addi	a4,a5,8
    80003590:	f6e43c23          	sd	a4,-136(s0)
    80003594:	239c                	fld	fa5,0(a5)
    80003596:	fec42683          	lw	a3,-20(s0)
    8000359a:	fe842703          	lw	a4,-24(s0)
    8000359e:	fe442783          	lw	a5,-28(s0)
    800035a2:	88b6                	mv	a7,a3
    800035a4:	883a                	mv	a6,a4
    800035a6:	e2078753          	fmv.x.d	a4,fa5
    800035aa:	f8843683          	ld	a3,-120(s0)
    800035ae:	fd843603          	ld	a2,-40(s0)
    800035b2:	f9043583          	ld	a1,-112(s0)
    800035b6:	f9843503          	ld	a0,-104(s0)
    800035ba:	ab0ff0ef          	jal	ra,8000286a <_etoa>
    800035be:	fca43c23          	sd	a0,-40(s0)
        format++;
    800035c2:	f8043783          	ld	a5,-128(s0)
    800035c6:	0785                	addi	a5,a5,1
    800035c8:	f8f43023          	sd	a5,-128(s0)
        break;
    800035cc:	a631                	j	800038d8 <_vsnprintf+0xbac>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    800035ce:	4785                	li	a5,1
    800035d0:	fcf42823          	sw	a5,-48(s0)
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    800035d4:	fec42783          	lw	a5,-20(s0)
    800035d8:	8b89                	andi	a5,a5,2
    800035da:	2781                	sext.w	a5,a5
    800035dc:	ef8d                	bnez	a5,80003616 <_vsnprintf+0x8ea>
          while (l++ < width) {
    800035de:	a00d                	j	80003600 <_vsnprintf+0x8d4>
            out(' ', buffer, idx++, maxlen);
    800035e0:	fd843783          	ld	a5,-40(s0)
    800035e4:	00178713          	addi	a4,a5,1
    800035e8:	fce43c23          	sd	a4,-40(s0)
    800035ec:	f9843703          	ld	a4,-104(s0)
    800035f0:	f8843683          	ld	a3,-120(s0)
    800035f4:	863e                	mv	a2,a5
    800035f6:	f9043583          	ld	a1,-112(s0)
    800035fa:	02000513          	li	a0,32
    800035fe:	9702                	jalr	a4
          while (l++ < width) {
    80003600:	fd042783          	lw	a5,-48(s0)
    80003604:	0017871b          	addiw	a4,a5,1
    80003608:	fce42823          	sw	a4,-48(s0)
    8000360c:	fe842703          	lw	a4,-24(s0)
    80003610:	2701                	sext.w	a4,a4
    80003612:	fce7e7e3          	bltu	a5,a4,800035e0 <_vsnprintf+0x8b4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    80003616:	f7843783          	ld	a5,-136(s0)
    8000361a:	00878713          	addi	a4,a5,8
    8000361e:	f6e43c23          	sd	a4,-136(s0)
    80003622:	439c                	lw	a5,0(a5)
    80003624:	0ff7f513          	andi	a0,a5,255
    80003628:	fd843783          	ld	a5,-40(s0)
    8000362c:	00178713          	addi	a4,a5,1
    80003630:	fce43c23          	sd	a4,-40(s0)
    80003634:	f9843703          	ld	a4,-104(s0)
    80003638:	f8843683          	ld	a3,-120(s0)
    8000363c:	863e                	mv	a2,a5
    8000363e:	f9043583          	ld	a1,-112(s0)
    80003642:	9702                	jalr	a4
        // post padding
        if (flags & FLAGS_LEFT) {
    80003644:	fec42783          	lw	a5,-20(s0)
    80003648:	8b89                	andi	a5,a5,2
    8000364a:	2781                	sext.w	a5,a5
    8000364c:	cf8d                	beqz	a5,80003686 <_vsnprintf+0x95a>
          while (l++ < width) {
    8000364e:	a00d                	j	80003670 <_vsnprintf+0x944>
            out(' ', buffer, idx++, maxlen);
    80003650:	fd843783          	ld	a5,-40(s0)
    80003654:	00178713          	addi	a4,a5,1
    80003658:	fce43c23          	sd	a4,-40(s0)
    8000365c:	f9843703          	ld	a4,-104(s0)
    80003660:	f8843683          	ld	a3,-120(s0)
    80003664:	863e                	mv	a2,a5
    80003666:	f9043583          	ld	a1,-112(s0)
    8000366a:	02000513          	li	a0,32
    8000366e:	9702                	jalr	a4
          while (l++ < width) {
    80003670:	fd042783          	lw	a5,-48(s0)
    80003674:	0017871b          	addiw	a4,a5,1
    80003678:	fce42823          	sw	a4,-48(s0)
    8000367c:	fe842703          	lw	a4,-24(s0)
    80003680:	2701                	sext.w	a4,a4
    80003682:	fce7e7e3          	bltu	a5,a4,80003650 <_vsnprintf+0x924>
          }
        }
        format++;
    80003686:	f8043783          	ld	a5,-128(s0)
    8000368a:	0785                	addi	a5,a5,1
    8000368c:	f8f43023          	sd	a5,-128(s0)
        break;
    80003690:	a4a1                	j	800038d8 <_vsnprintf+0xbac>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    80003692:	f7843783          	ld	a5,-136(s0)
    80003696:	00878713          	addi	a4,a5,8
    8000369a:	f6e43c23          	sd	a4,-136(s0)
    8000369e:	639c                	ld	a5,0(a5)
    800036a0:	fcf43423          	sd	a5,-56(s0)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    800036a4:	fe442783          	lw	a5,-28(s0)
    800036a8:	2781                	sext.w	a5,a5
    800036aa:	c781                	beqz	a5,800036b2 <_vsnprintf+0x986>
    800036ac:	fe446783          	lwu	a5,-28(s0)
    800036b0:	a011                	j	800036b4 <_vsnprintf+0x988>
    800036b2:	57fd                	li	a5,-1
    800036b4:	85be                	mv	a1,a5
    800036b6:	fc843503          	ld	a0,-56(s0)
    800036ba:	d90fe0ef          	jal	ra,80001c4a <_strnlen_s>
    800036be:	87aa                	mv	a5,a0
    800036c0:	fcf42223          	sw	a5,-60(s0)
        // pre padding
        if (flags & FLAGS_PRECISION) {
    800036c4:	fec42783          	lw	a5,-20(s0)
    800036c8:	4007f793          	andi	a5,a5,1024
    800036cc:	2781                	sext.w	a5,a5
    800036ce:	cf91                	beqz	a5,800036ea <_vsnprintf+0x9be>
          l = (l < precision ? l : precision);
    800036d0:	fc442603          	lw	a2,-60(s0)
    800036d4:	fe442783          	lw	a5,-28(s0)
    800036d8:	0007869b          	sext.w	a3,a5
    800036dc:	0006071b          	sext.w	a4,a2
    800036e0:	00d77363          	bgeu	a4,a3,800036e6 <_vsnprintf+0x9ba>
    800036e4:	87b2                	mv	a5,a2
    800036e6:	fcf42223          	sw	a5,-60(s0)
        }
        if (!(flags & FLAGS_LEFT)) {
    800036ea:	fec42783          	lw	a5,-20(s0)
    800036ee:	8b89                	andi	a5,a5,2
    800036f0:	2781                	sext.w	a5,a5
    800036f2:	e7a5                	bnez	a5,8000375a <_vsnprintf+0xa2e>
          while (l++ < width) {
    800036f4:	a00d                	j	80003716 <_vsnprintf+0x9ea>
            out(' ', buffer, idx++, maxlen);
    800036f6:	fd843783          	ld	a5,-40(s0)
    800036fa:	00178713          	addi	a4,a5,1
    800036fe:	fce43c23          	sd	a4,-40(s0)
    80003702:	f9843703          	ld	a4,-104(s0)
    80003706:	f8843683          	ld	a3,-120(s0)
    8000370a:	863e                	mv	a2,a5
    8000370c:	f9043583          	ld	a1,-112(s0)
    80003710:	02000513          	li	a0,32
    80003714:	9702                	jalr	a4
          while (l++ < width) {
    80003716:	fc442783          	lw	a5,-60(s0)
    8000371a:	0017871b          	addiw	a4,a5,1
    8000371e:	fce42223          	sw	a4,-60(s0)
    80003722:	fe842703          	lw	a4,-24(s0)
    80003726:	2701                	sext.w	a4,a4
    80003728:	fce7e7e3          	bltu	a5,a4,800036f6 <_vsnprintf+0x9ca>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    8000372c:	a03d                	j	8000375a <_vsnprintf+0xa2e>
          out(*(p++), buffer, idx++, maxlen);
    8000372e:	fc843783          	ld	a5,-56(s0)
    80003732:	00178713          	addi	a4,a5,1
    80003736:	fce43423          	sd	a4,-56(s0)
    8000373a:	0007c503          	lbu	a0,0(a5)
    8000373e:	fd843783          	ld	a5,-40(s0)
    80003742:	00178713          	addi	a4,a5,1
    80003746:	fce43c23          	sd	a4,-40(s0)
    8000374a:	f9843703          	ld	a4,-104(s0)
    8000374e:	f8843683          	ld	a3,-120(s0)
    80003752:	863e                	mv	a2,a5
    80003754:	f9043583          	ld	a1,-112(s0)
    80003758:	9702                	jalr	a4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    8000375a:	fc843783          	ld	a5,-56(s0)
    8000375e:	0007c783          	lbu	a5,0(a5)
    80003762:	cf91                	beqz	a5,8000377e <_vsnprintf+0xa52>
    80003764:	fec42783          	lw	a5,-20(s0)
    80003768:	4007f793          	andi	a5,a5,1024
    8000376c:	2781                	sext.w	a5,a5
    8000376e:	d3e1                	beqz	a5,8000372e <_vsnprintf+0xa02>
    80003770:	fe442783          	lw	a5,-28(s0)
    80003774:	fff7871b          	addiw	a4,a5,-1
    80003778:	fee42223          	sw	a4,-28(s0)
    8000377c:	fbcd                	bnez	a5,8000372e <_vsnprintf+0xa02>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    8000377e:	fec42783          	lw	a5,-20(s0)
    80003782:	8b89                	andi	a5,a5,2
    80003784:	2781                	sext.w	a5,a5
    80003786:	cf8d                	beqz	a5,800037c0 <_vsnprintf+0xa94>
          while (l++ < width) {
    80003788:	a00d                	j	800037aa <_vsnprintf+0xa7e>
            out(' ', buffer, idx++, maxlen);
    8000378a:	fd843783          	ld	a5,-40(s0)
    8000378e:	00178713          	addi	a4,a5,1
    80003792:	fce43c23          	sd	a4,-40(s0)
    80003796:	f9843703          	ld	a4,-104(s0)
    8000379a:	f8843683          	ld	a3,-120(s0)
    8000379e:	863e                	mv	a2,a5
    800037a0:	f9043583          	ld	a1,-112(s0)
    800037a4:	02000513          	li	a0,32
    800037a8:	9702                	jalr	a4
          while (l++ < width) {
    800037aa:	fc442783          	lw	a5,-60(s0)
    800037ae:	0017871b          	addiw	a4,a5,1
    800037b2:	fce42223          	sw	a4,-60(s0)
    800037b6:	fe842703          	lw	a4,-24(s0)
    800037ba:	2701                	sext.w	a4,a4
    800037bc:	fce7e7e3          	bltu	a5,a4,8000378a <_vsnprintf+0xa5e>
          }
        }
        format++;
    800037c0:	f8043783          	ld	a5,-128(s0)
    800037c4:	0785                	addi	a5,a5,1
    800037c6:	f8f43023          	sd	a5,-128(s0)
        break;
    800037ca:	a239                	j	800038d8 <_vsnprintf+0xbac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    800037cc:	47c1                	li	a5,16
    800037ce:	fef42423          	sw	a5,-24(s0)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    800037d2:	fec42783          	lw	a5,-20(s0)
    800037d6:	0217e793          	ori	a5,a5,33
    800037da:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    800037de:	4785                	li	a5,1
    800037e0:	faf40da3          	sb	a5,-69(s0)
        if (is_ll) {
    800037e4:	fbb44783          	lbu	a5,-69(s0)
    800037e8:	0ff7f793          	andi	a5,a5,255
    800037ec:	c3b1                	beqz	a5,80003830 <_vsnprintf+0xb04>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
    800037ee:	f7843783          	ld	a5,-136(s0)
    800037f2:	00878713          	addi	a4,a5,8
    800037f6:	f6e43c23          	sd	a4,-136(s0)
    800037fa:	639c                	ld	a5,0(a5)
    800037fc:	86be                	mv	a3,a5
    800037fe:	fe442703          	lw	a4,-28(s0)
    80003802:	fec42783          	lw	a5,-20(s0)
    80003806:	e43e                	sd	a5,8(sp)
    80003808:	fe842783          	lw	a5,-24(s0)
    8000380c:	e03e                	sd	a5,0(sp)
    8000380e:	88ba                	mv	a7,a4
    80003810:	4841                	li	a6,16
    80003812:	4781                	li	a5,0
    80003814:	8736                	mv	a4,a3
    80003816:	f8843683          	ld	a3,-120(s0)
    8000381a:	fd843603          	ld	a2,-40(s0)
    8000381e:	f9043583          	ld	a1,-112(s0)
    80003822:	f9843503          	ld	a0,-104(s0)
    80003826:	9e3fe0ef          	jal	ra,80002208 <_ntoa_long_long>
    8000382a:	fca43c23          	sd	a0,-40(s0)
    8000382e:	a089                	j	80003870 <_vsnprintf+0xb44>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    80003830:	f7843783          	ld	a5,-136(s0)
    80003834:	00878713          	addi	a4,a5,8
    80003838:	f6e43c23          	sd	a4,-136(s0)
    8000383c:	639c                	ld	a5,0(a5)
    8000383e:	86be                	mv	a3,a5
    80003840:	fe442703          	lw	a4,-28(s0)
    80003844:	fec42783          	lw	a5,-20(s0)
    80003848:	e43e                	sd	a5,8(sp)
    8000384a:	fe842783          	lw	a5,-24(s0)
    8000384e:	e03e                	sd	a5,0(sp)
    80003850:	88ba                	mv	a7,a4
    80003852:	4841                	li	a6,16
    80003854:	4781                	li	a5,0
    80003856:	8736                	mv	a4,a3
    80003858:	f8843683          	ld	a3,-120(s0)
    8000385c:	fd843603          	ld	a2,-40(s0)
    80003860:	f9043583          	ld	a1,-112(s0)
    80003864:	f9843503          	ld	a0,-104(s0)
    80003868:	889fe0ef          	jal	ra,800020f0 <_ntoa_long>
    8000386c:	fca43c23          	sd	a0,-40(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    80003870:	f8043783          	ld	a5,-128(s0)
    80003874:	0785                	addi	a5,a5,1
    80003876:	f8f43023          	sd	a5,-128(s0)
        break;
    8000387a:	a8b9                	j	800038d8 <_vsnprintf+0xbac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    8000387c:	fd843783          	ld	a5,-40(s0)
    80003880:	00178713          	addi	a4,a5,1
    80003884:	fce43c23          	sd	a4,-40(s0)
    80003888:	f9843703          	ld	a4,-104(s0)
    8000388c:	f8843683          	ld	a3,-120(s0)
    80003890:	863e                	mv	a2,a5
    80003892:	f9043583          	ld	a1,-112(s0)
    80003896:	02500513          	li	a0,37
    8000389a:	9702                	jalr	a4
        format++;
    8000389c:	f8043783          	ld	a5,-128(s0)
    800038a0:	0785                	addi	a5,a5,1
    800038a2:	f8f43023          	sd	a5,-128(s0)
        break;
    800038a6:	a80d                	j	800038d8 <_vsnprintf+0xbac>

      default :
        out(*format, buffer, idx++, maxlen);
    800038a8:	f8043783          	ld	a5,-128(s0)
    800038ac:	0007c503          	lbu	a0,0(a5)
    800038b0:	fd843783          	ld	a5,-40(s0)
    800038b4:	00178713          	addi	a4,a5,1
    800038b8:	fce43c23          	sd	a4,-40(s0)
    800038bc:	f9843703          	ld	a4,-104(s0)
    800038c0:	f8843683          	ld	a3,-120(s0)
    800038c4:	863e                	mv	a2,a5
    800038c6:	f9043583          	ld	a1,-112(s0)
    800038ca:	9702                	jalr	a4
        format++;
    800038cc:	f8043783          	ld	a5,-128(s0)
    800038d0:	0785                	addi	a5,a5,1
    800038d2:	f8f43023          	sd	a5,-128(s0)
        break;
    800038d6:	0001                	nop
  while (*format)
    800038d8:	f8043783          	ld	a5,-128(s0)
    800038dc:	0007c783          	lbu	a5,0(a5)
    800038e0:	c8079263          	bnez	a5,80002d64 <_vsnprintf+0x38>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    800038e4:	fd843703          	ld	a4,-40(s0)
    800038e8:	f8843783          	ld	a5,-120(s0)
    800038ec:	00f76663          	bltu	a4,a5,800038f8 <_vsnprintf+0xbcc>
    800038f0:	f8843783          	ld	a5,-120(s0)
    800038f4:	17fd                	addi	a5,a5,-1
    800038f6:	a019                	j	800038fc <_vsnprintf+0xbd0>
    800038f8:	fd843783          	ld	a5,-40(s0)
    800038fc:	f9843703          	ld	a4,-104(s0)
    80003900:	f8843683          	ld	a3,-120(s0)
    80003904:	863e                	mv	a2,a5
    80003906:	f9043583          	ld	a1,-112(s0)
    8000390a:	4501                	li	a0,0
    8000390c:	9702                	jalr	a4

  // return written chars without terminating \0
  return (int)idx;
    8000390e:	fd843783          	ld	a5,-40(s0)
    80003912:	2781                	sext.w	a5,a5
}
    80003914:	853e                	mv	a0,a5
    80003916:	60ea                	ld	ra,152(sp)
    80003918:	644a                	ld	s0,144(sp)
    8000391a:	610d                	addi	sp,sp,160
    8000391c:	8082                	ret

000000008000391e <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    8000391e:	7119                	addi	sp,sp,-128
    80003920:	fc06                	sd	ra,56(sp)
    80003922:	f822                	sd	s0,48(sp)
    80003924:	0080                	addi	s0,sp,64
    80003926:	fca43423          	sd	a0,-56(s0)
    8000392a:	e40c                	sd	a1,8(s0)
    8000392c:	e810                	sd	a2,16(s0)
    8000392e:	ec14                	sd	a3,24(s0)
    80003930:	f018                	sd	a4,32(s0)
    80003932:	f41c                	sd	a5,40(s0)
    80003934:	03043823          	sd	a6,48(s0)
    80003938:	03143c23          	sd	a7,56(s0)
  va_list va;
  va_start(va, format);
    8000393c:	04040793          	addi	a5,s0,64
    80003940:	fcf43023          	sd	a5,-64(s0)
    80003944:	fc043783          	ld	a5,-64(s0)
    80003948:	fc878793          	addi	a5,a5,-56
    8000394c:	fef43023          	sd	a5,-32(s0)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80003950:	fe043703          	ld	a4,-32(s0)
    80003954:	fd840793          	addi	a5,s0,-40
    80003958:	fc843683          	ld	a3,-56(s0)
    8000395c:	567d                	li	a2,-1
    8000395e:	85be                	mv	a1,a5
    80003960:	ffffe517          	auipc	a0,0xffffe
    80003964:	26e50513          	addi	a0,a0,622 # 80001bce <_out_char>
    80003968:	bc4ff0ef          	jal	ra,80002d2c <_vsnprintf>
    8000396c:	87aa                	mv	a5,a0
    8000396e:	fef42623          	sw	a5,-20(s0)
  va_end(va);
  return ret;
    80003972:	fec42783          	lw	a5,-20(s0)
}
    80003976:	853e                	mv	a0,a5
    80003978:	70e2                	ld	ra,56(sp)
    8000397a:	7442                	ld	s0,48(sp)
    8000397c:	6109                	addi	sp,sp,128
    8000397e:	8082                	ret

0000000080003980 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    80003980:	7159                	addi	sp,sp,-112
    80003982:	fc06                	sd	ra,56(sp)
    80003984:	f822                	sd	s0,48(sp)
    80003986:	0080                	addi	s0,sp,64
    80003988:	fca43c23          	sd	a0,-40(s0)
    8000398c:	fcb43823          	sd	a1,-48(s0)
    80003990:	e010                	sd	a2,0(s0)
    80003992:	e414                	sd	a3,8(s0)
    80003994:	e818                	sd	a4,16(s0)
    80003996:	ec1c                	sd	a5,24(s0)
    80003998:	03043023          	sd	a6,32(s0)
    8000399c:	03143423          	sd	a7,40(s0)
  va_list va;
  va_start(va, format);
    800039a0:	03040793          	addi	a5,s0,48
    800039a4:	fcf43423          	sd	a5,-56(s0)
    800039a8:	fc843783          	ld	a5,-56(s0)
    800039ac:	fd078793          	addi	a5,a5,-48
    800039b0:	fef43023          	sd	a5,-32(s0)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    800039b4:	fe043783          	ld	a5,-32(s0)
    800039b8:	873e                	mv	a4,a5
    800039ba:	fd043683          	ld	a3,-48(s0)
    800039be:	567d                	li	a2,-1
    800039c0:	fd843583          	ld	a1,-40(s0)
    800039c4:	ffffe517          	auipc	a0,0xffffe
    800039c8:	1ac50513          	addi	a0,a0,428 # 80001b70 <_out_buffer>
    800039cc:	b60ff0ef          	jal	ra,80002d2c <_vsnprintf>
    800039d0:	87aa                	mv	a5,a0
    800039d2:	fef42623          	sw	a5,-20(s0)
  va_end(va);
  return ret;
    800039d6:	fec42783          	lw	a5,-20(s0)
}
    800039da:	853e                	mv	a0,a5
    800039dc:	70e2                	ld	ra,56(sp)
    800039de:	7442                	ld	s0,48(sp)
    800039e0:	6165                	addi	sp,sp,112
    800039e2:	8082                	ret

00000000800039e4 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    800039e4:	7159                	addi	sp,sp,-112
    800039e6:	fc06                	sd	ra,56(sp)
    800039e8:	f822                	sd	s0,48(sp)
    800039ea:	0080                	addi	s0,sp,64
    800039ec:	fca43c23          	sd	a0,-40(s0)
    800039f0:	fcb43823          	sd	a1,-48(s0)
    800039f4:	fcc43423          	sd	a2,-56(s0)
    800039f8:	e414                	sd	a3,8(s0)
    800039fa:	e818                	sd	a4,16(s0)
    800039fc:	ec1c                	sd	a5,24(s0)
    800039fe:	03043023          	sd	a6,32(s0)
    80003a02:	03143423          	sd	a7,40(s0)
  va_list va;
  va_start(va, format);
    80003a06:	03040793          	addi	a5,s0,48
    80003a0a:	fcf43023          	sd	a5,-64(s0)
    80003a0e:	fc043783          	ld	a5,-64(s0)
    80003a12:	fd878793          	addi	a5,a5,-40
    80003a16:	fef43023          	sd	a5,-32(s0)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80003a1a:	fe043783          	ld	a5,-32(s0)
    80003a1e:	873e                	mv	a4,a5
    80003a20:	fc843683          	ld	a3,-56(s0)
    80003a24:	fd043603          	ld	a2,-48(s0)
    80003a28:	fd843583          	ld	a1,-40(s0)
    80003a2c:	ffffe517          	auipc	a0,0xffffe
    80003a30:	14450513          	addi	a0,a0,324 # 80001b70 <_out_buffer>
    80003a34:	af8ff0ef          	jal	ra,80002d2c <_vsnprintf>
    80003a38:	87aa                	mv	a5,a0
    80003a3a:	fef42623          	sw	a5,-20(s0)
  va_end(va);
  return ret;
    80003a3e:	fec42783          	lw	a5,-20(s0)
}
    80003a42:	853e                	mv	a0,a5
    80003a44:	70e2                	ld	ra,56(sp)
    80003a46:	7442                	ld	s0,48(sp)
    80003a48:	6165                	addi	sp,sp,112
    80003a4a:	8082                	ret

0000000080003a4c <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    80003a4c:	7179                	addi	sp,sp,-48
    80003a4e:	f406                	sd	ra,40(sp)
    80003a50:	f022                	sd	s0,32(sp)
    80003a52:	1800                	addi	s0,sp,48
    80003a54:	fca43c23          	sd	a0,-40(s0)
    80003a58:	fcb43823          	sd	a1,-48(s0)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80003a5c:	fe840793          	addi	a5,s0,-24
    80003a60:	fd043703          	ld	a4,-48(s0)
    80003a64:	fd843683          	ld	a3,-40(s0)
    80003a68:	567d                	li	a2,-1
    80003a6a:	85be                	mv	a1,a5
    80003a6c:	ffffe517          	auipc	a0,0xffffe
    80003a70:	16250513          	addi	a0,a0,354 # 80001bce <_out_char>
    80003a74:	ab8ff0ef          	jal	ra,80002d2c <_vsnprintf>
    80003a78:	87aa                	mv	a5,a0
}
    80003a7a:	853e                	mv	a0,a5
    80003a7c:	70a2                	ld	ra,40(sp)
    80003a7e:	7402                	ld	s0,32(sp)
    80003a80:	6145                	addi	sp,sp,48
    80003a82:	8082                	ret

0000000080003a84 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    80003a84:	7179                	addi	sp,sp,-48
    80003a86:	f406                	sd	ra,40(sp)
    80003a88:	f022                	sd	s0,32(sp)
    80003a8a:	1800                	addi	s0,sp,48
    80003a8c:	fea43423          	sd	a0,-24(s0)
    80003a90:	feb43023          	sd	a1,-32(s0)
    80003a94:	fcc43c23          	sd	a2,-40(s0)
    80003a98:	fcd43823          	sd	a3,-48(s0)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    80003a9c:	fd043703          	ld	a4,-48(s0)
    80003aa0:	fd843683          	ld	a3,-40(s0)
    80003aa4:	fe043603          	ld	a2,-32(s0)
    80003aa8:	fe843583          	ld	a1,-24(s0)
    80003aac:	ffffe517          	auipc	a0,0xffffe
    80003ab0:	0c450513          	addi	a0,a0,196 # 80001b70 <_out_buffer>
    80003ab4:	a78ff0ef          	jal	ra,80002d2c <_vsnprintf>
    80003ab8:	87aa                	mv	a5,a0
}
    80003aba:	853e                	mv	a0,a5
    80003abc:	70a2                	ld	ra,40(sp)
    80003abe:	7402                	ld	s0,32(sp)
    80003ac0:	6145                	addi	sp,sp,48
    80003ac2:	8082                	ret

0000000080003ac4 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    80003ac4:	7119                	addi	sp,sp,-128
    80003ac6:	e486                	sd	ra,72(sp)
    80003ac8:	e0a2                	sd	s0,64(sp)
    80003aca:	0880                	addi	s0,sp,80
    80003acc:	fca43423          	sd	a0,-56(s0)
    80003ad0:	fcb43023          	sd	a1,-64(s0)
    80003ad4:	fac43c23          	sd	a2,-72(s0)
    80003ad8:	e414                	sd	a3,8(s0)
    80003ada:	e818                	sd	a4,16(s0)
    80003adc:	ec1c                	sd	a5,24(s0)
    80003ade:	03043023          	sd	a6,32(s0)
    80003ae2:	03143423          	sd	a7,40(s0)
  va_list va;
  va_start(va, format);
    80003ae6:	03040793          	addi	a5,s0,48
    80003aea:	faf43823          	sd	a5,-80(s0)
    80003aee:	fb043783          	ld	a5,-80(s0)
    80003af2:	fd878793          	addi	a5,a5,-40
    80003af6:	fef43023          	sd	a5,-32(s0)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    80003afa:	fc843783          	ld	a5,-56(s0)
    80003afe:	fcf43823          	sd	a5,-48(s0)
    80003b02:	fc043783          	ld	a5,-64(s0)
    80003b06:	fcf43c23          	sd	a5,-40(s0)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    80003b0a:	fe043703          	ld	a4,-32(s0)
    80003b0e:	fd040793          	addi	a5,s0,-48
    80003b12:	fb843683          	ld	a3,-72(s0)
    80003b16:	567d                	li	a2,-1
    80003b18:	85be                	mv	a1,a5
    80003b1a:	ffffe517          	auipc	a0,0xffffe
    80003b1e:	0ec50513          	addi	a0,a0,236 # 80001c06 <_out_fct>
    80003b22:	a0aff0ef          	jal	ra,80002d2c <_vsnprintf>
    80003b26:	87aa                	mv	a5,a0
    80003b28:	fef42623          	sw	a5,-20(s0)
  va_end(va);
  return ret;
    80003b2c:	fec42783          	lw	a5,-20(s0)
}
    80003b30:	853e                	mv	a0,a5
    80003b32:	60a6                	ld	ra,72(sp)
    80003b34:	6406                	ld	s0,64(sp)
    80003b36:	6109                	addi	sp,sp,128
    80003b38:	8082                	ret

0000000080003b3a <_text_end>:
    80003b3a:	aa    	Address 0x0000000080003b3a is out of bounds.

    80003b3e:	 
